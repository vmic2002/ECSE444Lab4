
Lab4VictorMicha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800b578  0800b578  0001b578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba44  0800ba44  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba44  0800ba44  0001ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba4c  0800ba4c  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba4c  0800ba4c  0001ba4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800ba54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000133c  20000258  0800bcac  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  0800bcac  00021594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e659  00000000  00000000  000202cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004995  00000000  00000000  0003e924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  000432c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000161d  00000000  00000000  00044f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bcc7  00000000  00000000  0004657d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021926  00000000  00000000  00072244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010611a  00000000  00000000  00093b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008774  00000000  00000000  00199c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001a23f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b560 	.word	0x0800b560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800b560 	.word	0x0800b560

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000274 	.word	0x20000274
 8000ed4:	200002c8 	.word	0x200002c8

08000ed8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f831 	bl	8001f50 <SENSOR_IO_Read>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f023 0303 	bic.w	r3, r3, #3
 8000f08:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f18:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	2120      	movs	r1, #32
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fffa 	bl	8001f1c <SENSOR_IO_Write>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000f3e:	f000 ffe3 	bl	8001f08 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	210f      	movs	r1, #15
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 f801 	bl	8001f50 <SENSOR_IO_Read>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	b2d8      	uxtb	r0, r3
 8000f6a:	f107 020c 	add.w	r2, r7, #12
 8000f6e:	2302      	movs	r3, #2
 8000f70:	21b0      	movs	r1, #176	; 0xb0
 8000f72:	f001 f80b 	bl	8001f8c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f76:	7b3b      	ldrb	r3, [r7, #12]
 8000f78:	085b      	lsrs	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	b2d8      	uxtb	r0, r3
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	2302      	movs	r3, #2
 8000f90:	21b6      	movs	r1, #182	; 0xb6
 8000f92:	f000 fffb 	bl	8001f8c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	7b3b      	ldrb	r3, [r7, #12]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	f107 020c 	add.w	r2, r7, #12
 8000fac:	2302      	movs	r3, #2
 8000fae:	21ba      	movs	r1, #186	; 0xba
 8000fb0:	f000 ffec 	bl	8001f8c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	b2d8      	uxtb	r0, r3
 8000fc6:	f107 020c 	add.w	r2, r7, #12
 8000fca:	2302      	movs	r3, #2
 8000fcc:	21a8      	movs	r1, #168	; 0xa8
 8000fce:	f000 ffdd 	bl	8001f8c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fe4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000ff6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001004:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001008:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800100c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800101e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001032:	edd7 7a04 	vldr	s15, [r7, #16]
 8001036:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800103a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001042:	edd7 7a04 	vldr	s15, [r7, #16]
 8001046:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800108c <HTS221_H_ReadHumidity+0x130>
 800104a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	dd01      	ble.n	8001058 <HTS221_H_ReadHumidity+0xfc>
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HTS221_H_ReadHumidity+0x134>)
 8001056:	e00a      	b.n	800106e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001058:	edd7 7a04 	vldr	s15, [r7, #16]
 800105c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d502      	bpl.n	800106c <HTS221_H_ReadHumidity+0x110>
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e000      	b.n	800106e <HTS221_H_ReadHumidity+0x112>
 800106c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800106e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001070:	edd7 7a04 	vldr	s15, [r7, #16]
 8001074:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001078:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800107c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	447a0000 	.word	0x447a0000
 8001090:	447a0000 	.word	0x447a0000

08001094 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	463b      	mov	r3, r7
 800109c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80010a0:	783b      	ldrb	r3, [r7, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	2120      	movs	r1, #32
 80010a6:	203c      	movs	r0, #60	; 0x3c
 80010a8:	f000 ff38 	bl	8001f1c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	461a      	mov	r2, r3
 80010b0:	2121      	movs	r1, #33	; 0x21
 80010b2:	203c      	movs	r0, #60	; 0x3c
 80010b4:	f000 ff32 	bl	8001f1c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80010b8:	78bb      	ldrb	r3, [r7, #2]
 80010ba:	461a      	mov	r2, r3
 80010bc:	2122      	movs	r1, #34	; 0x22
 80010be:	203c      	movs	r0, #60	; 0x3c
 80010c0:	f000 ff2c 	bl	8001f1c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	461a      	mov	r2, r3
 80010c8:	2123      	movs	r1, #35	; 0x23
 80010ca:	203c      	movs	r0, #60	; 0x3c
 80010cc:	f000 ff26 	bl	8001f1c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80010d0:	793b      	ldrb	r3, [r7, #4]
 80010d2:	461a      	mov	r2, r3
 80010d4:	2124      	movs	r1, #36	; 0x24
 80010d6:	203c      	movs	r0, #60	; 0x3c
 80010d8:	f000 ff20 	bl	8001f1c <SENSOR_IO_Write>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80010ee:	2122      	movs	r1, #34	; 0x22
 80010f0:	203c      	movs	r0, #60	; 0x3c
 80010f2:	f000 ff2d 	bl	8001f50 <SENSOR_IO_Read>
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f023 0303 	bic.w	r3, r3, #3
 8001100:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f043 0303 	orr.w	r3, r3, #3
 8001108:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	461a      	mov	r2, r3
 800110e:	2122      	movs	r1, #34	; 0x22
 8001110:	203c      	movs	r0, #60	; 0x3c
 8001112:	f000 ff03 	bl	8001f1c <SENSOR_IO_Write>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001122:	f000 fef1 	bl	8001f08 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001126:	210f      	movs	r1, #15
 8001128:	203c      	movs	r0, #60	; 0x3c
 800112a:	f000 ff11 	bl	8001f50 <SENSOR_IO_Read>
 800112e:	4603      	mov	r3, r0
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}

08001134 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001142:	2122      	movs	r1, #34	; 0x22
 8001144:	203c      	movs	r0, #60	; 0x3c
 8001146:	f000 ff03 	bl	8001f50 <SENSOR_IO_Read>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	f023 0320 	bic.w	r3, r3, #32
 8001154:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	461a      	mov	r2, r3
 8001168:	2122      	movs	r1, #34	; 0x22
 800116a:	203c      	movs	r0, #60	; 0x3c
 800116c:	f000 fed6 	bl	8001f1c <SENSOR_IO_Write>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800118e:	2121      	movs	r1, #33	; 0x21
 8001190:	203c      	movs	r0, #60	; 0x3c
 8001192:	f000 fedd 	bl	8001f50 <SENSOR_IO_Read>
 8001196:	4603      	mov	r3, r0
 8001198:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800119a:	f107 0208 	add.w	r2, r7, #8
 800119e:	2306      	movs	r3, #6
 80011a0:	21a8      	movs	r1, #168	; 0xa8
 80011a2:	203c      	movs	r0, #60	; 0x3c
 80011a4:	f000 fef2 	bl	8001f8c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
 80011ac:	e01c      	b.n	80011e8 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	3301      	adds	r3, #1
 80011b4:	3320      	adds	r3, #32
 80011b6:	443b      	add	r3, r7
 80011b8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	3320      	adds	r3, #32
 80011c8:	443b      	add	r3, r7
 80011ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	7ffb      	ldrb	r3, [r7, #31]
 80011d6:	b212      	sxth	r2, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	3320      	adds	r3, #32
 80011dc:	443b      	add	r3, r7
 80011de:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	3301      	adds	r3, #1
 80011e6:	77fb      	strb	r3, [r7, #31]
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d9df      	bls.n	80011ae <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80011f4:	2b60      	cmp	r3, #96	; 0x60
 80011f6:	d013      	beq.n	8001220 <LIS3MDL_MagReadXYZ+0xa8>
 80011f8:	2b60      	cmp	r3, #96	; 0x60
 80011fa:	dc14      	bgt.n	8001226 <LIS3MDL_MagReadXYZ+0xae>
 80011fc:	2b40      	cmp	r3, #64	; 0x40
 80011fe:	d00c      	beq.n	800121a <LIS3MDL_MagReadXYZ+0xa2>
 8001200:	2b40      	cmp	r3, #64	; 0x40
 8001202:	dc10      	bgt.n	8001226 <LIS3MDL_MagReadXYZ+0xae>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <LIS3MDL_MagReadXYZ+0x96>
 8001208:	2b20      	cmp	r3, #32
 800120a:	d003      	beq.n	8001214 <LIS3MDL_MagReadXYZ+0x9c>
 800120c:	e00b      	b.n	8001226 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <LIS3MDL_MagReadXYZ+0xfc>)
 8001210:	61bb      	str	r3, [r7, #24]
    break;
 8001212:	e008      	b.n	8001226 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <LIS3MDL_MagReadXYZ+0x100>)
 8001216:	61bb      	str	r3, [r7, #24]
    break;
 8001218:	e005      	b.n	8001226 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <LIS3MDL_MagReadXYZ+0x104>)
 800121c:	61bb      	str	r3, [r7, #24]
    break;
 800121e:	e002      	b.n	8001226 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <LIS3MDL_MagReadXYZ+0x108>)
 8001222:	61bb      	str	r3, [r7, #24]
    break;    
 8001224:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	77fb      	strb	r3, [r7, #31]
 800122a:	e01a      	b.n	8001262 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	3320      	adds	r3, #32
 8001232:	443b      	add	r3, r7
 8001234:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001240:	edd7 7a06 	vldr	s15, [r7, #24]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001254:	ee17 2a90 	vmov	r2, s15
 8001258:	b212      	sxth	r2, r2
 800125a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	3301      	adds	r3, #1
 8001260:	77fb      	strb	r3, [r7, #31]
 8001262:	7ffb      	ldrb	r3, [r7, #31]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d9e1      	bls.n	800122c <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	3e0f5c29 	.word	0x3e0f5c29
 8001278:	3e947ae1 	.word	0x3e947ae1
 800127c:	3edc28f6 	.word	0x3edc28f6
 8001280:	3f147ae1 	.word	0x3f147ae1

08001284 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f879 	bl	8001388 <LPS22HB_Init>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80012ac:	f000 fe2c 	bl	8001f08 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	210f      	movs	r1, #15
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fe4a 	bl	8001f50 <SENSOR_IO_Read>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	74fb      	strb	r3, [r7, #19]
 80012de:	e013      	b.n	8001308 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	7cfb      	ldrb	r3, [r7, #19]
 80012e6:	3328      	adds	r3, #40	; 0x28
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	7cfc      	ldrb	r4, [r7, #19]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f000 fe2e 	bl	8001f50 <SENSOR_IO_Read>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	f104 0318 	add.w	r3, r4, #24
 80012fc:	443b      	add	r3, r7
 80012fe:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8001302:	7cfb      	ldrb	r3, [r7, #19]
 8001304:	3301      	adds	r3, #1
 8001306:	74fb      	strb	r3, [r7, #19]
 8001308:	7cfb      	ldrb	r3, [r7, #19]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d9e8      	bls.n	80012e0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	74fb      	strb	r3, [r7, #19]
 8001312:	e00f      	b.n	8001334 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001314:	7cfb      	ldrb	r3, [r7, #19]
 8001316:	3318      	adds	r3, #24
 8001318:	443b      	add	r3, r7
 800131a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800131e:	461a      	mov	r2, r3
 8001320:	7cfb      	ldrb	r3, [r7, #19]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	4313      	orrs	r3, r2
 800132c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800132e:	7cfb      	ldrb	r3, [r7, #19]
 8001330:	3301      	adds	r3, #1
 8001332:	74fb      	strb	r3, [r7, #19]
 8001334:	7cfb      	ldrb	r3, [r7, #19]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d9ec      	bls.n	8001314 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800134a:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2264      	movs	r2, #100	; 0x64
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	da01      	bge.n	8001360 <LPS22HB_P_ReadPressure+0x94>
 800135c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001360:	131b      	asrs	r3, r3, #12
 8001362:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001384 <LPS22HB_P_ReadPressure+0xb8>
 8001372:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001376:	eef0 7a66 	vmov.f32	s15, s13
}
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	42c80000 	.word	0x42c80000

08001388 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	211a      	movs	r1, #26
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fdd9 	bl	8001f50 <SENSOR_IO_Read>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	211a      	movs	r1, #26
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fdae 	bl	8001f1c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2110      	movs	r1, #16
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fdc2 	bl	8001f50 <SENSOR_IO_Read>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80013de:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	f023 0302 	bic.w	r3, r3, #2
 80013e6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	2110      	movs	r1, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fd8f 	bl	8001f1c <SENSOR_IO_Write>
}  
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001414:	2110      	movs	r1, #16
 8001416:	20d4      	movs	r0, #212	; 0xd4
 8001418:	f000 fd9a 	bl	8001f50 <SENSOR_IO_Read>
 800141c:	4603      	mov	r3, r0
 800141e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800142c:	7bba      	ldrb	r2, [r7, #14]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	4313      	orrs	r3, r2
 8001432:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	461a      	mov	r2, r3
 8001438:	2110      	movs	r1, #16
 800143a:	20d4      	movs	r0, #212	; 0xd4
 800143c:	f000 fd6e 	bl	8001f1c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001440:	2112      	movs	r1, #18
 8001442:	20d4      	movs	r0, #212	; 0xd4
 8001444:	f000 fd84 	bl	8001f50 <SENSOR_IO_Read>
 8001448:	4603      	mov	r3, r0
 800144a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29b      	uxth	r3, r3
 8001452:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800145a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800145c:	7bba      	ldrb	r2, [r7, #14]
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	4313      	orrs	r3, r2
 8001462:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	461a      	mov	r2, r3
 8001468:	2112      	movs	r1, #18
 800146a:	20d4      	movs	r0, #212	; 0xd4
 800146c:	f000 fd56 	bl	8001f1c <SENSOR_IO_Write>
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001482:	2110      	movs	r1, #16
 8001484:	20d4      	movs	r0, #212	; 0xd4
 8001486:	f000 fd63 	bl	8001f50 <SENSOR_IO_Read>
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	461a      	mov	r2, r3
 800149a:	2110      	movs	r1, #16
 800149c:	20d4      	movs	r0, #212	; 0xd4
 800149e:	f000 fd3d 	bl	8001f1c <SENSOR_IO_Write>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80014ae:	f000 fd2b 	bl	8001f08 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80014b2:	210f      	movs	r1, #15
 80014b4:	20d4      	movs	r0, #212	; 0xd4
 80014b6:	f000 fd4b 	bl	8001f50 <SENSOR_IO_Read>
 80014ba:	4603      	mov	r3, r0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}

080014c0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80014ce:	2115      	movs	r1, #21
 80014d0:	20d4      	movs	r0, #212	; 0xd4
 80014d2:	f000 fd3d 	bl	8001f50 <SENSOR_IO_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	f023 0310 	bic.w	r3, r3, #16
 80014e0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	461a      	mov	r2, r3
 80014f4:	2115      	movs	r1, #21
 80014f6:	20d4      	movs	r0, #212	; 0xd4
 80014f8:	f000 fd10 	bl	8001f1c <SENSOR_IO_Write>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800150c:	2300      	movs	r3, #0
 800150e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800151a:	2110      	movs	r1, #16
 800151c:	20d4      	movs	r0, #212	; 0xd4
 800151e:	f000 fd17 	bl	8001f50 <SENSOR_IO_Read>
 8001522:	4603      	mov	r3, r0
 8001524:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001526:	f107 0208 	add.w	r2, r7, #8
 800152a:	2306      	movs	r3, #6
 800152c:	2128      	movs	r1, #40	; 0x28
 800152e:	20d4      	movs	r0, #212	; 0xd4
 8001530:	f000 fd2c 	bl	8001f8c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001534:	2300      	movs	r3, #0
 8001536:	77fb      	strb	r3, [r7, #31]
 8001538:	e01c      	b.n	8001574 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	3301      	adds	r3, #1
 8001540:	3320      	adds	r3, #32
 8001542:	443b      	add	r3, r7
 8001544:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001548:	b29b      	uxth	r3, r3
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b29a      	uxth	r2, r3
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	3320      	adds	r3, #32
 8001554:	443b      	add	r3, r7
 8001556:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	b212      	sxth	r2, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	3320      	adds	r3, #32
 8001568:	443b      	add	r3, r7
 800156a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	3301      	adds	r3, #1
 8001572:	77fb      	strb	r3, [r7, #31]
 8001574:	7ffb      	ldrb	r3, [r7, #31]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d9df      	bls.n	800153a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b0c      	cmp	r3, #12
 8001582:	d829      	bhi.n	80015d8 <LSM6DSL_AccReadXYZ+0xd4>
 8001584:	a201      	add	r2, pc, #4	; (adr r2, 800158c <LSM6DSL_AccReadXYZ+0x88>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	080015c1 	.word	0x080015c1
 8001590:	080015d9 	.word	0x080015d9
 8001594:	080015d9 	.word	0x080015d9
 8001598:	080015d9 	.word	0x080015d9
 800159c:	080015d3 	.word	0x080015d3
 80015a0:	080015d9 	.word	0x080015d9
 80015a4:	080015d9 	.word	0x080015d9
 80015a8:	080015d9 	.word	0x080015d9
 80015ac:	080015c7 	.word	0x080015c7
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080015d9 	.word	0x080015d9
 80015b8:	080015d9 	.word	0x080015d9
 80015bc:	080015cd 	.word	0x080015cd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <LSM6DSL_AccReadXYZ+0x120>)
 80015c2:	61bb      	str	r3, [r7, #24]
    break;
 80015c4:	e008      	b.n	80015d8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <LSM6DSL_AccReadXYZ+0x124>)
 80015c8:	61bb      	str	r3, [r7, #24]
    break;
 80015ca:	e005      	b.n	80015d8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <LSM6DSL_AccReadXYZ+0x128>)
 80015ce:	61bb      	str	r3, [r7, #24]
    break;
 80015d0:	e002      	b.n	80015d8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <LSM6DSL_AccReadXYZ+0x12c>)
 80015d4:	61bb      	str	r3, [r7, #24]
    break;    
 80015d6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
 80015dc:	e01a      	b.n	8001614 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80015de:	7ffb      	ldrb	r3, [r7, #31]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	3320      	adds	r3, #32
 80015e4:	443b      	add	r3, r7
 80015e6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fa:	7ffb      	ldrb	r3, [r7, #31]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001606:	ee17 2a90 	vmov	r2, s15
 800160a:	b212      	sxth	r2, r2
 800160c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800160e:	7ffb      	ldrb	r3, [r7, #31]
 8001610:	3301      	adds	r3, #1
 8001612:	77fb      	strb	r3, [r7, #31]
 8001614:	7ffb      	ldrb	r3, [r7, #31]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d9e1      	bls.n	80015de <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800161a:	bf00      	nop
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	3d79db23 	.word	0x3d79db23
 8001628:	3df9db23 	.word	0x3df9db23
 800162c:	3e79db23 	.word	0x3e79db23
 8001630:	3ef9db23 	.word	0x3ef9db23

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b0a2      	sub	sp, #136	; 0x88
 8001638:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163a:	f001 fba8 	bl	8002d8e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163e:	f000 f911 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001642:	f000 f9f7 	bl	8001a34 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001646:	f000 f95f 	bl	8001908 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800164a:	f000 f9c3 	bl	80019d4 <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 800164e:	f000 f99b 	bl	8001988 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
	BSP_QSPI_Init();
 8001652:	f000 fdaf 	bl	80021b4 <BSP_QSPI_Init>
	BSP_HSENSOR_Init();
 8001656:	f000 fd0d 	bl	8002074 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 800165a:	f000 fd7d 	bl	8002158 <BSP_PSENSOR_Init>
	BSP_MAGNETO_Init();
 800165e:	f000 fd37 	bl	80020d0 <BSP_MAGNETO_Init>
	BSP_ACCELERO_Init();
 8001662:	f000 fcb1 	bl	8001fc8 <BSP_ACCELERO_Init>





	Error_Handler();
 8001666:	f000 fb51 	bl	8001d0c <Error_Handler>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadSensorTask */
  osThreadDef(ReadSensorTask, StartReadSensorTask, osPriorityNormal, 0, 128);
 800166a:	4b6c      	ldr	r3, [pc, #432]	; (800181c <main+0x1e8>)
 800166c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadSensorTaskHandle = osThreadCreate(osThread(ReadSensorTask), NULL);
 800167e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f005 fecb 	bl	8007420 <osThreadCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a64      	ldr	r2, [pc, #400]	; (8001820 <main+0x1ec>)
 800168e:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTTransmitter */
  osThreadDef(UARTTransmitter, StartUARTTransmitter, osPriorityIdle, 0, 128);
 8001690:	4b64      	ldr	r3, [pc, #400]	; (8001824 <main+0x1f0>)
 8001692:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001696:	461d      	mov	r5, r3
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTTransmitterHandle = osThreadCreate(osThread(UARTTransmitter), NULL);
 80016a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 feb8 	bl	8007420 <osThreadCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a5d      	ldr	r2, [pc, #372]	; (8001828 <main+0x1f4>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Button_Sensor */
  osThreadDef(Button_Sensor, StartButton_Sensor, osPriorityIdle, 0, 128);
 80016b6:	4b5d      	ldr	r3, [pc, #372]	; (800182c <main+0x1f8>)
 80016b8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80016bc:	461d      	mov	r5, r3
 80016be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Button_SensorHandle = osThreadCreate(osThread(Button_Sensor), NULL);
 80016ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 fea5 	bl	8007420 <osThreadCreate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a55      	ldr	r2, [pc, #340]	; (8001830 <main+0x1fc>)
 80016da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016dc:	f005 fe99 	bl	8007412 <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		humidity = BSP_HSENSOR_ReadHumidity();
 80016e0:	f000 fce8 	bl	80020b4 <BSP_HSENSOR_ReadHumidity>
 80016e4:	eef0 7a40 	vmov.f32	s15, s0
 80016e8:	4b52      	ldr	r3, [pc, #328]	; (8001834 <main+0x200>)
 80016ea:	edc3 7a00 	vstr	s15, [r3]
		pressure = BSP_PSENSOR_ReadPressure();
 80016ee:	f000 fd53 	bl	8002198 <BSP_PSENSOR_ReadPressure>
 80016f2:	eef0 7a40 	vmov.f32	s15, s0
 80016f6:	4b50      	ldr	r3, [pc, #320]	; (8001838 <main+0x204>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
		BSP_MAGNETO_GetXYZ(magneto);
 80016fc:	484f      	ldr	r0, [pc, #316]	; (800183c <main+0x208>)
 80016fe:	f000 fd13 	bl	8002128 <BSP_MAGNETO_GetXYZ>
		BSP_ACCELERO_AccGetXYZ(accelero);
 8001702:	484f      	ldr	r0, [pc, #316]	; (8001840 <main+0x20c>)
 8001704:	f000 fc9e 	bl	8002044 <BSP_ACCELERO_AccGetXYZ>
		HAL_Delay(100);//100ms to sample at rate of 10Hz
 8001708:	2064      	movs	r0, #100	; 0x64
 800170a:	f001 fb79 	bl	8002e00 <HAL_Delay>





		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 800170e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001712:	484c      	ldr	r0, [pc, #304]	; (8001844 <main+0x210>)
 8001714:	f001 ff56 	bl	80035c4 <HAL_GPIO_ReadPin>
 8001718:	4603      	mov	r3, r0
 800171a:	2b01      	cmp	r3, #1
 800171c:	d106      	bne.n	800172c <main+0xf8>
			//if button released
			if (pressed) pressed = 0;
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <main+0x214>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <main+0xf8>
 8001726:	4b48      	ldr	r3, [pc, #288]	; (8001848 <main+0x214>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

		}
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) != GPIO_PIN_SET) {
 800172c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001730:	4844      	ldr	r0, [pc, #272]	; (8001844 <main+0x210>)
 8001732:	f001 ff47 	bl	80035c4 <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	2b01      	cmp	r3, #1
 800173a:	d0d1      	beq.n	80016e0 <main+0xac>
			//if button pressed

			if (!pressed) {
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <main+0x214>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1cd      	bne.n	80016e0 <main+0xac>
				pressed = 1;
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <main+0x214>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

				char buffer[40];

				if (sensorOutput%4==0){
 800174a:	4b40      	ldr	r3, [pc, #256]	; (800184c <main+0x218>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10b      	bne.n	800176e <main+0x13a>
					sprintf(buffer, "Humidity: %.2f ", humidity);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <main+0x200>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fef4 	bl	8000548 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	1d38      	adds	r0, r7, #4
 8001766:	493a      	ldr	r1, [pc, #232]	; (8001850 <main+0x21c>)
 8001768:	f007 fcee 	bl	8009148 <siprintf>
 800176c:	e044      	b.n	80017f8 <main+0x1c4>
				} else if (sensorOutput%4==1){
 800176e:	4b37      	ldr	r3, [pc, #220]	; (800184c <main+0x218>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	425a      	negs	r2, r3
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	f002 0203 	and.w	r2, r2, #3
 800177c:	bf58      	it	pl
 800177e:	4253      	negpl	r3, r2
 8001780:	2b01      	cmp	r3, #1
 8001782:	d10b      	bne.n	800179c <main+0x168>
					sprintf(buffer, "Pressure: %.2f ", pressure);
 8001784:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <main+0x204>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_f2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	1d38      	adds	r0, r7, #4
 8001794:	492f      	ldr	r1, [pc, #188]	; (8001854 <main+0x220>)
 8001796:	f007 fcd7 	bl	8009148 <siprintf>
 800179a:	e02d      	b.n	80017f8 <main+0x1c4>
				} else if (sensorOutput%4==2) {
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <main+0x218>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	425a      	negs	r2, r3
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	bf58      	it	pl
 80017ac:	4253      	negpl	r3, r2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d111      	bne.n	80017d6 <main+0x1a2>
					//	sprintf(buffer, "Magneto: %.2f\n", magneto);
					sprintf(buffer,"Magnetometer Values: %d, %d, %d ", magneto[0], magneto[1], magneto[2]);
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <main+0x208>)
 80017b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <main+0x208>)
 80017bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <main+0x208>)
 80017c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017c8:	1d38      	adds	r0, r7, #4
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	460b      	mov	r3, r1
 80017ce:	4922      	ldr	r1, [pc, #136]	; (8001858 <main+0x224>)
 80017d0:	f007 fcba 	bl	8009148 <siprintf>
 80017d4:	e010      	b.n	80017f8 <main+0x1c4>
				} else {//if (sensorOutput%4==3)
					//	sprintf(buffer, "accelero: %.2f\n", accelero);
					sprintf(buffer,"Accelerometer Values: %d, %d, %d ", accelero[0],accelero[1],accelero[2]);
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <main+0x20c>)
 80017d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <main+0x20c>)
 80017e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <main+0x20c>)
 80017e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ec:	1d38      	adds	r0, r7, #4
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	460b      	mov	r3, r1
 80017f2:	491a      	ldr	r1, [pc, #104]	; (800185c <main+0x228>)
 80017f4:	f007 fca8 	bl	8009148 <siprintf>
				}
				sensorOutput++;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <main+0x218>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <main+0x218>)
 8001800:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart1,(uint8_t*) buffer, strlen(buffer), 1000);
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fd33 	bl	8000270 <strlen>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	1d39      	adds	r1, r7, #4
 8001810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001814:	4812      	ldr	r0, [pc, #72]	; (8001860 <main+0x22c>)
 8001816:	f005 f88d 	bl	8006934 <HAL_UART_Transmit>
		humidity = BSP_HSENSOR_ReadHumidity();
 800181a:	e761      	b.n	80016e0 <main+0xac>
 800181c:	0800b5f0 	.word	0x0800b5f0
 8001820:	200005e8 	.word	0x200005e8
 8001824:	0800b61c 	.word	0x0800b61c
 8001828:	200005ec 	.word	0x200005ec
 800182c:	0800b648 	.word	0x0800b648
 8001830:	200005f0 	.word	0x200005f0
 8001834:	200005f4 	.word	0x200005f4
 8001838:	200005f8 	.word	0x200005f8
 800183c:	200005fc 	.word	0x200005fc
 8001840:	20000604 	.word	0x20000604
 8001844:	48000800 	.word	0x48000800
 8001848:	2000060c 	.word	0x2000060c
 800184c:	20000610 	.word	0x20000610
 8001850:	0800b578 	.word	0x0800b578
 8001854:	0800b588 	.word	0x0800b588
 8001858:	0800b598 	.word	0x0800b598
 800185c:	0800b5bc 	.word	0x0800b5bc
 8001860:	20000560 	.word	0x20000560

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b096      	sub	sp, #88	; 0x58
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2244      	movs	r2, #68	; 0x44
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f007 fd38 	bl	80092e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001886:	f44f 7000 	mov.w	r0, #512	; 0x200
 800188a:	f002 fd21 	bl	80042d0 <HAL_PWREx_ControlVoltageScaling>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001894:	f000 fa3a 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001898:	2310      	movs	r3, #16
 800189a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018a4:	2360      	movs	r3, #96	; 0x60
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a8:	2302      	movs	r3, #2
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018ac:	2301      	movs	r3, #1
 80018ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80018b4:	2328      	movs	r3, #40	; 0x28
 80018b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018b8:	2307      	movs	r3, #7
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018bc:	2302      	movs	r3, #2
 80018be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fa43 	bl	8004d54 <HAL_RCC_OscConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80018d4:	f000 fa1a 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	230f      	movs	r3, #15
 80018da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018dc:	2303      	movs	r3, #3
 80018de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018ec:	463b      	mov	r3, r7
 80018ee:	2104      	movs	r1, #4
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 fe0b 	bl	800550c <HAL_RCC_ClockConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80018fc:	f000 fa06 	bl	8001d0c <Error_Handler>
  }
}
 8001900:	bf00      	nop
 8001902:	3758      	adds	r7, #88	; 0x58
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_I2C2_Init+0x74>)
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <MX_I2C2_Init+0x78>)
 8001910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_I2C2_Init+0x74>)
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <MX_I2C2_Init+0x7c>)
 8001916:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_I2C2_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <MX_I2C2_Init+0x74>)
 8001920:	2201      	movs	r2, #1
 8001922:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_I2C2_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_I2C2_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_I2C2_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_I2C2_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_I2C2_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <MX_I2C2_Init+0x74>)
 8001944:	f001 fe6e 	bl	8003624 <HAL_I2C_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800194e:	f000 f9dd 	bl	8001d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <MX_I2C2_Init+0x74>)
 8001956:	f002 fc15 	bl	8004184 <HAL_I2CEx_ConfigAnalogFilter>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001960:	f000 f9d4 	bl	8001d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001964:	2100      	movs	r1, #0
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_I2C2_Init+0x74>)
 8001968:	f002 fc57 	bl	800421a <HAL_I2CEx_ConfigDigitalFilter>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001972:	f000 f9cb 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200004c8 	.word	0x200004c8
 8001980:	40005800 	.word	0x40005800
 8001984:	10909cec 	.word	0x10909cec

08001988 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_QUADSPI_Init+0x44>)
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <MX_QUADSPI_Init+0x48>)
 8001990:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_QUADSPI_Init+0x44>)
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_QUADSPI_Init+0x44>)
 800199a:	2201      	movs	r2, #1
 800199c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_QUADSPI_Init+0x44>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_QUADSPI_Init+0x44>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_QUADSPI_Init+0x44>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_QUADSPI_Init+0x44>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_QUADSPI_Init+0x44>)
 80019b8:	f002 fce0 	bl	800437c <HAL_QSPI_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80019c2:	f000 f9a3 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000051c 	.word	0x2000051c
 80019d0:	a0001000 	.word	0xa0001000

080019d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <MX_USART1_UART_Init+0x5c>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_USART1_UART_Init+0x58>)
 8001a18:	f004 ff3e 	bl	8006898 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a22:	f000 f973 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000560 	.word	0x20000560
 8001a30:	40013800 	.word	0x40013800

08001a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <MX_GPIO_Init+0xdc>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REDLED_GPIO_Port, REDLED_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2108      	movs	r1, #8
 8001a96:	481f      	ldr	r0, [pc, #124]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a98:	f001 fdac 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREENLED_GPIO_Port, GREENLED_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa2:	481d      	ldr	r0, [pc, #116]	; (8001b18 <MX_GPIO_Init+0xe4>)
 8001aa4:	f001 fda6 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : REDLED_Pin */
  GPIO_InitStruct.Pin = REDLED_Pin;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REDLED_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4815      	ldr	r0, [pc, #84]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001ac0:	f001 fae2 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4810      	ldr	r0, [pc, #64]	; (8001b1c <MX_GPIO_Init+0xe8>)
 8001adc:	f001 fad4 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREENLED_Pin */
  GPIO_InitStruct.Pin = GREENLED_Pin;
 8001ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREENLED_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_GPIO_Init+0xe4>)
 8001afa:	f001 fac5 	bl	8003088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(REDLED_GPIO_Port, REDLED_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2108      	movs	r1, #8
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001b04:	f001 fd76 	bl	80035f4 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48001000 	.word	0x48001000
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	48000800 	.word	0x48000800

08001b20 <StartReadSensorTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadSensorTask */
void StartReadSensorTask(void const * argument)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(100);//100ms to sample at rate of 10Hz
 8001b28:	2064      	movs	r0, #100	; 0x64
 8001b2a:	f005 fcc5 	bl	80074b8 <osDelay>



		humidity = BSP_HSENSOR_ReadHumidity();
 8001b2e:	f000 fac1 	bl	80020b4 <BSP_HSENSOR_ReadHumidity>
 8001b32:	eef0 7a40 	vmov.f32	s15, s0
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <StartReadSensorTask+0x38>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]
		pressure = BSP_PSENSOR_ReadPressure();
 8001b3c:	f000 fb2c 	bl	8002198 <BSP_PSENSOR_ReadPressure>
 8001b40:	eef0 7a40 	vmov.f32	s15, s0
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <StartReadSensorTask+0x3c>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]
		BSP_MAGNETO_GetXYZ(magneto);
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <StartReadSensorTask+0x40>)
 8001b4c:	f000 faec 	bl	8002128 <BSP_MAGNETO_GetXYZ>
		BSP_ACCELERO_AccGetXYZ(accelero);
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <StartReadSensorTask+0x44>)
 8001b52:	f000 fa77 	bl	8002044 <BSP_ACCELERO_AccGetXYZ>
		osDelay(100);//100ms to sample at rate of 10Hz
 8001b56:	e7e7      	b.n	8001b28 <StartReadSensorTask+0x8>
 8001b58:	200005f4 	.word	0x200005f4
 8001b5c:	200005f8 	.word	0x200005f8
 8001b60:	200005fc 	.word	0x200005fc
 8001b64:	20000604 	.word	0x20000604

08001b68 <StartUARTTransmitter>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTTransmitter */
void StartUARTTransmitter(void const * argument)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTransmitter */
	/* Infinite loop */
	for(;;)
	{
		osDelay(50);
 8001b70:	2032      	movs	r0, #50	; 0x32
 8001b72:	f005 fca1 	bl	80074b8 <osDelay>



		if (!transmitted) {
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <StartUARTTransmitter+0x34>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f8      	bne.n	8001b70 <StartUARTTransmitter+0x8>
			HAL_UART_Transmit(&huart1,(uint8_t*) buffer, strlen(buffer), 1000);
 8001b7e:	4808      	ldr	r0, [pc, #32]	; (8001ba0 <StartUARTTransmitter+0x38>)
 8001b80:	f7fe fb76 	bl	8000270 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <StartUARTTransmitter+0x38>)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <StartUARTTransmitter+0x3c>)
 8001b90:	f004 fed0 	bl	8006934 <HAL_UART_Transmit>
			transmitted = 1;
 8001b94:	4b01      	ldr	r3, [pc, #4]	; (8001b9c <StartUARTTransmitter+0x34>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
		osDelay(50);
 8001b9a:	e7e9      	b.n	8001b70 <StartUARTTransmitter+0x8>
 8001b9c:	2000063c 	.word	0x2000063c
 8001ba0:	20000614 	.word	0x20000614
 8001ba4:	20000560 	.word	0x20000560

08001ba8 <StartButton_Sensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButton_Sensor */
void StartButton_Sensor(void const * argument)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButton_Sensor */
	/* Infinite loop */
	for(;;)
	{
		osDelay(25);//check button pressed every 1/40 second
 8001bb0:	2019      	movs	r0, #25
 8001bb2:	f005 fc81 	bl	80074b8 <osDelay>



		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8001bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bba:	483e      	ldr	r0, [pc, #248]	; (8001cb4 <StartButton_Sensor+0x10c>)
 8001bbc:	f001 fd02 	bl	80035c4 <HAL_GPIO_ReadPin>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d106      	bne.n	8001bd4 <StartButton_Sensor+0x2c>
			//if button released
			if (pressed) pressed = 0;
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <StartButton_Sensor+0x110>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <StartButton_Sensor+0x2c>
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <StartButton_Sensor+0x110>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) != GPIO_PIN_SET) {
 8001bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd8:	4836      	ldr	r0, [pc, #216]	; (8001cb4 <StartButton_Sensor+0x10c>)
 8001bda:	f001 fcf3 	bl	80035c4 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d0e5      	beq.n	8001bb0 <StartButton_Sensor+0x8>
			//if button pressed
			if (!pressed) {
 8001be4:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <StartButton_Sensor+0x110>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e1      	bne.n	8001bb0 <StartButton_Sensor+0x8>
				pressed = 1;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <StartButton_Sensor+0x110>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
				if (sensorOutput%4==0){
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <StartButton_Sensor+0x114>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10b      	bne.n	8001c16 <StartButton_Sensor+0x6e>
					sprintf(buffer, "Humidity: %d ", (int) humidity);
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <StartButton_Sensor+0x118>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 2a90 	vmov	r2, s15
 8001c0c:	492d      	ldr	r1, [pc, #180]	; (8001cc4 <StartButton_Sensor+0x11c>)
 8001c0e:	482e      	ldr	r0, [pc, #184]	; (8001cc8 <StartButton_Sensor+0x120>)
 8001c10:	f007 fa9a 	bl	8009148 <siprintf>
 8001c14:	e044      	b.n	8001ca0 <StartButton_Sensor+0xf8>
				} else if (sensorOutput%4==1){
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <StartButton_Sensor+0x114>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	425a      	negs	r2, r3
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	f002 0203 	and.w	r2, r2, #3
 8001c24:	bf58      	it	pl
 8001c26:	4253      	negpl	r3, r2
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10b      	bne.n	8001c44 <StartButton_Sensor+0x9c>
					sprintf(buffer, "Pressure: %d ", (int) pressure);
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <StartButton_Sensor+0x124>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c36:	ee17 2a90 	vmov	r2, s15
 8001c3a:	4925      	ldr	r1, [pc, #148]	; (8001cd0 <StartButton_Sensor+0x128>)
 8001c3c:	4822      	ldr	r0, [pc, #136]	; (8001cc8 <StartButton_Sensor+0x120>)
 8001c3e:	f007 fa83 	bl	8009148 <siprintf>
 8001c42:	e02d      	b.n	8001ca0 <StartButton_Sensor+0xf8>
				} else if (sensorOutput%4==2) {
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <StartButton_Sensor+0x114>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	425a      	negs	r2, r3
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	bf58      	it	pl
 8001c54:	4253      	negpl	r3, r2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d111      	bne.n	8001c7e <StartButton_Sensor+0xd6>
					//	sprintf(buffer, "Magneto: %.2f\n", magneto);
					sprintf(buffer,"Magnetometer Values: %d, %d, %d ", magneto[0], magneto[1], magneto[2]);
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <StartButton_Sensor+0x12c>)
 8001c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <StartButton_Sensor+0x12c>)
 8001c64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <StartButton_Sensor+0x12c>)
 8001c6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	460b      	mov	r3, r1
 8001c74:	4918      	ldr	r1, [pc, #96]	; (8001cd8 <StartButton_Sensor+0x130>)
 8001c76:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <StartButton_Sensor+0x120>)
 8001c78:	f007 fa66 	bl	8009148 <siprintf>
 8001c7c:	e010      	b.n	8001ca0 <StartButton_Sensor+0xf8>
				} else {//if (sensorOutput%4==3)
					//	sprintf(buffer, "accelero: %.2f\n", accelero);
					sprintf(buffer,"Accelerometer Values: %d, %d, %d ", accelero[0],accelero[1],accelero[2]);
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <StartButton_Sensor+0x134>)
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <StartButton_Sensor+0x134>)
 8001c88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <StartButton_Sensor+0x134>)
 8001c90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	460b      	mov	r3, r1
 8001c98:	4911      	ldr	r1, [pc, #68]	; (8001ce0 <StartButton_Sensor+0x138>)
 8001c9a:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <StartButton_Sensor+0x120>)
 8001c9c:	f007 fa54 	bl	8009148 <siprintf>
				}
				sensorOutput++;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <StartButton_Sensor+0x114>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <StartButton_Sensor+0x114>)
 8001ca8:	6013      	str	r3, [r2, #0]
				transmitted = 0;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <StartButton_Sensor+0x13c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
		osDelay(25);//check button pressed every 1/40 second
 8001cb0:	e77e      	b.n	8001bb0 <StartButton_Sensor+0x8>
 8001cb2:	bf00      	nop
 8001cb4:	48000800 	.word	0x48000800
 8001cb8:	2000060c 	.word	0x2000060c
 8001cbc:	20000610 	.word	0x20000610
 8001cc0:	200005f4 	.word	0x200005f4
 8001cc4:	0800b664 	.word	0x0800b664
 8001cc8:	20000614 	.word	0x20000614
 8001ccc:	200005f8 	.word	0x200005f8
 8001cd0:	0800b674 	.word	0x0800b674
 8001cd4:	200005fc 	.word	0x200005fc
 8001cd8:	0800b598 	.word	0x0800b598
 8001cdc:	20000604 	.word	0x20000604
 8001ce0:	0800b5bc 	.word	0x0800b5bc
 8001ce4:	2000063c 	.word	0x2000063c

08001ce8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cfa:	f001 f861 	bl	8002dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40001000 	.word	0x40001000

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(REDLED_GPIO_Port, REDLED_Pin, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2108      	movs	r1, #8
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <Error_Handler+0x18>)
 8001d16:	f001 fc6d 	bl	80035f4 <HAL_GPIO_WritePin>
	__BKPT();
 8001d1a:	be00      	bkpt	0x0000
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
}
 8001d1e:	bf00      	nop
	//turns on a red LED, and then halts the debugger with a breakpoint instruction


	__disable_irq();
	while (1)
 8001d20:	e7fe      	b.n	8001d20 <Error_Handler+0x14>
 8001d22:	bf00      	nop
 8001d24:	48001000 	.word	0x48001000

08001d28 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001d48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d4c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001d4e:	2312      	movs	r3, #18
 8001d50:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	481b      	ldr	r0, [pc, #108]	; (8001dd4 <I2Cx_MspInit+0xac>)
 8001d66:	f001 f98f 	bl	8003088 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <I2Cx_MspInit+0xac>)
 8001d72:	f001 f989 	bl	8003088 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d98:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <I2Cx_MspInit+0xa8>)
 8001da0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001da4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	210f      	movs	r1, #15
 8001daa:	2021      	movs	r0, #33	; 0x21
 8001dac:	f001 f904 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001db0:	2021      	movs	r0, #33	; 0x21
 8001db2:	f001 f91d 	bl	8002ff0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	210f      	movs	r1, #15
 8001dba:	2022      	movs	r0, #34	; 0x22
 8001dbc:	f001 f8fc 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001dc0:	2022      	movs	r0, #34	; 0x22
 8001dc2:	f001 f915 	bl	8002ff0 <HAL_NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400

08001dd8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <I2Cx_Init+0x54>)
 8001de4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <I2Cx_Init+0x58>)
 8001dea:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff89 	bl	8001d28 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f001 fc04 	bl	8003624 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f002 f9b0 	bl	8004184 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40005800 	.word	0x40005800
 8001e30:	00702681 	.word	0x00702681

08001e34 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af04      	add	r7, sp, #16
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	72fb      	strb	r3, [r7, #11]
 8001e46:	460b      	mov	r3, r1
 8001e48:	813b      	strh	r3, [r7, #8]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	b299      	uxth	r1, r3
 8001e56:	88f8      	ldrh	r0, [r7, #6]
 8001e58:	893a      	ldrh	r2, [r7, #8]
 8001e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	4603      	mov	r3, r0
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f001 fdb8 	bl	80039e0 <HAL_I2C_Mem_Read>
 8001e70:	4603      	mov	r3, r0
 8001e72:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f832 	bl	8001ee8 <I2Cx_Error>
  }
  return status;
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b08a      	sub	sp, #40	; 0x28
 8001e92:	af04      	add	r7, sp, #16
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	4608      	mov	r0, r1
 8001e98:	4611      	mov	r1, r2
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	72fb      	strb	r3, [r7, #11]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	813b      	strh	r3, [r7, #8]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	b299      	uxth	r1, r3
 8001eb0:	88f8      	ldrh	r0, [r7, #6]
 8001eb2:	893a      	ldrh	r2, [r7, #8]
 8001eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb8:	9302      	str	r3, [sp, #8]
 8001eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f001 fc77 	bl	80037b8 <HAL_I2C_Mem_Write>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d004      	beq.n	8001ede <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f805 	bl	8001ee8 <I2Cx_Error>
  }
  return status;
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f001 fc30 	bl	800375a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ff6c 	bl	8001dd8 <I2Cx_Init>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <SENSOR_IO_Init+0x10>)
 8001f0e:	f7ff ff63 	bl	8001dd8 <I2Cx_Init>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000640 	.word	0x20000640

08001f1c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	460b      	mov	r3, r1
 8001f28:	71bb      	strb	r3, [r7, #6]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	79f9      	ldrb	r1, [r7, #7]
 8001f34:	2301      	movs	r3, #1
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	1d7b      	adds	r3, r7, #5
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <SENSOR_IO_Write+0x30>)
 8001f40:	f7ff ffa5 	bl	8001e8e <I2Cx_WriteMultiple>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000640 	.word	0x20000640

08001f50 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	4603      	mov	r3, r0
 8001f58:	460a      	mov	r2, r1
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	79f9      	ldrb	r1, [r7, #7]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	f107 030f 	add.w	r3, r7, #15
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2301      	movs	r3, #1
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <SENSOR_IO_Read+0x38>)
 8001f78:	f7ff ff5c 	bl	8001e34 <I2Cx_ReadMultiple>

  return read_value;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000640 	.word	0x20000640

08001f8c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	603a      	str	r2, [r7, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	71bb      	strb	r3, [r7, #6]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001fa2:	79bb      	ldrb	r3, [r7, #6]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	79f9      	ldrb	r1, [r7, #7]
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <SENSOR_IO_ReadMultiple+0x38>)
 8001fb4:	f7ff ff3e 	bl	8001e34 <I2Cx_ReadMultiple>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b29b      	uxth	r3, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000640 	.word	0x20000640

08001fc8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <BSP_ACCELERO_Init+0x74>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4798      	blx	r3
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b6a      	cmp	r3, #106	; 0x6a
 8001fe0:	d002      	beq.n	8001fe8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e024      	b.n	8002032 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <BSP_ACCELERO_Init+0x78>)
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <BSP_ACCELERO_Init+0x74>)
 8001fec:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001fee:	2330      	movs	r3, #48	; 0x30
 8001ff0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001ffa:	2340      	movs	r3, #64	; 0x40
 8001ffc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002006:	797a      	ldrb	r2, [r7, #5]
 8002008:	7abb      	ldrb	r3, [r7, #10]
 800200a:	4313      	orrs	r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002010:	7a3b      	ldrb	r3, [r7, #8]
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	b2db      	uxtb	r3, r3
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	b21a      	sxth	r2, r3
 800201c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	b21b      	sxth	r3, r3
 8002024:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <BSP_ACCELERO_Init+0x78>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	89ba      	ldrh	r2, [r7, #12]
 800202e:	4610      	mov	r0, r2
 8002030:	4798      	blx	r3
  }  

  return ret;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000004c 	.word	0x2000004c
 8002040:	20000694 	.word	0x20000694

08002044 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
    }
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000694 	.word	0x20000694

08002074 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <BSP_HSENSOR_Init+0x38>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	20be      	movs	r0, #190	; 0xbe
 8002080:	4798      	blx	r3
 8002082:	4603      	mov	r3, r0
 8002084:	2bbc      	cmp	r3, #188	; 0xbc
 8002086:	d002      	beq.n	800208e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	e009      	b.n	80020a2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <BSP_HSENSOR_Init+0x3c>)
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <BSP_HSENSOR_Init+0x38>)
 8002092:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <BSP_HSENSOR_Init+0x3c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	20be      	movs	r0, #190	; 0xbe
 800209c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80020a2:	687b      	ldr	r3, [r7, #4]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000698 	.word	0x20000698

080020b4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <BSP_HSENSOR_ReadHumidity+0x18>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	20be      	movs	r0, #190	; 0xbe
 80020c0:	4798      	blx	r3
 80020c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000698 	.word	0x20000698

080020d0 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <BSP_MAGNETO_Init+0x50>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4798      	blx	r3
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b3d      	cmp	r3, #61	; 0x3d
 80020e4:	d002      	beq.n	80020ec <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	e013      	b.n	8002114 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <BSP_MAGNETO_Init+0x54>)
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <BSP_MAGNETO_Init+0x50>)
 80020f0:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80020f2:	2358      	movs	r3, #88	; 0x58
 80020f4:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80020f6:	2300      	movs	r3, #0
 80020f8:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80020fe:	2308      	movs	r3, #8
 8002100:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002102:	2340      	movs	r3, #64	; 0x40
 8002104:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <BSP_MAGNETO_Init+0x54>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	463a      	mov	r2, r7
 800210e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002112:	4798      	blx	r3
  } 

  return ret;  
 8002114:	79fb      	ldrb	r3, [r7, #7]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000000c 	.word	0x2000000c
 8002124:	2000069c 	.word	0x2000069c

08002128 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <BSP_MAGNETO_GetXYZ+0x2c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
    }
  }
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000069c 	.word	0x2000069c

08002158 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <BSP_PSENSOR_Init+0x38>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	20ba      	movs	r0, #186	; 0xba
 8002164:	4798      	blx	r3
 8002166:	4603      	mov	r3, r0
 8002168:	2bb1      	cmp	r3, #177	; 0xb1
 800216a:	d002      	beq.n	8002172 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	e009      	b.n	8002186 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <BSP_PSENSOR_Init+0x3c>)
 8002174:	4a06      	ldr	r2, [pc, #24]	; (8002190 <BSP_PSENSOR_Init+0x38>)
 8002176:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <BSP_PSENSOR_Init+0x3c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	20ba      	movs	r0, #186	; 0xba
 8002180:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002186:	687b      	ldr	r3, [r7, #4]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000040 	.word	0x20000040
 8002194:	200006a0 	.word	0x200006a0

08002198 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <BSP_PSENSOR_ReadPressure+0x18>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	20ba      	movs	r0, #186	; 0xba
 80021a4:	4798      	blx	r3
 80021a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80021aa:	eeb0 0a67 	vmov.f32	s0, s15
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200006a0 	.word	0x200006a0

080021b4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80021ba:	4b32      	ldr	r3, [pc, #200]	; (8002284 <BSP_QSPI_Init+0xd0>)
 80021bc:	4a32      	ldr	r2, [pc, #200]	; (8002288 <BSP_QSPI_Init+0xd4>)
 80021be:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80021c0:	4830      	ldr	r0, [pc, #192]	; (8002284 <BSP_QSPI_Init+0xd0>)
 80021c2:	f002 f951 	bl	8004468 <HAL_QSPI_DeInit>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e054      	b.n	800227a <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80021d0:	f000 f85c 	bl	800228c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <BSP_QSPI_Init+0xd0>)
 80021d6:	2202      	movs	r2, #2
 80021d8:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <BSP_QSPI_Init+0xd0>)
 80021dc:	2204      	movs	r2, #4
 80021de:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <BSP_QSPI_Init+0xd0>)
 80021e2:	2210      	movs	r2, #16
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80021ea:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e003      	b.n	800220a <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 800220a:	3b01      	subs	r3, #1
 800220c:	461a      	mov	r2, r3
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <BSP_QSPI_Init+0xd0>)
 8002210:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <BSP_QSPI_Init+0xd0>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <BSP_QSPI_Init+0xd0>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800221e:	4819      	ldr	r0, [pc, #100]	; (8002284 <BSP_QSPI_Init+0xd0>)
 8002220:	f002 f8ac 	bl	800437c <HAL_QSPI_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e025      	b.n	800227a <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800222e:	4815      	ldr	r0, [pc, #84]	; (8002284 <BSP_QSPI_Init+0xd0>)
 8002230:	f000 f86c 	bl	800230c <QSPI_ResetMemory>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 800223a:	2304      	movs	r3, #4
 800223c:	e01d      	b.n	800227a <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800223e:	2101      	movs	r1, #1
 8002240:	4810      	ldr	r0, [pc, #64]	; (8002284 <BSP_QSPI_Init+0xd0>)
 8002242:	f000 f92d 	bl	80024a0 <QSPI_QuadMode>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e014      	b.n	800227a <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8002250:	2101      	movs	r1, #1
 8002252:	480c      	ldr	r0, [pc, #48]	; (8002284 <BSP_QSPI_Init+0xd0>)
 8002254:	f000 f9cc 	bl	80025f0 <QSPI_HighPerfMode>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e00b      	b.n	800227a <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <BSP_QSPI_Init+0xd0>)
 8002264:	2201      	movs	r2, #1
 8002266:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <BSP_QSPI_Init+0xd0>)
 800226a:	f002 f887 	bl	800437c <HAL_QSPI_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200006a4 	.word	0x200006a4
 8002288:	a0001000 	.word	0xa0001000

0800228c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 8002294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	6513      	str	r3, [r2, #80]	; 0x50
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 80022a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 80022bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <BSP_QSPI_MspInit+0x78>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80022da:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80022de:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022ec:	230a      	movs	r3, #10
 80022ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	4804      	ldr	r0, [pc, #16]	; (8002308 <BSP_QSPI_MspInit+0x7c>)
 80022f8:	f000 fec6 	bl	8003088 <HAL_GPIO_Init>
}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	48001000 	.word	0x48001000

0800230c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b090      	sub	sp, #64	; 0x40
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002318:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 800231a:	2366      	movs	r3, #102	; 0x66
 800231c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002322:	2300      	movs	r3, #0
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002332:	2300      	movs	r3, #0
 8002334:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002336:	2300      	movs	r3, #0
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4619      	mov	r1, r3
 8002344:	4812      	ldr	r0, [pc, #72]	; (8002390 <QSPI_ResetMemory+0x84>)
 8002346:	f002 f8b3 	bl	80044b0 <HAL_QSPI_Command>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e019      	b.n	8002388 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8002354:	2399      	movs	r3, #153	; 0x99
 8002356:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4619      	mov	r1, r3
 8002362:	480b      	ldr	r0, [pc, #44]	; (8002390 <QSPI_ResetMemory+0x84>)
 8002364:	f002 f8a4 	bl	80044b0 <HAL_QSPI_Command>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00a      	b.n	8002388 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002372:	f241 3188 	movw	r1, #5000	; 0x1388
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <QSPI_ResetMemory+0x84>)
 8002378:	f000 f858 	bl	800242c <QSPI_AutoPollingMemReady>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3740      	adds	r7, #64	; 0x40
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200006a4 	.word	0x200006a4

08002394 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b096      	sub	sp, #88	; 0x58
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800239c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80023a2:	2306      	movs	r3, #6
 80023a4:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80023ba:	2300      	movs	r3, #0
 80023bc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80023be:	2300      	movs	r3, #0
 80023c0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4619      	mov	r1, r3
 80023cc:	4816      	ldr	r0, [pc, #88]	; (8002428 <QSPI_WriteEnable+0x94>)
 80023ce:	f002 f86f 	bl	80044b0 <HAL_QSPI_Command>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e020      	b.n	800241e <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 80023dc:	2302      	movs	r3, #2
 80023de:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 80023e0:	2302      	movs	r3, #2
 80023e2:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80023ec:	2310      	movs	r3, #16
 80023ee:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80023f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023f4:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80023f6:	2305      	movs	r3, #5
 80023f8:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80023fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002400:	f107 0208 	add.w	r2, r7, #8
 8002404:	f107 0120 	add.w	r1, r7, #32
 8002408:	f241 3388 	movw	r3, #5000	; 0x1388
 800240c:	4806      	ldr	r0, [pc, #24]	; (8002428 <QSPI_WriteEnable+0x94>)
 800240e:	f002 f9e6 	bl	80047de <HAL_QSPI_AutoPolling>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3758      	adds	r7, #88	; 0x58
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200006a4 	.word	0x200006a4

0800242c <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b096      	sub	sp, #88	; 0x58
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800243c:	2305      	movs	r3, #5
 800243e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002440:	2300      	movs	r3, #0
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002456:	2300      	movs	r3, #0
 8002458:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800245a:	2300      	movs	r3, #0
 800245c:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8002462:	2301      	movs	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800246e:	2310      	movs	r3, #16
 8002470:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002472:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002476:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8002478:	f107 0208 	add.w	r2, r7, #8
 800247c:	f107 0120 	add.w	r1, r7, #32
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <QSPI_AutoPollingMemReady+0x70>)
 8002484:	f002 f9ab 	bl	80047de <HAL_QSPI_AutoPolling>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3758      	adds	r7, #88	; 0x58
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200006a4 	.word	0x200006a4

080024a0 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b092      	sub	sp, #72	; 0x48
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80024ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80024b2:	2305      	movs	r3, #5
 80024b4:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80024be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80024d0:	2300      	movs	r3, #0
 80024d2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80024d4:	2300      	movs	r3, #0
 80024d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4619      	mov	r1, r3
 80024e2:	4842      	ldr	r0, [pc, #264]	; (80025ec <QSPI_QuadMode+0x14c>)
 80024e4:	f001 ffe4 	bl	80044b0 <HAL_QSPI_Command>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e077      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024f2:	f107 030f 	add.w	r3, r7, #15
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4619      	mov	r1, r3
 80024fc:	483b      	ldr	r0, [pc, #236]	; (80025ec <QSPI_QuadMode+0x14c>)
 80024fe:	f002 f8cc 	bl	800469a <HAL_QSPI_Receive>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e06a      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800250c:	4837      	ldr	r0, [pc, #220]	; (80025ec <QSPI_QuadMode+0x14c>)
 800250e:	f7ff ff41 	bl	8002394 <QSPI_WriteEnable>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e062      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002528:	b2db      	uxtb	r3, r3
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	e004      	b.n	8002538 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002534:	b2db      	uxtb	r3, r3
 8002536:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8002538:	2301      	movs	r3, #1
 800253a:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4619      	mov	r1, r3
 8002546:	4829      	ldr	r0, [pc, #164]	; (80025ec <QSPI_QuadMode+0x14c>)
 8002548:	f001 ffb2 	bl	80044b0 <HAL_QSPI_Command>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e045      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002556:	f107 030f 	add.w	r3, r7, #15
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4619      	mov	r1, r3
 8002560:	4822      	ldr	r0, [pc, #136]	; (80025ec <QSPI_QuadMode+0x14c>)
 8002562:	f002 f803 	bl	800456c <HAL_QSPI_Transmit>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e038      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002570:	f241 3188 	movw	r1, #5000	; 0x1388
 8002574:	481d      	ldr	r0, [pc, #116]	; (80025ec <QSPI_QuadMode+0x14c>)
 8002576:	f7ff ff59 	bl	800242c <QSPI_AutoPollingMemReady>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e02e      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8002584:	2305      	movs	r3, #5
 8002586:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4619      	mov	r1, r3
 8002592:	4816      	ldr	r0, [pc, #88]	; (80025ec <QSPI_QuadMode+0x14c>)
 8002594:	f001 ff8c 	bl	80044b0 <HAL_QSPI_Command>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e01f      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025a2:	f107 030f 	add.w	r3, r7, #15
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4619      	mov	r1, r3
 80025ac:	480f      	ldr	r0, [pc, #60]	; (80025ec <QSPI_QuadMode+0x14c>)
 80025ae:	f002 f874 	bl	800469a <HAL_QSPI_Receive>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e012      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <QSPI_QuadMode+0x12c>
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d007      	beq.n	80025dc <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3748      	adds	r7, #72	; 0x48
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200006a4 	.word	0x200006a4

080025f0 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b092      	sub	sp, #72	; 0x48
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80025fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002602:	2305      	movs	r3, #5
 8002604:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800260a:	2300      	movs	r3, #0
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800260e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8002618:	2301      	movs	r3, #1
 800261a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002620:	2300      	movs	r3, #0
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002624:	2300      	movs	r3, #0
 8002626:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4619      	mov	r1, r3
 8002632:	4853      	ldr	r0, [pc, #332]	; (8002780 <QSPI_HighPerfMode+0x190>)
 8002634:	f001 ff3c 	bl	80044b0 <HAL_QSPI_Command>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e09a      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4619      	mov	r1, r3
 800264c:	484c      	ldr	r0, [pc, #304]	; (8002780 <QSPI_HighPerfMode+0x190>)
 800264e:	f002 f824 	bl	800469a <HAL_QSPI_Receive>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e08d      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800265c:	2315      	movs	r3, #21
 800265e:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8002660:	2302      	movs	r3, #2
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4619      	mov	r1, r3
 800266e:	4844      	ldr	r0, [pc, #272]	; (8002780 <QSPI_HighPerfMode+0x190>)
 8002670:	f001 ff1e 	bl	80044b0 <HAL_QSPI_Command>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07c      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	3301      	adds	r3, #1
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4619      	mov	r1, r3
 800268a:	483d      	ldr	r0, [pc, #244]	; (8002780 <QSPI_HighPerfMode+0x190>)
 800268c:	f002 f805 	bl	800469a <HAL_QSPI_Receive>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06e      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800269a:	4839      	ldr	r0, [pc, #228]	; (8002780 <QSPI_HighPerfMode+0x190>)
 800269c:	f7ff fe7a 	bl	8002394 <QSPI_WriteEnable>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e066      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80026b0:	7bbb      	ldrb	r3, [r7, #14]
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	73bb      	strb	r3, [r7, #14]
 80026ba:	e004      	b.n	80026c6 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
 80026be:	f023 0302 	bic.w	r3, r3, #2
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80026c6:	2301      	movs	r3, #1
 80026c8:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 80026ca:	2303      	movs	r3, #3
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4619      	mov	r1, r3
 80026d8:	4829      	ldr	r0, [pc, #164]	; (8002780 <QSPI_HighPerfMode+0x190>)
 80026da:	f001 fee9 	bl	80044b0 <HAL_QSPI_Command>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e047      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4619      	mov	r1, r3
 80026f2:	4823      	ldr	r0, [pc, #140]	; (8002780 <QSPI_HighPerfMode+0x190>)
 80026f4:	f001 ff3a 	bl	800456c <HAL_QSPI_Transmit>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e03a      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002702:	f241 3188 	movw	r1, #5000	; 0x1388
 8002706:	481e      	ldr	r0, [pc, #120]	; (8002780 <QSPI_HighPerfMode+0x190>)
 8002708:	f7ff fe90 	bl	800242c <QSPI_AutoPollingMemReady>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e030      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002716:	2315      	movs	r3, #21
 8002718:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 800271a:	2302      	movs	r3, #2
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4619      	mov	r1, r3
 8002728:	4815      	ldr	r0, [pc, #84]	; (8002780 <QSPI_HighPerfMode+0x190>)
 800272a:	f001 fec1 	bl	80044b0 <HAL_QSPI_Command>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e01f      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4619      	mov	r1, r3
 8002742:	480f      	ldr	r0, [pc, #60]	; (8002780 <QSPI_HighPerfMode+0x190>)
 8002744:	f001 ffa9 	bl	800469a <HAL_QSPI_Receive>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e012      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002752:	7b7b      	ldrb	r3, [r7, #13]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <QSPI_HighPerfMode+0x172>
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d007      	beq.n	8002772 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002762:	7b7b      	ldrb	r3, [r7, #13]
 8002764:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3748      	adds	r7, #72	; 0x48
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200006a4 	.word	0x200006a4

08002784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_MspInit+0x4c>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_MspInit+0x4c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6613      	str	r3, [r2, #96]	; 0x60
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_MspInit+0x4c>)
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_MspInit+0x4c>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_MspInit+0x4c>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6593      	str	r3, [r2, #88]	; 0x58
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_MspInit+0x4c>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	210f      	movs	r1, #15
 80027be:	f06f 0001 	mvn.w	r0, #1
 80027c2:	f000 fbf9 	bl	8002fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0ac      	sub	sp, #176	; 0xb0
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	2288      	movs	r2, #136	; 0x88
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f006 fd77 	bl	80092e8 <memset>
  if(hi2c->Instance==I2C2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a21      	ldr	r2, [pc, #132]	; (8002884 <HAL_I2C_MspInit+0xb0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d13b      	bne.n	800287c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002808:	2300      	movs	r3, #0
 800280a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4618      	mov	r0, r3
 8002812:	f003 f8d1 	bl	80059b8 <HAL_RCCEx_PeriphCLKConfig>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800281c:	f7ff fa76 	bl	8001d0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_I2C_MspInit+0xb4>)
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	4a18      	ldr	r2, [pc, #96]	; (8002888 <HAL_I2C_MspInit+0xb4>)
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_I2C_MspInit+0xb4>)
 800282e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002838:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800283c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002840:	2312      	movs	r3, #18
 8002842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002852:	2304      	movs	r3, #4
 8002854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800285c:	4619      	mov	r1, r3
 800285e:	480b      	ldr	r0, [pc, #44]	; (800288c <HAL_I2C_MspInit+0xb8>)
 8002860:	f000 fc12 	bl	8003088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_I2C_MspInit+0xb4>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <HAL_I2C_MspInit+0xb4>)
 800286a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800286e:	6593      	str	r3, [r2, #88]	; 0x58
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_I2C_MspInit+0xb4>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800287c:	bf00      	nop
 800287e:	37b0      	adds	r7, #176	; 0xb0
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40005800 	.word	0x40005800
 8002888:	40021000 	.word	0x40021000
 800288c:	48000400 	.word	0x48000400

08002890 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <HAL_I2C_MspDeInit+0x3c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10f      	bne.n	80028c2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_I2C_MspDeInit+0x40>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_I2C_MspDeInit+0x40>)
 80028a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80028ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028b2:	4808      	ldr	r0, [pc, #32]	; (80028d4 <HAL_I2C_MspDeInit+0x44>)
 80028b4:	f000 fd92 	bl	80033dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80028b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <HAL_I2C_MspDeInit+0x44>)
 80028be:	f000 fd8d 	bl	80033dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40005800 	.word	0x40005800
 80028d0:	40021000 	.word	0x40021000
 80028d4:	48000400 	.word	0x48000400

080028d8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a17      	ldr	r2, [pc, #92]	; (8002954 <HAL_QSPI_MspInit+0x7c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d128      	bne.n	800294c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_QSPI_MspInit+0x80>)
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_QSPI_MspInit+0x80>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6513      	str	r3, [r2, #80]	; 0x50
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_QSPI_MspInit+0x80>)
 8002908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_QSPI_MspInit+0x80>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_QSPI_MspInit+0x80>)
 8002918:	f043 0310 	orr.w	r3, r3, #16
 800291c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_QSPI_MspInit+0x80>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800292a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800292e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002938:	2303      	movs	r3, #3
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800293c:	230a      	movs	r3, #10
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4619      	mov	r1, r3
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <HAL_QSPI_MspInit+0x84>)
 8002948:	f000 fb9e 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800294c:	bf00      	nop
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	a0001000 	.word	0xa0001000
 8002958:	40021000 	.word	0x40021000
 800295c:	48001000 	.word	0x48001000

08002960 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a08      	ldr	r2, [pc, #32]	; (8002990 <HAL_QSPI_MspDeInit+0x30>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10a      	bne.n	8002988 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_QSPI_MspDeInit+0x34>)
 8002974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002976:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_QSPI_MspDeInit+0x34>)
 8002978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800297c:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800297e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <HAL_QSPI_MspDeInit+0x38>)
 8002984:	f000 fd2a 	bl	80033dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	a0001000 	.word	0xa0001000
 8002994:	40021000 	.word	0x40021000
 8002998:	48001000 	.word	0x48001000

0800299c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b0ac      	sub	sp, #176	; 0xb0
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2288      	movs	r2, #136	; 0x88
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f006 fc93 	bl	80092e8 <memset>
  if(huart->Instance==USART1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <HAL_UART_MspInit+0xb0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d13a      	bne.n	8002a42 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029cc:	2301      	movs	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029d0:	2300      	movs	r3, #0
 80029d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 ffed 	bl	80059b8 <HAL_RCCEx_PeriphCLKConfig>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029e4:	f7ff f992 	bl	8001d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_UART_MspInit+0xb4>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_UART_MspInit+0xb4>)
 80029ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f2:	6613      	str	r3, [r2, #96]	; 0x60
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_UART_MspInit+0xb4>)
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_UART_MspInit+0xb4>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_UART_MspInit+0xb4>)
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_UART_MspInit+0xb4>)
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a18:	23c0      	movs	r3, #192	; 0xc0
 8002a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a30:	2307      	movs	r3, #7
 8002a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4805      	ldr	r0, [pc, #20]	; (8002a54 <HAL_UART_MspInit+0xb8>)
 8002a3e:	f000 fb23 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a42:	bf00      	nop
 8002a44:	37b0      	adds	r7, #176	; 0xb0
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40021000 	.word	0x40021000
 8002a54:	48000400 	.word	0x48000400

08002a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08e      	sub	sp, #56	; 0x38
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_InitTick+0xe0>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	4a33      	ldr	r2, [pc, #204]	; (8002b38 <HAL_InitTick+0xe0>)
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	6593      	str	r3, [r2, #88]	; 0x58
 8002a72:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <HAL_InitTick+0xe0>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a7e:	f107 0210 	add.w	r2, r7, #16
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f002 ff03 	bl	8005894 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a98:	f002 fed0 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 8002a9c:	6378      	str	r0, [r7, #52]	; 0x34
 8002a9e:	e004      	b.n	8002aaa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002aa0:	f002 fecc 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <HAL_InitTick+0xe4>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0c9b      	lsrs	r3, r3, #18
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_InitTick+0xe8>)
 8002aba:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <HAL_InitTick+0xec>)
 8002abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_InitTick+0xe8>)
 8002ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_InitTick+0xe8>)
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <HAL_InitTick+0xe8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_InitTick+0xe8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_InitTick+0xe8>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ade:	4818      	ldr	r0, [pc, #96]	; (8002b40 <HAL_InitTick+0xe8>)
 8002ae0:	f003 fc26 	bl	8006330 <HAL_TIM_Base_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002aea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11b      	bne.n	8002b2a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002af2:	4813      	ldr	r0, [pc, #76]	; (8002b40 <HAL_InitTick+0xe8>)
 8002af4:	f003 fc7e 	bl	80063f4 <HAL_TIM_Base_Start_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d111      	bne.n	8002b2a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b06:	2036      	movs	r0, #54	; 0x36
 8002b08:	f000 fa72 	bl	8002ff0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	d808      	bhi.n	8002b24 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002b12:	2200      	movs	r2, #0
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	2036      	movs	r0, #54	; 0x36
 8002b18:	f000 fa4e 	bl	8002fb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_InitTick+0xf0>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e002      	b.n	8002b2a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3738      	adds	r7, #56	; 0x38
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	431bde83 	.word	0x431bde83
 8002b40:	200006e8 	.word	0x200006e8
 8002b44:	40001000 	.word	0x40001000
 8002b48:	20000084 	.word	0x20000084

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <NMI_Handler+0x4>

08002b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <HardFault_Handler+0x4>

08002b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <MemManage_Handler+0x4>

08002b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <TIM6_DAC_IRQHandler+0x10>)
 8002b7e:	f003 fca9 	bl	80064d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200006e8 	.word	0x200006e8

08002b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return 1;
 8002b90:	2301      	movs	r3, #1
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_kill>:

int _kill(int pid, int sig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ba6:	f006 fbab 	bl	8009300 <__errno>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2216      	movs	r2, #22
 8002bae:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_exit>:

void _exit (int status)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ffe7 	bl	8002b9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bce:	e7fe      	b.n	8002bce <_exit+0x12>

08002bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e00a      	b.n	8002bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002be2:	f3af 8000 	nop.w
 8002be6:	4601      	mov	r1, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	b2ca      	uxtb	r2, r1
 8002bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf0      	blt.n	8002be2 <_read+0x12>
  }

  return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e009      	b.n	8002c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf1      	blt.n	8002c1c <_write+0x12>
  }
  return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_close>:

int _close(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_isatty>:

int _isatty(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cdc:	f006 fb10 	bl	8009300 <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cea:	e009      	b.n	8002d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <_sbrk+0x64>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20018000 	.word	0x20018000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	20000734 	.word	0x20000734
 8002d14:	20001598 	.word	0x20001598

08002d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <SystemInit+0x20>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <SystemInit+0x20>)
 8002d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d40:	f7ff ffea 	bl	8002d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d44:	480c      	ldr	r0, [pc, #48]	; (8002d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d46:	490d      	ldr	r1, [pc, #52]	; (8002d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <LoopForever+0xe>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d5c:	4c0a      	ldr	r4, [pc, #40]	; (8002d88 <LoopForever+0x16>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6a:	f006 facf 	bl	800930c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d6e:	f7fe fc61 	bl	8001634 <main>

08002d72 <LoopForever>:

LoopForever:
    b LoopForever
 8002d72:	e7fe      	b.n	8002d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d7c:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002d80:	0800ba54 	.word	0x0800ba54
  ldr r2, =_sbss
 8002d84:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002d88:	20001594 	.word	0x20001594

08002d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d8c:	e7fe      	b.n	8002d8c <ADC1_2_IRQHandler>

08002d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f000 f902 	bl	8002fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d9e:	200f      	movs	r0, #15
 8002da0:	f7ff fe5a 	bl	8002a58 <HAL_InitTick>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	71fb      	strb	r3, [r7, #7]
 8002dae:	e001      	b.n	8002db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002db0:	f7ff fce8 	bl	8002784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002db4:	79fb      	ldrb	r3, [r7, #7]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_IncTick+0x20>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_IncTick+0x24>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_IncTick+0x24>)
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000088 	.word	0x20000088
 8002de4:	20000738 	.word	0x20000738

08002de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return uwTick;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_GetTick+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000738 	.word	0x20000738

08002e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e08:	f7ff ffee 	bl	8002de8 <HAL_GetTick>
 8002e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e18:	d005      	beq.n	8002e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_Delay+0x44>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e26:	bf00      	nop
 8002e28:	f7ff ffde 	bl	8002de8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d8f7      	bhi.n	8002e28 <HAL_Delay+0x28>
  {
  }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000088 	.word	0x20000088

08002e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e64:	4013      	ands	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7a:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <__NVIC_SetPriorityGrouping+0x44>)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	60d3      	str	r3, [r2, #12]
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	f003 0307 	and.w	r3, r3, #7
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	db0b      	blt.n	8002ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	f003 021f 	and.w	r2, r3, #31
 8002ec4:	4907      	ldr	r1, [pc, #28]	; (8002ee4 <__NVIC_EnableIRQ+0x38>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2001      	movs	r0, #1
 8002ece:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000e100 	.word	0xe000e100

08002ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	db0a      	blt.n	8002f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	490c      	ldr	r1, [pc, #48]	; (8002f34 <__NVIC_SetPriority+0x4c>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	0112      	lsls	r2, r2, #4
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f10:	e00a      	b.n	8002f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4908      	ldr	r1, [pc, #32]	; (8002f38 <__NVIC_SetPriority+0x50>)
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	3b04      	subs	r3, #4
 8002f20:	0112      	lsls	r2, r2, #4
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	440b      	add	r3, r1
 8002f26:	761a      	strb	r2, [r3, #24]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000e100 	.word	0xe000e100
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f1c3 0307 	rsb	r3, r3, #7
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	bf28      	it	cs
 8002f5a:	2304      	movcs	r3, #4
 8002f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d902      	bls.n	8002f6c <NVIC_EncodePriority+0x30>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3b03      	subs	r3, #3
 8002f6a:	e000      	b.n	8002f6e <NVIC_EncodePriority+0x32>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	401a      	ands	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	43d9      	mvns	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	4313      	orrs	r3, r2
         );
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3724      	adds	r7, #36	; 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff4c 	bl	8002e48 <__NVIC_SetPriorityGrouping>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fca:	f7ff ff61 	bl	8002e90 <__NVIC_GetPriorityGrouping>
 8002fce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	6978      	ldr	r0, [r7, #20]
 8002fd6:	f7ff ffb1 	bl	8002f3c <NVIC_EncodePriority>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff80 	bl	8002ee8 <__NVIC_SetPriority>
}
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff54 	bl	8002eac <__NVIC_EnableIRQ>
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d008      	beq.n	8003036 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2204      	movs	r2, #4
 8003028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e022      	b.n	800307c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 020e 	bic.w	r2, r2, #14
 8003044:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f003 021c 	and.w	r2, r3, #28
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2101      	movs	r1, #1
 8003064:	fa01 f202 	lsl.w	r2, r1, r2
 8003068:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e17f      	b.n	8003398 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8171 	beq.w	8003392 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d005      	beq.n	80030c8 <HAL_GPIO_Init+0x40>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	2201      	movs	r2, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0201 	and.w	r2, r3, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d118      	bne.n	8003168 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800313c:	2201      	movs	r2, #1
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	08db      	lsrs	r3, r3, #3
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d017      	beq.n	80031a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d123      	bne.n	80031f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	08da      	lsrs	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3208      	adds	r2, #8
 80031f2:	6939      	ldr	r1, [r7, #16]
 80031f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80ac 	beq.w	8003392 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <HAL_GPIO_Init+0x330>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	4a5e      	ldr	r2, [pc, #376]	; (80033b8 <HAL_GPIO_Init+0x330>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6613      	str	r3, [r2, #96]	; 0x60
 8003246:	4b5c      	ldr	r3, [pc, #368]	; (80033b8 <HAL_GPIO_Init+0x330>)
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003252:	4a5a      	ldr	r2, [pc, #360]	; (80033bc <HAL_GPIO_Init+0x334>)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800327c:	d025      	beq.n	80032ca <HAL_GPIO_Init+0x242>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4f      	ldr	r2, [pc, #316]	; (80033c0 <HAL_GPIO_Init+0x338>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01f      	beq.n	80032c6 <HAL_GPIO_Init+0x23e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4e      	ldr	r2, [pc, #312]	; (80033c4 <HAL_GPIO_Init+0x33c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d019      	beq.n	80032c2 <HAL_GPIO_Init+0x23a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4d      	ldr	r2, [pc, #308]	; (80033c8 <HAL_GPIO_Init+0x340>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <HAL_GPIO_Init+0x236>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4c      	ldr	r2, [pc, #304]	; (80033cc <HAL_GPIO_Init+0x344>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00d      	beq.n	80032ba <HAL_GPIO_Init+0x232>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <HAL_GPIO_Init+0x348>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <HAL_GPIO_Init+0x22e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4a      	ldr	r2, [pc, #296]	; (80033d4 <HAL_GPIO_Init+0x34c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_GPIO_Init+0x22a>
 80032ae:	2306      	movs	r3, #6
 80032b0:	e00c      	b.n	80032cc <HAL_GPIO_Init+0x244>
 80032b2:	2307      	movs	r3, #7
 80032b4:	e00a      	b.n	80032cc <HAL_GPIO_Init+0x244>
 80032b6:	2305      	movs	r3, #5
 80032b8:	e008      	b.n	80032cc <HAL_GPIO_Init+0x244>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e006      	b.n	80032cc <HAL_GPIO_Init+0x244>
 80032be:	2303      	movs	r3, #3
 80032c0:	e004      	b.n	80032cc <HAL_GPIO_Init+0x244>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e002      	b.n	80032cc <HAL_GPIO_Init+0x244>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_GPIO_Init+0x244>
 80032ca:	2300      	movs	r3, #0
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	f002 0203 	and.w	r2, r2, #3
 80032d2:	0092      	lsls	r2, r2, #2
 80032d4:	4093      	lsls	r3, r2
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032dc:	4937      	ldr	r1, [pc, #220]	; (80033bc <HAL_GPIO_Init+0x334>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	3302      	adds	r3, #2
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_GPIO_Init+0x350>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800330e:	4a32      	ldr	r2, [pc, #200]	; (80033d8 <HAL_GPIO_Init+0x350>)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003314:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <HAL_GPIO_Init+0x350>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	43db      	mvns	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003338:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_GPIO_Init+0x350>)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_GPIO_Init+0x350>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003362:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_GPIO_Init+0x350>)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_GPIO_Init+0x350>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800338c:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <HAL_GPIO_Init+0x350>)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3301      	adds	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f47f ae78 	bne.w	8003098 <HAL_GPIO_Init+0x10>
  }
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010000 	.word	0x40010000
 80033c0:	48000400 	.word	0x48000400
 80033c4:	48000800 	.word	0x48000800
 80033c8:	48000c00 	.word	0x48000c00
 80033cc:	48001000 	.word	0x48001000
 80033d0:	48001400 	.word	0x48001400
 80033d4:	48001800 	.word	0x48001800
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80033ea:	e0cd      	b.n	8003588 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80033ec:	2201      	movs	r2, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80c0 	beq.w	8003582 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003402:	4a68      	ldr	r2, [pc, #416]	; (80035a4 <HAL_GPIO_DeInit+0x1c8>)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800342a:	d025      	beq.n	8003478 <HAL_GPIO_DeInit+0x9c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a5e      	ldr	r2, [pc, #376]	; (80035a8 <HAL_GPIO_DeInit+0x1cc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d01f      	beq.n	8003474 <HAL_GPIO_DeInit+0x98>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a5d      	ldr	r2, [pc, #372]	; (80035ac <HAL_GPIO_DeInit+0x1d0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d019      	beq.n	8003470 <HAL_GPIO_DeInit+0x94>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a5c      	ldr	r2, [pc, #368]	; (80035b0 <HAL_GPIO_DeInit+0x1d4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_GPIO_DeInit+0x90>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a5b      	ldr	r2, [pc, #364]	; (80035b4 <HAL_GPIO_DeInit+0x1d8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00d      	beq.n	8003468 <HAL_GPIO_DeInit+0x8c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a5a      	ldr	r2, [pc, #360]	; (80035b8 <HAL_GPIO_DeInit+0x1dc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <HAL_GPIO_DeInit+0x88>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a59      	ldr	r2, [pc, #356]	; (80035bc <HAL_GPIO_DeInit+0x1e0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_GPIO_DeInit+0x84>
 800345c:	2306      	movs	r3, #6
 800345e:	e00c      	b.n	800347a <HAL_GPIO_DeInit+0x9e>
 8003460:	2307      	movs	r3, #7
 8003462:	e00a      	b.n	800347a <HAL_GPIO_DeInit+0x9e>
 8003464:	2305      	movs	r3, #5
 8003466:	e008      	b.n	800347a <HAL_GPIO_DeInit+0x9e>
 8003468:	2304      	movs	r3, #4
 800346a:	e006      	b.n	800347a <HAL_GPIO_DeInit+0x9e>
 800346c:	2303      	movs	r3, #3
 800346e:	e004      	b.n	800347a <HAL_GPIO_DeInit+0x9e>
 8003470:	2302      	movs	r3, #2
 8003472:	e002      	b.n	800347a <HAL_GPIO_DeInit+0x9e>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_GPIO_DeInit+0x9e>
 8003478:	2300      	movs	r3, #0
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	f002 0203 	and.w	r2, r2, #3
 8003480:	0092      	lsls	r2, r2, #2
 8003482:	4093      	lsls	r3, r2
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	429a      	cmp	r2, r3
 8003488:	d132      	bne.n	80034f0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800348a:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <HAL_GPIO_DeInit+0x1e4>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	494b      	ldr	r1, [pc, #300]	; (80035c0 <HAL_GPIO_DeInit+0x1e4>)
 8003494:	4013      	ands	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003498:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <HAL_GPIO_DeInit+0x1e4>)
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	4947      	ldr	r1, [pc, #284]	; (80035c0 <HAL_GPIO_DeInit+0x1e4>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <HAL_GPIO_DeInit+0x1e4>)
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	4944      	ldr	r1, [pc, #272]	; (80035c0 <HAL_GPIO_DeInit+0x1e4>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80034b4:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <HAL_GPIO_DeInit+0x1e4>)
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	4940      	ldr	r1, [pc, #256]	; (80035c0 <HAL_GPIO_DeInit+0x1e4>)
 80034be:	4013      	ands	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	220f      	movs	r2, #15
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80034d2:	4a34      	ldr	r2, [pc, #208]	; (80035a4 <HAL_GPIO_DeInit+0x1c8>)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	4830      	ldr	r0, [pc, #192]	; (80035a4 <HAL_GPIO_DeInit+0x1c8>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	400a      	ands	r2, r1
 80034ea:	3302      	adds	r3, #2
 80034ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2103      	movs	r1, #3
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	08d2      	lsrs	r2, r2, #3
 8003524:	4019      	ands	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3208      	adds	r2, #8
 800352a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2103      	movs	r1, #3
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	401a      	ands	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	2101      	movs	r1, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	401a      	ands	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2103      	movs	r1, #3
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	401a      	ands	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003572:	2101      	movs	r1, #1
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	401a      	ands	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3301      	adds	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	f47f af2b 	bne.w	80033ec <HAL_GPIO_DeInit+0x10>
  }
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40010000 	.word	0x40010000
 80035a8:	48000400 	.word	0x48000400
 80035ac:	48000800 	.word	0x48000800
 80035b0:	48000c00 	.word	0x48000c00
 80035b4:	48001000 	.word	0x48001000
 80035b8:	48001400 	.word	0x48001400
 80035bc:	48001800 	.word	0x48001800
 80035c0:	40010400 	.word	0x40010400

080035c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e001      	b.n	80035e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003610:	e002      	b.n	8003618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e08d      	b.n	8003752 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff f8c2 	bl	80027d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003674:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003684:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	e006      	b.n	80036ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d108      	bne.n	80036c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	e007      	b.n	80036d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e021      	b.n	80037b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff f883 	bl	8002890 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	4608      	mov	r0, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	461a      	mov	r2, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	817b      	strh	r3, [r7, #10]
 80037ca:	460b      	mov	r3, r1
 80037cc:	813b      	strh	r3, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b20      	cmp	r3, #32
 80037dc:	f040 80f9 	bne.w	80039d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_I2C_Mem_Write+0x34>
 80037e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d105      	bne.n	80037f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0ed      	b.n	80039d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Mem_Write+0x4e>
 8003802:	2302      	movs	r3, #2
 8003804:	e0e6      	b.n	80039d4 <HAL_I2C_Mem_Write+0x21c>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800380e:	f7ff faeb 	bl	8002de8 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2319      	movs	r3, #25
 800381a:	2201      	movs	r2, #1
 800381c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fac3 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0d1      	b.n	80039d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2221      	movs	r2, #33	; 0x21
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2240      	movs	r2, #64	; 0x40
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a3a      	ldr	r2, [r7, #32]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003858:	88f8      	ldrh	r0, [r7, #6]
 800385a:	893a      	ldrh	r2, [r7, #8]
 800385c:	8979      	ldrh	r1, [r7, #10]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	4603      	mov	r3, r0
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f9d3 	bl	8003c14 <I2C_RequestMemoryWrite>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0a9      	b.n	80039d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2bff      	cmp	r3, #255	; 0xff
 8003888:	d90e      	bls.n	80038a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	b2da      	uxtb	r2, r3
 8003896:	8979      	ldrh	r1, [r7, #10]
 8003898:	2300      	movs	r3, #0
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fc3d 	bl	8004120 <I2C_TransferConfig>
 80038a6:	e00f      	b.n	80038c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	8979      	ldrh	r1, [r7, #10]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fc2c 	bl	8004120 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fabc 	bl	8003e4a <I2C_WaitOnTXISFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e07b      	b.n	80039d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d034      	beq.n	8003980 <HAL_I2C_Mem_Write+0x1c8>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d130      	bne.n	8003980 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	2200      	movs	r2, #0
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fa3f 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e04d      	b.n	80039d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	d90e      	bls.n	8003960 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fbe1 	bl	8004120 <I2C_TransferConfig>
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	8979      	ldrh	r1, [r7, #10]
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fbd0 	bl	8004120 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d19e      	bne.n	80038c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 faa2 	bl	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e01a      	b.n	80039d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2220      	movs	r2, #32
 80039a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_I2C_Mem_Write+0x224>)
 80039b2:	400b      	ands	r3, r1
 80039b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	fe00e800 	.word	0xfe00e800

080039e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	460b      	mov	r3, r1
 80039f4:	813b      	strh	r3, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	f040 80fd 	bne.w	8003c02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x34>
 8003a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0f1      	b.n	8003c04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x4e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0ea      	b.n	8003c04 <HAL_I2C_Mem_Read+0x224>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a36:	f7ff f9d7 	bl	8002de8 <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2319      	movs	r3, #25
 8003a42:	2201      	movs	r2, #1
 8003a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f9af 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0d5      	b.n	8003c04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2222      	movs	r2, #34	; 0x22
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a80:	88f8      	ldrh	r0, [r7, #6]
 8003a82:	893a      	ldrh	r2, [r7, #8]
 8003a84:	8979      	ldrh	r1, [r7, #10]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4603      	mov	r3, r0
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f913 	bl	8003cbc <I2C_RequestMemoryRead>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0ad      	b.n	8003c04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2bff      	cmp	r3, #255	; 0xff
 8003ab0:	d90e      	bls.n	8003ad0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	22ff      	movs	r2, #255	; 0xff
 8003ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	8979      	ldrh	r1, [r7, #10]
 8003ac0:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <HAL_I2C_Mem_Read+0x22c>)
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb29 	bl	8004120 <I2C_TransferConfig>
 8003ace:	e00f      	b.n	8003af0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	8979      	ldrh	r1, [r7, #10]
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_I2C_Mem_Read+0x22c>)
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fb18 	bl	8004120 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	2200      	movs	r2, #0
 8003af8:	2104      	movs	r1, #4
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f956 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07c      	b.n	8003c04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d034      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x1d0>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d130      	bne.n	8003bb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	2200      	movs	r2, #0
 8003b56:	2180      	movs	r1, #128	; 0x80
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f927 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e04d      	b.n	8003c04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2bff      	cmp	r3, #255	; 0xff
 8003b70:	d90e      	bls.n	8003b90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	22ff      	movs	r2, #255	; 0xff
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	8979      	ldrh	r1, [r7, #10]
 8003b80:	2300      	movs	r3, #0
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fac9 	bl	8004120 <I2C_TransferConfig>
 8003b8e:	e00f      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fab8 	bl	8004120 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d19a      	bne.n	8003af0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f98a 	bl	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e01a      	b.n	8003c04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_I2C_Mem_Read+0x230>)
 8003be2:	400b      	ands	r3, r1
 8003be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	80002400 	.word	0x80002400
 8003c10:	fe00e800 	.word	0xfe00e800

08003c14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	460b      	mov	r3, r1
 8003c28:	813b      	strh	r3, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	8979      	ldrh	r1, [r7, #10]
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <I2C_RequestMemoryWrite+0xa4>)
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fa6f 	bl	8004120 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f8ff 	bl	8003e4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e02c      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5c:	893b      	ldrh	r3, [r7, #8]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
 8003c66:	e015      	b.n	8003c94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c68:	893b      	ldrh	r3, [r7, #8]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f8e5 	bl	8003e4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e012      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f884 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	80002000 	.word	0x80002000

08003cbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	817b      	strh	r3, [r7, #10]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	813b      	strh	r3, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	8979      	ldrh	r1, [r7, #10]
 8003cdc:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <I2C_RequestMemoryRead+0xa4>)
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fa1c 	bl	8004120 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f8ac 	bl	8003e4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e02c      	b.n	8003d56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d0c:	e015      	b.n	8003d3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d0e:	893b      	ldrh	r3, [r7, #8]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	69b9      	ldr	r1, [r7, #24]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f892 	bl	8003e4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e012      	b.n	8003d56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d30:	893b      	ldrh	r3, [r7, #8]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2140      	movs	r1, #64	; 0x40
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f831 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	80002000 	.word	0x80002000

08003d64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d103      	bne.n	8003d82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d007      	beq.n	8003da0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	619a      	str	r2, [r3, #24]
  }
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dbc:	e031      	b.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc4:	d02d      	beq.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7ff f80f 	bl	8002de8 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d122      	bne.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d113      	bne.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e00f      	b.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d0be      	beq.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e56:	e033      	b.n	8003ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f87f 	bl	8003f60 <I2C_IsErrorOccurred>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e031      	b.n	8003ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e72:	d025      	beq.n	8003ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e74:	f7fe ffb8 	bl	8002de8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11a      	bne.n	8003ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d013      	beq.n	8003ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e007      	b.n	8003ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d1c4      	bne.n	8003e58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ee4:	e02f      	b.n	8003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f838 	bl	8003f60 <I2C_IsErrorOccurred>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e02d      	b.n	8003f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fe ff75 	bl	8002de8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d11a      	bne.n	8003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d013      	beq.n	8003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e007      	b.n	8003f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d1c8      	bne.n	8003ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d068      	beq.n	800405e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f94:	e049      	b.n	800402a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9c:	d045      	beq.n	800402a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fe ff23 	bl	8002de8 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_IsErrorOccurred+0x54>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d13a      	bne.n	800402a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd6:	d121      	bne.n	800401c <I2C_IsErrorOccurred+0xbc>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fde:	d01d      	beq.n	800401c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d01a      	beq.n	800401c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ff6:	f7fe fef7 	bl	8002de8 <HAL_GetTick>
 8003ffa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ffc:	e00e      	b.n	800401c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ffe:	f7fe fef3 	bl	8002de8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b19      	cmp	r3, #25
 800400a:	d907      	bls.n	800401c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800401a:	e006      	b.n	800402a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b20      	cmp	r3, #32
 8004028:	d1e9      	bne.n	8003ffe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b20      	cmp	r3, #32
 8004036:	d003      	beq.n	8004040 <I2C_IsErrorOccurred+0xe0>
 8004038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0aa      	beq.n	8003f96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2220      	movs	r2, #32
 800404e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f043 0304 	orr.w	r3, r3, #4
 8004056:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00b      	beq.n	8004088 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004080:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f043 0302 	orr.w	r3, r3, #2
 80040ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80040cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01c      	beq.n	800410e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff fe45 	bl	8003d64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <I2C_IsErrorOccurred+0x1bc>)
 80040e6:	400b      	ands	r3, r1
 80040e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800410e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004112:	4618      	mov	r0, r3
 8004114:	3728      	adds	r7, #40	; 0x28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	fe00e800 	.word	0xfe00e800

08004120 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	817b      	strh	r3, [r7, #10]
 800412e:	4613      	mov	r3, r2
 8004130:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004132:	897b      	ldrh	r3, [r7, #10]
 8004134:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004138:	7a7b      	ldrb	r3, [r7, #9]
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004140:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	4313      	orrs	r3, r2
 800414a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800414e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	0d5b      	lsrs	r3, r3, #21
 800415a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <I2C_TransferConfig+0x60>)
 8004160:	430b      	orrs	r3, r1
 8004162:	43db      	mvns	r3, r3
 8004164:	ea02 0103 	and.w	r1, r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	03ff63ff 	.word	0x03ff63ff

08004184 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b20      	cmp	r3, #32
 8004198:	d138      	bne.n	800420c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e032      	b.n	800420e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2224      	movs	r2, #36	; 0x24
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b20      	cmp	r3, #32
 800422e:	d139      	bne.n	80042a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800423a:	2302      	movs	r3, #2
 800423c:	e033      	b.n	80042a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2224      	movs	r2, #36	; 0x24
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800426c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <HAL_PWREx_GetVoltageRange+0x18>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40007000 	.word	0x40007000

080042d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042de:	d130      	bne.n	8004342 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ec:	d038      	beq.n	8004360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042f6:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042fe:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2232      	movs	r2, #50	; 0x32
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	0c9b      	lsrs	r3, r3, #18
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004314:	e002      	b.n	800431c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004328:	d102      	bne.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x60>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f2      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d110      	bne.n	8004360 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e00f      	b.n	8004362 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434e:	d007      	beq.n	8004360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004358:	4a05      	ldr	r2, [pc, #20]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800435e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40007000 	.word	0x40007000
 8004374:	20000080 	.word	0x20000080
 8004378:	431bde83 	.word	0x431bde83

0800437c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7fe fd30 	bl	8002de8 <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e063      	b.n	800445c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fe fa95 	bl	80028d8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80043ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fb03 	bl	80049be <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	021a      	lsls	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	2120      	movs	r1, #32
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fafb 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80043e8:	7afb      	ldrb	r3, [r7, #11]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d131      	bne.n	8004452 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6852      	ldr	r2, [r2, #4]
 8004400:	0611      	lsls	r1, r2, #24
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	430b      	orrs	r3, r1
 800440e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <HAL_QSPI_Init+0xe8>)
 8004418:	4013      	ands	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6912      	ldr	r2, [r2, #16]
 800441e:	0411      	lsls	r1, r2, #16
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6952      	ldr	r2, [r2, #20]
 8004424:	4311      	orrs	r1, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6992      	ldr	r2, [r2, #24]
 800442a:	4311      	orrs	r1, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	430b      	orrs	r3, r1
 8004432:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800445a:	7afb      	ldrb	r3, [r7, #11]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	ffe0f8fe 	.word	0xffe0f8fe

08004468 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e016      	b.n	80044a8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fe fa68 	bl	8002960 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80044bc:	f7fe fc94 	bl	8002de8 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_QSPI_Command+0x22>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e048      	b.n	8004564 <HAL_QSPI_Command+0xb4>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d137      	bne.n	8004556 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2200      	movs	r2, #0
 80044fc:	2120      	movs	r1, #32
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fa6b 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d125      	bne.n	800455a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800450e:	2200      	movs	r2, #0
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fa98 	bl	8004a48 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	2b00      	cmp	r3, #0
 800451e:	d115      	bne.n	800454c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2201      	movs	r2, #1
 8004528:	2102      	movs	r1, #2
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fa55 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2202      	movs	r2, #2
 8004540:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800454a:	e006      	b.n	800455a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004554:	e001      	b.n	800455a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004556:	2302      	movs	r3, #2
 8004558:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004562:	7dfb      	ldrb	r3, [r7, #23]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800457c:	f7fe fc34 	bl	8002de8 <HAL_GetTick>
 8004580:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3320      	adds	r3, #32
 8004588:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_QSPI_Transmit+0x2e>
 8004596:	2302      	movs	r3, #2
 8004598:	e07b      	b.n	8004692 <HAL_QSPI_Transmit+0x126>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d16a      	bne.n	8004684 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d05b      	beq.n	8004672 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2212      	movs	r2, #18
 80045be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80045ee:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80045f0:	e01b      	b.n	800462a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2201      	movs	r2, #1
 80045fa:	2104      	movs	r1, #4
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f9ec 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004606:	7ffb      	ldrb	r3, [r7, #31]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d113      	bne.n	8004634 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1df      	bne.n	80045f2 <HAL_QSPI_Transmit+0x86>
 8004632:	e000      	b.n	8004636 <HAL_QSPI_Transmit+0xca>
          break;
 8004634:	bf00      	nop
      }

      if (status == HAL_OK)
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d115      	bne.n	8004668 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2201      	movs	r2, #1
 8004644:	2102      	movs	r1, #2
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f9c7 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004650:	7ffb      	ldrb	r3, [r7, #31]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d108      	bne.n	8004668 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2202      	movs	r2, #2
 800465c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f934 	bl	80048cc <HAL_QSPI_Abort>
 8004664:	4603      	mov	r3, r0
 8004666:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004670:	e00a      	b.n	8004688 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	f043 0208 	orr.w	r2, r3, #8
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e001      	b.n	8004688 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004684:	2302      	movs	r3, #2
 8004686:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004690:	7ffb      	ldrb	r3, [r7, #31]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b08a      	sub	sp, #40	; 0x28
 800469e:	af02      	add	r7, sp, #8
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80046aa:	f7fe fb9d 	bl	8002de8 <HAL_GetTick>
 80046ae:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3320      	adds	r3, #32
 80046be:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_QSPI_Receive+0x36>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e082      	b.n	80047d6 <HAL_QSPI_Receive+0x13c>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d171      	bne.n	80047c8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d062      	beq.n	80047b6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2222      	movs	r2, #34	; 0x22
 80046f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004728:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004732:	e01c      	b.n	800476e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2201      	movs	r2, #1
 800473c:	2106      	movs	r1, #6
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f94b 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d114      	bne.n	8004778 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	7812      	ldrb	r2, [r2, #0]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	1e5a      	subs	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1de      	bne.n	8004734 <HAL_QSPI_Receive+0x9a>
 8004776:	e000      	b.n	800477a <HAL_QSPI_Receive+0xe0>
          break;
 8004778:	bf00      	nop
      }

      if (status == HAL_OK)
 800477a:	7ffb      	ldrb	r3, [r7, #31]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d115      	bne.n	80047ac <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2201      	movs	r2, #1
 8004788:	2102      	movs	r1, #2
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f925 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004794:	7ffb      	ldrb	r3, [r7, #31]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2202      	movs	r2, #2
 80047a0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f892 	bl	80048cc <HAL_QSPI_Abort>
 80047a8:	4603      	mov	r3, r0
 80047aa:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80047b4:	e00a      	b.n	80047cc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	f043 0208 	orr.w	r2, r3, #8
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e001      	b.n	80047cc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
 80047ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80047d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b088      	sub	sp, #32
 80047e2:	af02      	add	r7, sp, #8
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80047ec:	f7fe fafc 	bl	8002de8 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_QSPI_AutoPolling+0x24>
 80047fe:	2302      	movs	r3, #2
 8004800:	e060      	b.n	80048c4 <HAL_QSPI_AutoPolling+0xe6>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d14f      	bne.n	80048b6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2242      	movs	r2, #66	; 0x42
 8004820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2200      	movs	r2, #0
 800482c:	2120      	movs	r1, #32
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f8d3 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d13d      	bne.n	80048ba <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6892      	ldr	r2, [r2, #8]
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	431a      	orrs	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004874:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800487e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f8df 	bl	8004a48 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2201      	movs	r2, #1
 8004892:	2108      	movs	r1, #8
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f8a0 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800489e:	7dfb      	ldrb	r3, [r7, #23]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2208      	movs	r2, #8
 80048aa:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80048b4:	e001      	b.n	80048ba <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
 80048b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80048d8:	f7fe fa86 	bl	8002de8 <HAL_GetTick>
 80048dc:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d062      	beq.n	80049b4 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d017      	beq.n	8004934 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0204 	bic.w	r2, r2, #4
 8004912:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe fb77 	bl	800300c <HAL_DMA_Abort>
 800491e:	4603      	mov	r3, r0
 8004920:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	f043 0204 	orr.w	r2, r3, #4
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d034      	beq.n	80049ac <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0202 	orr.w	r2, r2, #2
 8004950:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2201      	movs	r2, #1
 800495c:	2102      	movs	r1, #2
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f83b 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10e      	bne.n	800498c <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2202      	movs	r2, #2
 8004974:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	2120      	movs	r1, #32
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f829 	bl	80049da <QSPI_WaitFlagStateUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d110      	bne.n	80049b4 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80049a0:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80049aa:	e003      	b.n	80049b4 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049ea:	e01a      	b.n	8004a22 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f2:	d016      	beq.n	8004a22 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f4:	f7fe f9f8 	bl	8002de8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d302      	bcc.n	8004a0a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	f043 0201 	orr.w	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e00e      	b.n	8004a40 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d1d6      	bne.n	80049ec <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <QSPI_Config+0x28>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a62:	d005      	beq.n	8004a70 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80b9 	beq.w	8004bec <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d05f      	beq.n	8004b42 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	6892      	ldr	r2, [r2, #8]
 8004a8a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d031      	beq.n	8004af8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	049b      	lsls	r3, r3, #18
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	ea42 0103 	orr.w	r1, r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ae8:	f000 812e 	beq.w	8004d48 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	6852      	ldr	r2, [r2, #4]
 8004af4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004af6:	e127      	b.n	8004d48 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	049b      	lsls	r3, r3, #18
 8004b14:	431a      	orrs	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	ea42 0103 	orr.w	r1, r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	615a      	str	r2, [r3, #20]
}
 8004b40:	e102      	b.n	8004d48 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d02e      	beq.n	8004ba8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	431a      	orrs	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	049b      	lsls	r3, r3, #18
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	ea42 0103 	orr.w	r1, r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b98:	f000 80d6 	beq.w	8004d48 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	6852      	ldr	r2, [r2, #4]
 8004ba4:	619a      	str	r2, [r3, #24]
}
 8004ba6:	e0cf      	b.n	8004d48 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	049b      	lsls	r3, r3, #18
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	ea42 0103 	orr.w	r1, r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	615a      	str	r2, [r3, #20]
}
 8004bea:	e0ad      	b.n	8004d48 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d058      	beq.n	8004ca6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02d      	beq.n	8004c62 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	049b      	lsls	r3, r3, #18
 8004c22:	431a      	orrs	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	ea42 0103 	orr.w	r1, r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c54:	d078      	beq.n	8004d48 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	6852      	ldr	r2, [r2, #4]
 8004c5e:	619a      	str	r2, [r3, #24]
}
 8004c60:	e072      	b.n	8004d48 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	431a      	orrs	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	049b      	lsls	r3, r3, #18
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	ea42 0103 	orr.w	r1, r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	615a      	str	r2, [r3, #20]
}
 8004ca4:	e050      	b.n	8004d48 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d02a      	beq.n	8004d04 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	049b      	lsls	r3, r3, #18
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	ea42 0103 	orr.w	r1, r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004cf6:	d027      	beq.n	8004d48 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	6852      	ldr	r2, [r2, #4]
 8004d00:	619a      	str	r2, [r3, #24]
}
 8004d02:	e021      	b.n	8004d48 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01d      	beq.n	8004d48 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	431a      	orrs	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	049b      	lsls	r3, r3, #18
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	ea42 0103 	orr.w	r1, r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	615a      	str	r2, [r3, #20]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e3ca      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d66:	4b97      	ldr	r3, [pc, #604]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d70:	4b94      	ldr	r3, [pc, #592]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80e4 	beq.w	8004f50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_RCC_OscConfig+0x4a>
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	f040 808b 	bne.w	8004eac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f040 8087 	bne.w	8004eac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d9e:	4b89      	ldr	r3, [pc, #548]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_RCC_OscConfig+0x62>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e3a2      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	4b82      	ldr	r3, [pc, #520]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x7c>
 8004dc6:	4b7f      	ldr	r3, [pc, #508]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dce:	e005      	b.n	8004ddc <HAL_RCC_OscConfig+0x88>
 8004dd0:	4b7c      	ldr	r3, [pc, #496]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d223      	bcs.n	8004e28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fd87 	bl	80058f8 <RCC_SetFlashLatencyFromMSIRange>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e383      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004df4:	4b73      	ldr	r3, [pc, #460]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a72      	ldr	r2, [pc, #456]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004dfa:	f043 0308 	orr.w	r3, r3, #8
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b70      	ldr	r3, [pc, #448]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	496d      	ldr	r1, [pc, #436]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e12:	4b6c      	ldr	r3, [pc, #432]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	4968      	ldr	r1, [pc, #416]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	604b      	str	r3, [r1, #4]
 8004e26:	e025      	b.n	8004e74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e28:	4b66      	ldr	r3, [pc, #408]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a65      	ldr	r2, [pc, #404]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e2e:	f043 0308 	orr.w	r3, r3, #8
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4b63      	ldr	r3, [pc, #396]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4960      	ldr	r1, [pc, #384]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e46:	4b5f      	ldr	r3, [pc, #380]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	495b      	ldr	r1, [pc, #364]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fd47 	bl	80058f8 <RCC_SetFlashLatencyFromMSIRange>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e343      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e74:	f000 fc4a 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b52      	ldr	r3, [pc, #328]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	4950      	ldr	r1, [pc, #320]	; (8004fc8 <HAL_RCC_OscConfig+0x274>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e90:	4a4e      	ldr	r2, [pc, #312]	; (8004fcc <HAL_RCC_OscConfig+0x278>)
 8004e92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e94:	4b4e      	ldr	r3, [pc, #312]	; (8004fd0 <HAL_RCC_OscConfig+0x27c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fd fddd 	bl	8002a58 <HAL_InitTick>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d052      	beq.n	8004f4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	e327      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d032      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004eb4:	4b43      	ldr	r3, [pc, #268]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a42      	ldr	r2, [pc, #264]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ec0:	f7fd ff92 	bl	8002de8 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ec8:	f7fd ff8e 	bl	8002de8 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e310      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eda:	4b3a      	ldr	r3, [pc, #232]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ee6:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a36      	ldr	r2, [pc, #216]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004eec:	f043 0308 	orr.w	r3, r3, #8
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	4931      	ldr	r1, [pc, #196]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f04:	4b2f      	ldr	r3, [pc, #188]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	492c      	ldr	r1, [pc, #176]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
 8004f18:	e01a      	b.n	8004f50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f1a:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f26:	f7fd ff5f 	bl	8002de8 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f2e:	f7fd ff5b 	bl	8002de8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e2dd      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f40:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f0      	bne.n	8004f2e <HAL_RCC_OscConfig+0x1da>
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d074      	beq.n	8005046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d005      	beq.n	8004f6e <HAL_RCC_OscConfig+0x21a>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d10e      	bne.n	8004f86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d10b      	bne.n	8004f86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6e:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d064      	beq.n	8005044 <HAL_RCC_OscConfig+0x2f0>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d160      	bne.n	8005044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e2ba      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8e:	d106      	bne.n	8004f9e <HAL_RCC_OscConfig+0x24a>
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0b      	ldr	r2, [pc, #44]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e026      	b.n	8004fec <HAL_RCC_OscConfig+0x298>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa6:	d115      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x280>
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a02      	ldr	r2, [pc, #8]	; (8004fc4 <HAL_RCC_OscConfig+0x270>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e014      	b.n	8004fec <HAL_RCC_OscConfig+0x298>
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	0800b68c 	.word	0x0800b68c
 8004fcc:	20000080 	.word	0x20000080
 8004fd0:	20000084 	.word	0x20000084
 8004fd4:	4ba0      	ldr	r3, [pc, #640]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a9f      	ldr	r2, [pc, #636]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b9d      	ldr	r3, [pc, #628]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a9c      	ldr	r2, [pc, #624]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd fef8 	bl	8002de8 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fd fef4 	bl	8002de8 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e276      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500e:	4b92      	ldr	r3, [pc, #584]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x2a8>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fd fee4 	bl	8002de8 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fd fee0 	bl	8002de8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e262      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005036:	4b88      	ldr	r3, [pc, #544]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x2d0>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d060      	beq.n	8005114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d005      	beq.n	8005064 <HAL_RCC_OscConfig+0x310>
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d119      	bne.n	8005092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d116      	bne.n	8005092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005064:	4b7c      	ldr	r3, [pc, #496]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_OscConfig+0x328>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e23f      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507c:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	061b      	lsls	r3, r3, #24
 800508a:	4973      	ldr	r1, [pc, #460]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800508c:	4313      	orrs	r3, r2
 800508e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005090:	e040      	b.n	8005114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d023      	beq.n	80050e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509a:	4b6f      	ldr	r3, [pc, #444]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6e      	ldr	r2, [pc, #440]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fd fe9f 	bl	8002de8 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ae:	f7fd fe9b 	bl	8002de8 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e21d      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c0:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050cc:	4b62      	ldr	r3, [pc, #392]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	061b      	lsls	r3, r3, #24
 80050da:	495f      	ldr	r1, [pc, #380]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
 80050e0:	e018      	b.n	8005114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e2:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a5c      	ldr	r2, [pc, #368]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80050e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7fd fe7b 	bl	8002de8 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f6:	f7fd fe77 	bl	8002de8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e1f9      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005108:	4b53      	ldr	r3, [pc, #332]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d03c      	beq.n	800519a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01c      	beq.n	8005162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005128:	4b4b      	ldr	r3, [pc, #300]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800512a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512e:	4a4a      	ldr	r2, [pc, #296]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd fe56 	bl	8002de8 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005140:	f7fd fe52 	bl	8002de8 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e1d4      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005152:	4b41      	ldr	r3, [pc, #260]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ef      	beq.n	8005140 <HAL_RCC_OscConfig+0x3ec>
 8005160:	e01b      	b.n	800519a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005162:	4b3d      	ldr	r3, [pc, #244]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005168:	4a3b      	ldr	r2, [pc, #236]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fd fe39 	bl	8002de8 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517a:	f7fd fe35 	bl	8002de8 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e1b7      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800518c:	4b32      	ldr	r3, [pc, #200]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1ef      	bne.n	800517a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80a6 	beq.w	80052f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a8:	2300      	movs	r3, #0
 80051aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051ac:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10d      	bne.n	80051d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	4a26      	ldr	r2, [pc, #152]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6593      	str	r3, [r2, #88]	; 0x58
 80051c4:	4b24      	ldr	r3, [pc, #144]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d0:	2301      	movs	r3, #1
 80051d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d4:	4b21      	ldr	r3, [pc, #132]	; (800525c <HAL_RCC_OscConfig+0x508>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d118      	bne.n	8005212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051e0:	4b1e      	ldr	r3, [pc, #120]	; (800525c <HAL_RCC_OscConfig+0x508>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <HAL_RCC_OscConfig+0x508>)
 80051e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ec:	f7fd fdfc 	bl	8002de8 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f4:	f7fd fdf8 	bl	8002de8 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e17a      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <HAL_RCC_OscConfig+0x508>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d108      	bne.n	800522c <HAL_RCC_OscConfig+0x4d8>
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	4a0d      	ldr	r2, [pc, #52]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800522a:	e029      	b.n	8005280 <HAL_RCC_OscConfig+0x52c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b05      	cmp	r3, #5
 8005232:	d115      	bne.n	8005260 <HAL_RCC_OscConfig+0x50c>
 8005234:	4b08      	ldr	r3, [pc, #32]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	4a07      	ldr	r2, [pc, #28]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	4a03      	ldr	r2, [pc, #12]	; (8005258 <HAL_RCC_OscConfig+0x504>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005254:	e014      	b.n	8005280 <HAL_RCC_OscConfig+0x52c>
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	40007000 	.word	0x40007000
 8005260:	4b9c      	ldr	r3, [pc, #624]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	4a9b      	ldr	r2, [pc, #620]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005270:	4b98      	ldr	r3, [pc, #608]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	4a97      	ldr	r2, [pc, #604]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005278:	f023 0304 	bic.w	r3, r3, #4
 800527c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d016      	beq.n	80052b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005288:	f7fd fdae 	bl	8002de8 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528e:	e00a      	b.n	80052a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005290:	f7fd fdaa 	bl	8002de8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f241 3288 	movw	r2, #5000	; 0x1388
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e12a      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a6:	4b8b      	ldr	r3, [pc, #556]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80052a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0ed      	beq.n	8005290 <HAL_RCC_OscConfig+0x53c>
 80052b4:	e015      	b.n	80052e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b6:	f7fd fd97 	bl	8002de8 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052bc:	e00a      	b.n	80052d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052be:	f7fd fd93 	bl	8002de8 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e113      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052d4:	4b7f      	ldr	r3, [pc, #508]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1ed      	bne.n	80052be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052e2:	7ffb      	ldrb	r3, [r7, #31]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e8:	4b7a      	ldr	r3, [pc, #488]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ec:	4a79      	ldr	r2, [pc, #484]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80052ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80fe 	beq.w	80054fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	2b02      	cmp	r3, #2
 8005304:	f040 80d0 	bne.w	80054a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005308:	4b72      	ldr	r3, [pc, #456]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f003 0203 	and.w	r2, r3, #3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	429a      	cmp	r2, r3
 800531a:	d130      	bne.n	800537e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	3b01      	subs	r3, #1
 8005328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d127      	bne.n	800537e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d11f      	bne.n	800537e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005348:	2a07      	cmp	r2, #7
 800534a:	bf14      	ite	ne
 800534c:	2201      	movne	r2, #1
 800534e:	2200      	moveq	r2, #0
 8005350:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005352:	4293      	cmp	r3, r2
 8005354:	d113      	bne.n	800537e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	3b01      	subs	r3, #1
 8005364:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d109      	bne.n	800537e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	3b01      	subs	r3, #1
 8005378:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d06e      	beq.n	800545c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b0c      	cmp	r3, #12
 8005382:	d069      	beq.n	8005458 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005384:	4b53      	ldr	r3, [pc, #332]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d105      	bne.n	800539c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0ad      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053a0:	4b4c      	ldr	r3, [pc, #304]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a4b      	ldr	r2, [pc, #300]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80053a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053ac:	f7fd fd1c 	bl	8002de8 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b4:	f7fd fd18 	bl	8002de8 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e09a      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c6:	4b43      	ldr	r3, [pc, #268]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d2:	4b40      	ldr	r3, [pc, #256]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	4b40      	ldr	r3, [pc, #256]	; (80054d8 <HAL_RCC_OscConfig+0x784>)
 80053d8:	4013      	ands	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053e2:	3a01      	subs	r2, #1
 80053e4:	0112      	lsls	r2, r2, #4
 80053e6:	4311      	orrs	r1, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053ec:	0212      	lsls	r2, r2, #8
 80053ee:	4311      	orrs	r1, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053f4:	0852      	lsrs	r2, r2, #1
 80053f6:	3a01      	subs	r2, #1
 80053f8:	0552      	lsls	r2, r2, #21
 80053fa:	4311      	orrs	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005400:	0852      	lsrs	r2, r2, #1
 8005402:	3a01      	subs	r2, #1
 8005404:	0652      	lsls	r2, r2, #25
 8005406:	4311      	orrs	r1, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800540c:	0912      	lsrs	r2, r2, #4
 800540e:	0452      	lsls	r2, r2, #17
 8005410:	430a      	orrs	r2, r1
 8005412:	4930      	ldr	r1, [pc, #192]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005414:	4313      	orrs	r3, r2
 8005416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005418:	4b2e      	ldr	r3, [pc, #184]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800541e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005422:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005424:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	4a2a      	ldr	r2, [pc, #168]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800542a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800542e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005430:	f7fd fcda 	bl	8002de8 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005438:	f7fd fcd6 	bl	8002de8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e058      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800544a:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005456:	e050      	b.n	80054fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e04f      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545c:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d148      	bne.n	80054fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800546e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005472:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005474:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800547a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800547e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005480:	f7fd fcb2 	bl	8002de8 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005488:	f7fd fcae 	bl	8002de8 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e030      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x734>
 80054a6:	e028      	b.n	80054fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b0c      	cmp	r3, #12
 80054ac:	d023      	beq.n	80054f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <HAL_RCC_OscConfig+0x780>)
 80054b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ba:	f7fd fc95 	bl	8002de8 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c0:	e00c      	b.n	80054dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fd fc91 	bl	8002de8 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d905      	bls.n	80054dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e013      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
 80054d4:	40021000 	.word	0x40021000
 80054d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_RCC_OscConfig+0x7b0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ec      	bne.n	80054c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_RCC_OscConfig+0x7b0>)
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	4905      	ldr	r1, [pc, #20]	; (8005504 <HAL_RCC_OscConfig+0x7b0>)
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <HAL_RCC_OscConfig+0x7b4>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	60cb      	str	r3, [r1, #12]
 80054f4:	e001      	b.n	80054fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000
 8005508:	feeefffc 	.word	0xfeeefffc

0800550c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0e7      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005520:	4b75      	ldr	r3, [pc, #468]	; (80056f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d910      	bls.n	8005550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b72      	ldr	r3, [pc, #456]	; (80056f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 0207 	bic.w	r2, r3, #7
 8005536:	4970      	ldr	r1, [pc, #448]	; (80056f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b6e      	ldr	r3, [pc, #440]	; (80056f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0cf      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d010      	beq.n	800557e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	4b66      	ldr	r3, [pc, #408]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005568:	429a      	cmp	r2, r3
 800556a:	d908      	bls.n	800557e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556c:	4b63      	ldr	r3, [pc, #396]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4960      	ldr	r1, [pc, #384]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d04c      	beq.n	8005624 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005592:	4b5a      	ldr	r3, [pc, #360]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d121      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e0a6      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055aa:	4b54      	ldr	r3, [pc, #336]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d115      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e09a      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055c2:	4b4e      	ldr	r3, [pc, #312]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e08e      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d2:	4b4a      	ldr	r3, [pc, #296]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e086      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055e2:	4b46      	ldr	r3, [pc, #280]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 0203 	bic.w	r2, r3, #3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4943      	ldr	r1, [pc, #268]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f4:	f7fd fbf8 	bl	8002de8 <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055fc:	f7fd fbf4 	bl	8002de8 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	; 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e06e      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	4b3a      	ldr	r3, [pc, #232]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 020c 	and.w	r2, r3, #12
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	429a      	cmp	r2, r3
 8005622:	d1eb      	bne.n	80055fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d010      	beq.n	8005652 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	4b31      	ldr	r3, [pc, #196]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800563c:	429a      	cmp	r2, r3
 800563e:	d208      	bcs.n	8005652 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005640:	4b2e      	ldr	r3, [pc, #184]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	492b      	ldr	r1, [pc, #172]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 800564e:	4313      	orrs	r3, r2
 8005650:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005652:	4b29      	ldr	r3, [pc, #164]	; (80056f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d210      	bcs.n	8005682 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005660:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 0207 	bic.w	r2, r3, #7
 8005668:	4923      	ldr	r1, [pc, #140]	; (80056f8 <HAL_RCC_ClockConfig+0x1ec>)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	4313      	orrs	r3, r2
 800566e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005670:	4b21      	ldr	r3, [pc, #132]	; (80056f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d001      	beq.n	8005682 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e036      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800568e:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4918      	ldr	r1, [pc, #96]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ac:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4910      	ldr	r1, [pc, #64]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056c0:	f000 f824 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <HAL_RCC_ClockConfig+0x1f0>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	490b      	ldr	r1, [pc, #44]	; (8005700 <HAL_RCC_ClockConfig+0x1f4>)
 80056d2:	5ccb      	ldrb	r3, [r1, r3]
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	4a09      	ldr	r2, [pc, #36]	; (8005704 <HAL_RCC_ClockConfig+0x1f8>)
 80056de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_RCC_ClockConfig+0x1fc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fd f9b7 	bl	8002a58 <HAL_InitTick>
 80056ea:	4603      	mov	r3, r0
 80056ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80056ee:	7afb      	ldrb	r3, [r7, #11]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40022000 	.word	0x40022000
 80056fc:	40021000 	.word	0x40021000
 8005700:	0800b68c 	.word	0x0800b68c
 8005704:	20000080 	.word	0x20000080
 8005708:	20000084 	.word	0x20000084

0800570c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	b089      	sub	sp, #36	; 0x24
 8005710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571a:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005724:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x34>
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d121      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d11e      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005740:	4b34      	ldr	r3, [pc, #208]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800574c:	4b31      	ldr	r3, [pc, #196]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800574e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e005      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800575c:	4b2d      	ldr	r3, [pc, #180]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005768:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <HAL_RCC_GetSysClockFreq+0x10c>)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10d      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d102      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <HAL_RCC_GetSysClockFreq+0x110>)
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e004      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d101      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005790:	4b23      	ldr	r3, [pc, #140]	; (8005820 <HAL_RCC_GetSysClockFreq+0x114>)
 8005792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b0c      	cmp	r3, #12
 8005798:	d134      	bne.n	8005804 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800579a:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d003      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0xac>
 80057b0:	e005      	b.n	80057be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057b2:	4b1a      	ldr	r3, [pc, #104]	; (800581c <HAL_RCC_GetSysClockFreq+0x110>)
 80057b4:	617b      	str	r3, [r7, #20]
      break;
 80057b6:	e005      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057b8:	4b19      	ldr	r3, [pc, #100]	; (8005820 <HAL_RCC_GetSysClockFreq+0x114>)
 80057ba:	617b      	str	r3, [r7, #20]
      break;
 80057bc:	e002      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	617b      	str	r3, [r7, #20]
      break;
 80057c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057c4:	4b13      	ldr	r3, [pc, #76]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	3301      	adds	r3, #1
 80057d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	fb03 f202 	mul.w	r2, r3, r2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	0e5b      	lsrs	r3, r3, #25
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	3301      	adds	r3, #1
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005804:	69bb      	ldr	r3, [r7, #24]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3724      	adds	r7, #36	; 0x24
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000
 8005818:	0800b6a4 	.word	0x0800b6a4
 800581c:	00f42400 	.word	0x00f42400
 8005820:	007a1200 	.word	0x007a1200

08005824 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005828:	4b03      	ldr	r3, [pc, #12]	; (8005838 <HAL_RCC_GetHCLKFreq+0x14>)
 800582a:	681b      	ldr	r3, [r3, #0]
}
 800582c:	4618      	mov	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20000080 	.word	0x20000080

0800583c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005840:	f7ff fff0 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 8005844:	4602      	mov	r2, r0
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	4904      	ldr	r1, [pc, #16]	; (8005864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005852:	5ccb      	ldrb	r3, [r1, r3]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800585c:	4618      	mov	r0, r3
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	0800b69c 	.word	0x0800b69c

08005868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800586c:	f7ff ffda 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	0adb      	lsrs	r3, r3, #11
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4904      	ldr	r1, [pc, #16]	; (8005890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005888:	4618      	mov	r0, r3
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000
 8005890:	0800b69c 	.word	0x0800b69c

08005894 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	220f      	movs	r2, #15
 80058a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80058a4:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <HAL_RCC_GetClockConfig+0x5c>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 0203 	and.w	r2, r3, #3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <HAL_RCC_GetClockConfig+0x5c>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <HAL_RCC_GetClockConfig+0x5c>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_RCC_GetClockConfig+0x5c>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	08db      	lsrs	r3, r3, #3
 80058ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80058d6:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <HAL_RCC_GetClockConfig+0x60>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0207 	and.w	r2, r3, #7
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	601a      	str	r2, [r3, #0]
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40022000 	.word	0x40022000

080058f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005904:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005910:	f7fe fcd0 	bl	80042b4 <HAL_PWREx_GetVoltageRange>
 8005914:	6178      	str	r0, [r7, #20]
 8005916:	e014      	b.n	8005942 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005918:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	4a24      	ldr	r2, [pc, #144]	; (80059b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800591e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005922:	6593      	str	r3, [r2, #88]	; 0x58
 8005924:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005930:	f7fe fcc0 	bl	80042b4 <HAL_PWREx_GetVoltageRange>
 8005934:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005936:	4b1e      	ldr	r3, [pc, #120]	; (80059b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800593c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005940:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005948:	d10b      	bne.n	8005962 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b80      	cmp	r3, #128	; 0x80
 800594e:	d919      	bls.n	8005984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2ba0      	cmp	r3, #160	; 0xa0
 8005954:	d902      	bls.n	800595c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005956:	2302      	movs	r3, #2
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e013      	b.n	8005984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800595c:	2301      	movs	r3, #1
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	e010      	b.n	8005984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b80      	cmp	r3, #128	; 0x80
 8005966:	d902      	bls.n	800596e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005968:	2303      	movs	r3, #3
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	e00a      	b.n	8005984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d102      	bne.n	800597a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005974:	2302      	movs	r3, #2
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	e004      	b.n	8005984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b70      	cmp	r3, #112	; 0x70
 800597e:	d101      	bne.n	8005984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005980:	2301      	movs	r3, #1
 8005982:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f023 0207 	bic.w	r2, r3, #7
 800598c:	4909      	ldr	r1, [pc, #36]	; (80059b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d001      	beq.n	80059a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40022000 	.word	0x40022000

080059b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059c0:	2300      	movs	r3, #0
 80059c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059c4:	2300      	movs	r3, #0
 80059c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d041      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059dc:	d02a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059e2:	d824      	bhi.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059e8:	d008      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059ee:	d81e      	bhi.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f8:	d010      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059fa:	e018      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059fc:	4b86      	ldr	r3, [pc, #536]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4a85      	ldr	r2, [pc, #532]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a08:	e015      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fabb 	bl	8005f8c <RCCEx_PLLSAI1_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a1a:	e00c      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3320      	adds	r3, #32
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fba6 	bl	8006174 <RCCEx_PLLSAI2_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	74fb      	strb	r3, [r7, #19]
      break;
 8005a32:	e000      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a3c:	4b76      	ldr	r3, [pc, #472]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4a:	4973      	ldr	r1, [pc, #460]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a52:	e001      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	7cfb      	ldrb	r3, [r7, #19]
 8005a56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d041      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a6c:	d02a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005a6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a72:	d824      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a78:	d008      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a7e:	d81e      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a88:	d010      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a8a:	e018      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a8c:	4b62      	ldr	r3, [pc, #392]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a61      	ldr	r2, [pc, #388]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a98:	e015      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fa73 	bl	8005f8c <RCCEx_PLLSAI1_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005aaa:	e00c      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3320      	adds	r3, #32
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fb5e 	bl	8006174 <RCCEx_PLLSAI2_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	74fb      	strb	r3, [r7, #19]
      break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005acc:	4b52      	ldr	r3, [pc, #328]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ada:	494f      	ldr	r1, [pc, #316]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ae2:	e001      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
 8005ae6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a0 	beq.w	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005af6:	2300      	movs	r3, #0
 8005af8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005afa:	4b47      	ldr	r3, [pc, #284]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00d      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b10:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b14:	4a40      	ldr	r2, [pc, #256]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b1c:	4b3e      	ldr	r3, [pc, #248]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b2c:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3a      	ldr	r2, [pc, #232]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b38:	f7fd f956 	bl	8002de8 <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b3e:	e009      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b40:	f7fd f952 	bl	8002de8 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d902      	bls.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	74fb      	strb	r3, [r7, #19]
        break;
 8005b52:	e005      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b54:	4b31      	ldr	r3, [pc, #196]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ef      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d15c      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b66:	4b2c      	ldr	r3, [pc, #176]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01f      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d019      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b84:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b90:	4b21      	ldr	r3, [pc, #132]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b96:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bb0:	4a19      	ldr	r2, [pc, #100]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc2:	f7fd f911 	bl	8002de8 <HAL_GetTick>
 8005bc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bc8:	e00b      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bca:	f7fd f90d 	bl	8002de8 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d902      	bls.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	74fb      	strb	r3, [r7, #19]
            break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005be2:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0ec      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005bf0:	7cfb      	ldrb	r3, [r7, #19]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf6:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c06:	4904      	ldr	r1, [pc, #16]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c0e:	e009      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	74bb      	strb	r3, [r7, #18]
 8005c14:	e006      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c16:	bf00      	nop
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c20:	7cfb      	ldrb	r3, [r7, #19]
 8005c22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c24:	7c7b      	ldrb	r3, [r7, #17]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d105      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c2a:	4b9e      	ldr	r3, [pc, #632]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	4a9d      	ldr	r2, [pc, #628]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c42:	4b98      	ldr	r3, [pc, #608]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	f023 0203 	bic.w	r2, r3, #3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	4994      	ldr	r1, [pc, #592]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c64:	4b8f      	ldr	r3, [pc, #572]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	f023 020c 	bic.w	r2, r3, #12
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	498c      	ldr	r1, [pc, #560]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c86:	4b87      	ldr	r3, [pc, #540]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	4983      	ldr	r1, [pc, #524]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ca8:	4b7e      	ldr	r3, [pc, #504]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	497b      	ldr	r1, [pc, #492]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cca:	4b76      	ldr	r3, [pc, #472]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd8:	4972      	ldr	r1, [pc, #456]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cec:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	496a      	ldr	r1, [pc, #424]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d0e:	4b65      	ldr	r3, [pc, #404]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	4961      	ldr	r1, [pc, #388]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d30:	4b5c      	ldr	r3, [pc, #368]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3e:	4959      	ldr	r1, [pc, #356]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d52:	4b54      	ldr	r3, [pc, #336]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	4950      	ldr	r1, [pc, #320]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d74:	4b4b      	ldr	r3, [pc, #300]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	4948      	ldr	r1, [pc, #288]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d96:	4b43      	ldr	r3, [pc, #268]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	493f      	ldr	r1, [pc, #252]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d028      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005db8:	4b3a      	ldr	r3, [pc, #232]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc6:	4937      	ldr	r1, [pc, #220]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dd6:	d106      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd8:	4b32      	ldr	r3, [pc, #200]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	4a31      	ldr	r2, [pc, #196]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005de2:	60d3      	str	r3, [r2, #12]
 8005de4:	e011      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dee:	d10c      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	2101      	movs	r1, #1
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f8c8 	bl	8005f8c <RCCEx_PLLSAI1_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e00:	7cfb      	ldrb	r3, [r7, #19]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005e06:	7cfb      	ldrb	r3, [r7, #19]
 8005e08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d028      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e16:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	491f      	ldr	r1, [pc, #124]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e34:	d106      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e40:	60d3      	str	r3, [r2, #12]
 8005e42:	e011      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3304      	adds	r3, #4
 8005e52:	2101      	movs	r1, #1
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 f899 	bl	8005f8c <RCCEx_PLLSAI1_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e5e:	7cfb      	ldrb	r3, [r7, #19]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005e64:	7cfb      	ldrb	r3, [r7, #19]
 8005e66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d02b      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e82:	4908      	ldr	r1, [pc, #32]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e92:	d109      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e94:	4b03      	ldr	r3, [pc, #12]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a02      	ldr	r2, [pc, #8]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e9e:	60d3      	str	r3, [r2, #12]
 8005ea0:	e014      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005ea2:	bf00      	nop
 8005ea4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eb0:	d10c      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 f867 	bl	8005f8c <RCCEx_PLLSAI1_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ec2:	7cfb      	ldrb	r3, [r7, #19]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d02f      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ee6:	4928      	ldr	r1, [pc, #160]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ef6:	d10d      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	2102      	movs	r1, #2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 f844 	bl	8005f8c <RCCEx_PLLSAI1_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f08:	7cfb      	ldrb	r3, [r7, #19]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d014      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f0e:	7cfb      	ldrb	r3, [r7, #19]
 8005f10:	74bb      	strb	r3, [r7, #18]
 8005f12:	e011      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3320      	adds	r3, #32
 8005f22:	2102      	movs	r1, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f925 	bl	8006174 <RCCEx_PLLSAI2_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f2e:	7cfb      	ldrb	r3, [r7, #19]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f44:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f52:	490d      	ldr	r1, [pc, #52]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f76:	4904      	ldr	r1, [pc, #16]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40021000 	.word	0x40021000

08005f8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f9a:	4b75      	ldr	r3, [pc, #468]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d018      	beq.n	8005fd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005fa6:	4b72      	ldr	r3, [pc, #456]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f003 0203 	and.w	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d10d      	bne.n	8005fd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
       ||
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
       ||
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d047      	beq.n	8006062 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
 8005fd6:	e044      	b.n	8006062 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d018      	beq.n	8006012 <RCCEx_PLLSAI1_Config+0x86>
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d825      	bhi.n	8006030 <RCCEx_PLLSAI1_Config+0xa4>
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d002      	beq.n	8005fee <RCCEx_PLLSAI1_Config+0x62>
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d009      	beq.n	8006000 <RCCEx_PLLSAI1_Config+0x74>
 8005fec:	e020      	b.n	8006030 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fee:	4b60      	ldr	r3, [pc, #384]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d11d      	bne.n	8006036 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ffe:	e01a      	b.n	8006036 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006000:	4b5b      	ldr	r3, [pc, #364]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006008:	2b00      	cmp	r3, #0
 800600a:	d116      	bne.n	800603a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006010:	e013      	b.n	800603a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006012:	4b57      	ldr	r3, [pc, #348]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10f      	bne.n	800603e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800601e:	4b54      	ldr	r3, [pc, #336]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800602e:	e006      	b.n	800603e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
      break;
 8006034:	e004      	b.n	8006040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006036:	bf00      	nop
 8006038:	e002      	b.n	8006040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800603e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10d      	bne.n	8006062 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006046:	4b4a      	ldr	r3, [pc, #296]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6819      	ldr	r1, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	3b01      	subs	r3, #1
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	430b      	orrs	r3, r1
 800605c:	4944      	ldr	r1, [pc, #272]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800605e:	4313      	orrs	r3, r2
 8006060:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d17d      	bne.n	8006164 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006068:	4b41      	ldr	r3, [pc, #260]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a40      	ldr	r2, [pc, #256]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800606e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006074:	f7fc feb8 	bl	8002de8 <HAL_GetTick>
 8006078:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800607a:	e009      	b.n	8006090 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800607c:	f7fc feb4 	bl	8002de8 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d902      	bls.n	8006090 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	73fb      	strb	r3, [r7, #15]
        break;
 800608e:	e005      	b.n	800609c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006090:	4b37      	ldr	r3, [pc, #220]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1ef      	bne.n	800607c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d160      	bne.n	8006164 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d111      	bne.n	80060cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060a8:	4b31      	ldr	r3, [pc, #196]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80060b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6892      	ldr	r2, [r2, #8]
 80060b8:	0211      	lsls	r1, r2, #8
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	68d2      	ldr	r2, [r2, #12]
 80060be:	0912      	lsrs	r2, r2, #4
 80060c0:	0452      	lsls	r2, r2, #17
 80060c2:	430a      	orrs	r2, r1
 80060c4:	492a      	ldr	r1, [pc, #168]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	610b      	str	r3, [r1, #16]
 80060ca:	e027      	b.n	800611c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d112      	bne.n	80060f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060d2:	4b27      	ldr	r3, [pc, #156]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80060da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6892      	ldr	r2, [r2, #8]
 80060e2:	0211      	lsls	r1, r2, #8
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6912      	ldr	r2, [r2, #16]
 80060e8:	0852      	lsrs	r2, r2, #1
 80060ea:	3a01      	subs	r2, #1
 80060ec:	0552      	lsls	r2, r2, #21
 80060ee:	430a      	orrs	r2, r1
 80060f0:	491f      	ldr	r1, [pc, #124]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	610b      	str	r3, [r1, #16]
 80060f6:	e011      	b.n	800611c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060f8:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006100:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6892      	ldr	r2, [r2, #8]
 8006108:	0211      	lsls	r1, r2, #8
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6952      	ldr	r2, [r2, #20]
 800610e:	0852      	lsrs	r2, r2, #1
 8006110:	3a01      	subs	r2, #1
 8006112:	0652      	lsls	r2, r2, #25
 8006114:	430a      	orrs	r2, r1
 8006116:	4916      	ldr	r1, [pc, #88]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006118:	4313      	orrs	r3, r2
 800611a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800611c:	4b14      	ldr	r3, [pc, #80]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a13      	ldr	r2, [pc, #76]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006126:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006128:	f7fc fe5e 	bl	8002de8 <HAL_GetTick>
 800612c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800612e:	e009      	b.n	8006144 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006130:	f7fc fe5a 	bl	8002de8 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d902      	bls.n	8006144 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	73fb      	strb	r3, [r7, #15]
          break;
 8006142:	e005      	b.n	8006150 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ef      	beq.n	8006130 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	4904      	ldr	r1, [pc, #16]	; (8006170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006160:	4313      	orrs	r3, r2
 8006162:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000

08006174 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006182:	4b6a      	ldr	r3, [pc, #424]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d018      	beq.n	80061c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800618e:	4b67      	ldr	r3, [pc, #412]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0203 	and.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d10d      	bne.n	80061ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
       ||
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80061a6:	4b61      	ldr	r3, [pc, #388]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
       ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d047      	beq.n	800624a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	73fb      	strb	r3, [r7, #15]
 80061be:	e044      	b.n	800624a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d018      	beq.n	80061fa <RCCEx_PLLSAI2_Config+0x86>
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d825      	bhi.n	8006218 <RCCEx_PLLSAI2_Config+0xa4>
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d002      	beq.n	80061d6 <RCCEx_PLLSAI2_Config+0x62>
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d009      	beq.n	80061e8 <RCCEx_PLLSAI2_Config+0x74>
 80061d4:	e020      	b.n	8006218 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061d6:	4b55      	ldr	r3, [pc, #340]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11d      	bne.n	800621e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061e6:	e01a      	b.n	800621e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061e8:	4b50      	ldr	r3, [pc, #320]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d116      	bne.n	8006222 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061f8:	e013      	b.n	8006222 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061fa:	4b4c      	ldr	r3, [pc, #304]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10f      	bne.n	8006226 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006206:	4b49      	ldr	r3, [pc, #292]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006216:	e006      	b.n	8006226 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
      break;
 800621c:	e004      	b.n	8006228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006226:	bf00      	nop
    }

    if(status == HAL_OK)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10d      	bne.n	800624a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800622e:	4b3f      	ldr	r3, [pc, #252]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	3b01      	subs	r3, #1
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	430b      	orrs	r3, r1
 8006244:	4939      	ldr	r1, [pc, #228]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006246:	4313      	orrs	r3, r2
 8006248:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d167      	bne.n	8006320 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006250:	4b36      	ldr	r3, [pc, #216]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a35      	ldr	r2, [pc, #212]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800625a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800625c:	f7fc fdc4 	bl	8002de8 <HAL_GetTick>
 8006260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006262:	e009      	b.n	8006278 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006264:	f7fc fdc0 	bl	8002de8 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d902      	bls.n	8006278 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	73fb      	strb	r3, [r7, #15]
        break;
 8006276:	e005      	b.n	8006284 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006278:	4b2c      	ldr	r3, [pc, #176]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1ef      	bne.n	8006264 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d14a      	bne.n	8006320 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d111      	bne.n	80062b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006290:	4b26      	ldr	r3, [pc, #152]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6892      	ldr	r2, [r2, #8]
 80062a0:	0211      	lsls	r1, r2, #8
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	68d2      	ldr	r2, [r2, #12]
 80062a6:	0912      	lsrs	r2, r2, #4
 80062a8:	0452      	lsls	r2, r2, #17
 80062aa:	430a      	orrs	r2, r1
 80062ac:	491f      	ldr	r1, [pc, #124]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	614b      	str	r3, [r1, #20]
 80062b2:	e011      	b.n	80062d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062b4:	4b1d      	ldr	r3, [pc, #116]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80062bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6892      	ldr	r2, [r2, #8]
 80062c4:	0211      	lsls	r1, r2, #8
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6912      	ldr	r2, [r2, #16]
 80062ca:	0852      	lsrs	r2, r2, #1
 80062cc:	3a01      	subs	r2, #1
 80062ce:	0652      	lsls	r2, r2, #25
 80062d0:	430a      	orrs	r2, r1
 80062d2:	4916      	ldr	r1, [pc, #88]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80062d8:	4b14      	ldr	r3, [pc, #80]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a13      	ldr	r2, [pc, #76]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e4:	f7fc fd80 	bl	8002de8 <HAL_GetTick>
 80062e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062ea:	e009      	b.n	8006300 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062ec:	f7fc fd7c 	bl	8002de8 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d902      	bls.n	8006300 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
          break;
 80062fe:	e005      	b.n	800630c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006300:	4b0a      	ldr	r3, [pc, #40]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0ef      	beq.n	80062ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4904      	ldr	r1, [pc, #16]	; (800632c <RCCEx_PLLSAI2_Config+0x1b8>)
 800631c:	4313      	orrs	r3, r2
 800631e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000

08006330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e049      	b.n	80063d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f841 	bl	80063de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f000 f9da 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d001      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e04f      	b.n	80064ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a23      	ldr	r2, [pc, #140]	; (80064b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <HAL_TIM_Base_Start_IT+0x76>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006436:	d018      	beq.n	800646a <HAL_TIM_Base_Start_IT+0x76>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <HAL_TIM_Base_Start_IT+0xc8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_TIM_Base_Start_IT+0x76>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_TIM_Base_Start_IT+0x76>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_TIM_Base_Start_IT+0x76>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_TIM_Base_Start_IT+0x76>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a19      	ldr	r2, [pc, #100]	; (80064cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d115      	bne.n	8006496 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006472:	4013      	ands	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b06      	cmp	r3, #6
 800647a:	d015      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0xb4>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006482:	d011      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006494:	e008      	b.n	80064a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	e000      	b.n	80064aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40013400 	.word	0x40013400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	00010007 	.word	0x00010007

080064d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d020      	beq.n	8006538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0202 	mvn.w	r2, #2
 8006508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f8e4 	bl	80066ec <HAL_TIM_IC_CaptureCallback>
 8006524:	e005      	b.n	8006532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8d6 	bl	80066d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8e7 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	d020      	beq.n	8006584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01b      	beq.n	8006584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0204 	mvn.w	r2, #4
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2202      	movs	r2, #2
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8be 	bl	80066ec <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f8b0 	bl	80066d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f8c1 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d020      	beq.n	80065d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01b      	beq.n	80065d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0208 	mvn.w	r2, #8
 80065a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2204      	movs	r2, #4
 80065a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f898 	bl	80066ec <HAL_TIM_IC_CaptureCallback>
 80065bc:	e005      	b.n	80065ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f88a 	bl	80066d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f89b 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 0310 	and.w	r3, r3, #16
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d020      	beq.n	800661c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01b      	beq.n	800661c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0210 	mvn.w	r2, #16
 80065ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2208      	movs	r2, #8
 80065f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f872 	bl	80066ec <HAL_TIM_IC_CaptureCallback>
 8006608:	e005      	b.n	8006616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f864 	bl	80066d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f875 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0201 	mvn.w	r2, #1
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb fb54 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800665c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f906 	bl	8006870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00c      	beq.n	8006688 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8fe 	bl	8006884 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f834 	bl	8006714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00c      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0220 	mvn.w	r2, #32
 80066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f8c6 	bl	800685c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a40      	ldr	r2, [pc, #256]	; (800683c <TIM_Base_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d013      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d00f      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <TIM_Base_SetConfig+0x118>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00b      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a3c      	ldr	r2, [pc, #240]	; (8006844 <TIM_Base_SetConfig+0x11c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a3b      	ldr	r2, [pc, #236]	; (8006848 <TIM_Base_SetConfig+0x120>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a3a      	ldr	r2, [pc, #232]	; (800684c <TIM_Base_SetConfig+0x124>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2f      	ldr	r2, [pc, #188]	; (800683c <TIM_Base_SetConfig+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01f      	beq.n	80067c2 <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006788:	d01b      	beq.n	80067c2 <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <TIM_Base_SetConfig+0x118>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d017      	beq.n	80067c2 <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <TIM_Base_SetConfig+0x11c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <TIM_Base_SetConfig+0x9a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <TIM_Base_SetConfig+0x120>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00f      	beq.n	80067c2 <TIM_Base_SetConfig+0x9a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a29      	ldr	r2, [pc, #164]	; (800684c <TIM_Base_SetConfig+0x124>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00b      	beq.n	80067c2 <TIM_Base_SetConfig+0x9a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_Base_SetConfig+0x128>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d007      	beq.n	80067c2 <TIM_Base_SetConfig+0x9a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a27      	ldr	r2, [pc, #156]	; (8006854 <TIM_Base_SetConfig+0x12c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_Base_SetConfig+0x9a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a26      	ldr	r2, [pc, #152]	; (8006858 <TIM_Base_SetConfig+0x130>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d108      	bne.n	80067d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <TIM_Base_SetConfig+0x114>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00f      	beq.n	8006820 <TIM_Base_SetConfig+0xf8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a12      	ldr	r2, [pc, #72]	; (800684c <TIM_Base_SetConfig+0x124>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_Base_SetConfig+0xf8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a11      	ldr	r2, [pc, #68]	; (8006850 <TIM_Base_SetConfig+0x128>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_Base_SetConfig+0xf8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a10      	ldr	r2, [pc, #64]	; (8006854 <TIM_Base_SetConfig+0x12c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0xf8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a0f      	ldr	r2, [pc, #60]	; (8006858 <TIM_Base_SetConfig+0x130>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d103      	bne.n	8006828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	615a      	str	r2, [r3, #20]
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40013400 	.word	0x40013400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800

0800685c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e040      	b.n	800692c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fc f86e 	bl	800299c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2224      	movs	r2, #36	; 0x24
 80068c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb6a 	bl	8006fb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f8af 	bl	8006a48 <UART_SetConfig>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e01b      	b.n	800692c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fbe9 	bl	80070fc <UART_CheckIdleState>
 800692a:	4603      	mov	r3, r0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	; 0x28
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006948:	2b20      	cmp	r3, #32
 800694a:	d178      	bne.n	8006a3e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_UART_Transmit+0x24>
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e071      	b.n	8006a40 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2221      	movs	r2, #33	; 0x21
 8006968:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800696a:	f7fc fa3d 	bl	8002de8 <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	88fa      	ldrh	r2, [r7, #6]
 8006974:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006988:	d108      	bne.n	800699c <HAL_UART_Transmit+0x68>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	e003      	b.n	80069a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069a4:	e030      	b.n	8006a08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2200      	movs	r2, #0
 80069ae:	2180      	movs	r1, #128	; 0x80
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fc4b 	bl	800724c <UART_WaitOnFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e03c      	b.n	8006a40 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	881a      	ldrh	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d8:	b292      	uxth	r2, r2
 80069da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	3302      	adds	r3, #2
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e008      	b.n	80069f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	781a      	ldrb	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	b292      	uxth	r2, r2
 80069ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	3301      	adds	r3, #1
 80069f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1c8      	bne.n	80069a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2140      	movs	r1, #64	; 0x40
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fc14 	bl	800724c <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e005      	b.n	8006a40 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e000      	b.n	8006a40 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006a3e:	2302      	movs	r3, #2
  }
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a4c:	b08a      	sub	sp, #40	; 0x28
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	431a      	orrs	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4ba4      	ldr	r3, [pc, #656]	; (8006d08 <UART_SetConfig+0x2c0>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	6812      	ldr	r2, [r2, #0]
 8006a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a80:	430b      	orrs	r3, r1
 8006a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a99      	ldr	r2, [pc, #612]	; (8006d0c <UART_SetConfig+0x2c4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a90      	ldr	r2, [pc, #576]	; (8006d10 <UART_SetConfig+0x2c8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d126      	bne.n	8006b20 <UART_SetConfig+0xd8>
 8006ad2:	4b90      	ldr	r3, [pc, #576]	; (8006d14 <UART_SetConfig+0x2cc>)
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d81b      	bhi.n	8006b18 <UART_SetConfig+0xd0>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0xa0>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b09 	.word	0x08006b09
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afe:	e116      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b00:	2302      	movs	r3, #2
 8006b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b06:	e112      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b08:	2304      	movs	r3, #4
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0e:	e10e      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b10:	2308      	movs	r3, #8
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b16:	e10a      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1e:	e106      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a7c      	ldr	r2, [pc, #496]	; (8006d18 <UART_SetConfig+0x2d0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d138      	bne.n	8006b9c <UART_SetConfig+0x154>
 8006b2a:	4b7a      	ldr	r3, [pc, #488]	; (8006d14 <UART_SetConfig+0x2cc>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b0c      	cmp	r3, #12
 8006b36:	d82d      	bhi.n	8006b94 <UART_SetConfig+0x14c>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0xf8>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b75 	.word	0x08006b75
 8006b44:	08006b95 	.word	0x08006b95
 8006b48:	08006b95 	.word	0x08006b95
 8006b4c:	08006b95 	.word	0x08006b95
 8006b50:	08006b85 	.word	0x08006b85
 8006b54:	08006b95 	.word	0x08006b95
 8006b58:	08006b95 	.word	0x08006b95
 8006b5c:	08006b95 	.word	0x08006b95
 8006b60:	08006b7d 	.word	0x08006b7d
 8006b64:	08006b95 	.word	0x08006b95
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	08006b95 	.word	0x08006b95
 8006b70:	08006b8d 	.word	0x08006b8d
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e0d8      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e0d4      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e0d0      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e0cc      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e0c8      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a5e      	ldr	r2, [pc, #376]	; (8006d1c <UART_SetConfig+0x2d4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d125      	bne.n	8006bf2 <UART_SetConfig+0x1aa>
 8006ba6:	4b5b      	ldr	r3, [pc, #364]	; (8006d14 <UART_SetConfig+0x2cc>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d016      	beq.n	8006be2 <UART_SetConfig+0x19a>
 8006bb4:	2b30      	cmp	r3, #48	; 0x30
 8006bb6:	d818      	bhi.n	8006bea <UART_SetConfig+0x1a2>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d00a      	beq.n	8006bd2 <UART_SetConfig+0x18a>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d814      	bhi.n	8006bea <UART_SetConfig+0x1a2>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <UART_SetConfig+0x182>
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d008      	beq.n	8006bda <UART_SetConfig+0x192>
 8006bc8:	e00f      	b.n	8006bea <UART_SetConfig+0x1a2>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd0:	e0ad      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd8:	e0a9      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006bda:	2304      	movs	r3, #4
 8006bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be0:	e0a5      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006be2:	2308      	movs	r3, #8
 8006be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be8:	e0a1      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006bea:	2310      	movs	r3, #16
 8006bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf0:	e09d      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a4a      	ldr	r2, [pc, #296]	; (8006d20 <UART_SetConfig+0x2d8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d125      	bne.n	8006c48 <UART_SetConfig+0x200>
 8006bfc:	4b45      	ldr	r3, [pc, #276]	; (8006d14 <UART_SetConfig+0x2cc>)
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c06:	2bc0      	cmp	r3, #192	; 0xc0
 8006c08:	d016      	beq.n	8006c38 <UART_SetConfig+0x1f0>
 8006c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c0c:	d818      	bhi.n	8006c40 <UART_SetConfig+0x1f8>
 8006c0e:	2b80      	cmp	r3, #128	; 0x80
 8006c10:	d00a      	beq.n	8006c28 <UART_SetConfig+0x1e0>
 8006c12:	2b80      	cmp	r3, #128	; 0x80
 8006c14:	d814      	bhi.n	8006c40 <UART_SetConfig+0x1f8>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <UART_SetConfig+0x1d8>
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	d008      	beq.n	8006c30 <UART_SetConfig+0x1e8>
 8006c1e:	e00f      	b.n	8006c40 <UART_SetConfig+0x1f8>
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c26:	e082      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2e:	e07e      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c36:	e07a      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3e:	e076      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c46:	e072      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a35      	ldr	r2, [pc, #212]	; (8006d24 <UART_SetConfig+0x2dc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d12a      	bne.n	8006ca8 <UART_SetConfig+0x260>
 8006c52:	4b30      	ldr	r3, [pc, #192]	; (8006d14 <UART_SetConfig+0x2cc>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c60:	d01a      	beq.n	8006c98 <UART_SetConfig+0x250>
 8006c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c66:	d81b      	bhi.n	8006ca0 <UART_SetConfig+0x258>
 8006c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6c:	d00c      	beq.n	8006c88 <UART_SetConfig+0x240>
 8006c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c72:	d815      	bhi.n	8006ca0 <UART_SetConfig+0x258>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <UART_SetConfig+0x238>
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7c:	d008      	beq.n	8006c90 <UART_SetConfig+0x248>
 8006c7e:	e00f      	b.n	8006ca0 <UART_SetConfig+0x258>
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c86:	e052      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e04e      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006c90:	2304      	movs	r3, #4
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c96:	e04a      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006c98:	2308      	movs	r3, #8
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9e:	e046      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca6:	e042      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a17      	ldr	r2, [pc, #92]	; (8006d0c <UART_SetConfig+0x2c4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d13a      	bne.n	8006d28 <UART_SetConfig+0x2e0>
 8006cb2:	4b18      	ldr	r3, [pc, #96]	; (8006d14 <UART_SetConfig+0x2cc>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc0:	d01a      	beq.n	8006cf8 <UART_SetConfig+0x2b0>
 8006cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc6:	d81b      	bhi.n	8006d00 <UART_SetConfig+0x2b8>
 8006cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ccc:	d00c      	beq.n	8006ce8 <UART_SetConfig+0x2a0>
 8006cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd2:	d815      	bhi.n	8006d00 <UART_SetConfig+0x2b8>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <UART_SetConfig+0x298>
 8006cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cdc:	d008      	beq.n	8006cf0 <UART_SetConfig+0x2a8>
 8006cde:	e00f      	b.n	8006d00 <UART_SetConfig+0x2b8>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce6:	e022      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e01e      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf6:	e01a      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfe:	e016      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d06:	e012      	b.n	8006d2e <UART_SetConfig+0x2e6>
 8006d08:	efff69f3 	.word	0xefff69f3
 8006d0c:	40008000 	.word	0x40008000
 8006d10:	40013800 	.word	0x40013800
 8006d14:	40021000 	.word	0x40021000
 8006d18:	40004400 	.word	0x40004400
 8006d1c:	40004800 	.word	0x40004800
 8006d20:	40004c00 	.word	0x40004c00
 8006d24:	40005000 	.word	0x40005000
 8006d28:	2310      	movs	r3, #16
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a9f      	ldr	r2, [pc, #636]	; (8006fb0 <UART_SetConfig+0x568>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d17a      	bne.n	8006e2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d824      	bhi.n	8006d8a <UART_SetConfig+0x342>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x300>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d8b 	.word	0x08006d8b
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d8b 	.word	0x08006d8b
 8006d58:	08006d7b 	.word	0x08006d7b
 8006d5c:	08006d8b 	.word	0x08006d8b
 8006d60:	08006d8b 	.word	0x08006d8b
 8006d64:	08006d8b 	.word	0x08006d8b
 8006d68:	08006d83 	.word	0x08006d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7fe fd66 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 8006d70:	61f8      	str	r0, [r7, #28]
        break;
 8006d72:	e010      	b.n	8006d96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d74:	4b8f      	ldr	r3, [pc, #572]	; (8006fb4 <UART_SetConfig+0x56c>)
 8006d76:	61fb      	str	r3, [r7, #28]
        break;
 8006d78:	e00d      	b.n	8006d96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7a:	f7fe fcc7 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8006d7e:	61f8      	str	r0, [r7, #28]
        break;
 8006d80:	e009      	b.n	8006d96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	61fb      	str	r3, [r7, #28]
        break;
 8006d88:	e005      	b.n	8006d96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80fb 	beq.w	8006f94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d305      	bcc.n	8006dba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d903      	bls.n	8006dc2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dc0:	e0e8      	b.n	8006f94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	461c      	mov	r4, r3
 8006dc8:	4615      	mov	r5, r2
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	022b      	lsls	r3, r5, #8
 8006dd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006dd8:	0222      	lsls	r2, r4, #8
 8006dda:	68f9      	ldr	r1, [r7, #12]
 8006ddc:	6849      	ldr	r1, [r1, #4]
 8006dde:	0849      	lsrs	r1, r1, #1
 8006de0:	2000      	movs	r0, #0
 8006de2:	4688      	mov	r8, r1
 8006de4:	4681      	mov	r9, r0
 8006de6:	eb12 0a08 	adds.w	sl, r2, r8
 8006dea:	eb43 0b09 	adc.w	fp, r3, r9
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	4659      	mov	r1, fp
 8006e00:	f7f9 fed2 	bl	8000ba8 <__aeabi_uldivmod>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4613      	mov	r3, r2
 8006e0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e12:	d308      	bcc.n	8006e26 <UART_SetConfig+0x3de>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1a:	d204      	bcs.n	8006e26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	60da      	str	r2, [r3, #12]
 8006e24:	e0b6      	b.n	8006f94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e2c:	e0b2      	b.n	8006f94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e36:	d15e      	bne.n	8006ef6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d828      	bhi.n	8006e92 <UART_SetConfig+0x44a>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <UART_SetConfig+0x400>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	08006e93 	.word	0x08006e93
 8006e58:	08006e83 	.word	0x08006e83
 8006e5c:	08006e93 	.word	0x08006e93
 8006e60:	08006e93 	.word	0x08006e93
 8006e64:	08006e93 	.word	0x08006e93
 8006e68:	08006e8b 	.word	0x08006e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe fce6 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 8006e70:	61f8      	str	r0, [r7, #28]
        break;
 8006e72:	e014      	b.n	8006e9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e74:	f7fe fcf8 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 8006e78:	61f8      	str	r0, [r7, #28]
        break;
 8006e7a:	e010      	b.n	8006e9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e7c:	4b4d      	ldr	r3, [pc, #308]	; (8006fb4 <UART_SetConfig+0x56c>)
 8006e7e:	61fb      	str	r3, [r7, #28]
        break;
 8006e80:	e00d      	b.n	8006e9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e82:	f7fe fc43 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8006e86:	61f8      	str	r0, [r7, #28]
        break;
 8006e88:	e009      	b.n	8006e9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8e:	61fb      	str	r3, [r7, #28]
        break;
 8006e90:	e005      	b.n	8006e9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d077      	beq.n	8006f94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	005a      	lsls	r2, r3, #1
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	2b0f      	cmp	r3, #15
 8006ebe:	d916      	bls.n	8006eee <UART_SetConfig+0x4a6>
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec6:	d212      	bcs.n	8006eee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f023 030f 	bic.w	r3, r3, #15
 8006ed0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	085b      	lsrs	r3, r3, #1
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	8afb      	ldrh	r3, [r7, #22]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	8afa      	ldrh	r2, [r7, #22]
 8006eea:	60da      	str	r2, [r3, #12]
 8006eec:	e052      	b.n	8006f94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ef4:	e04e      	b.n	8006f94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	d827      	bhi.n	8006f4e <UART_SetConfig+0x506>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x4bc>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f29 	.word	0x08006f29
 8006f08:	08006f31 	.word	0x08006f31
 8006f0c:	08006f39 	.word	0x08006f39
 8006f10:	08006f4f 	.word	0x08006f4f
 8006f14:	08006f3f 	.word	0x08006f3f
 8006f18:	08006f4f 	.word	0x08006f4f
 8006f1c:	08006f4f 	.word	0x08006f4f
 8006f20:	08006f4f 	.word	0x08006f4f
 8006f24:	08006f47 	.word	0x08006f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f28:	f7fe fc88 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 8006f2c:	61f8      	str	r0, [r7, #28]
        break;
 8006f2e:	e014      	b.n	8006f5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f30:	f7fe fc9a 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 8006f34:	61f8      	str	r0, [r7, #28]
        break;
 8006f36:	e010      	b.n	8006f5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f38:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <UART_SetConfig+0x56c>)
 8006f3a:	61fb      	str	r3, [r7, #28]
        break;
 8006f3c:	e00d      	b.n	8006f5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3e:	f7fe fbe5 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8006f42:	61f8      	str	r0, [r7, #28]
        break;
 8006f44:	e009      	b.n	8006f5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f4a:	61fb      	str	r3, [r7, #28]
        break;
 8006f4c:	e005      	b.n	8006f5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f58:	bf00      	nop
    }

    if (pclk != 0U)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d019      	beq.n	8006f94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	085a      	lsrs	r2, r3, #1
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	441a      	add	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d909      	bls.n	8006f8e <UART_SetConfig+0x546>
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d205      	bcs.n	8006f8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60da      	str	r2, [r3, #12]
 8006f8c:	e002      	b.n	8006f94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3728      	adds	r7, #40	; 0x28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fae:	bf00      	nop
 8006fb0:	40008000 	.word	0x40008000
 8006fb4:	00f42400 	.word	0x00f42400

08006fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01a      	beq.n	80070ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b6:	d10a      	bne.n	80070ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	605a      	str	r2, [r3, #4]
  }
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b098      	sub	sp, #96	; 0x60
 8007100:	af02      	add	r7, sp, #8
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800710c:	f7fb fe6c 	bl	8002de8 <HAL_GetTick>
 8007110:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0308 	and.w	r3, r3, #8
 800711c:	2b08      	cmp	r3, #8
 800711e:	d12e      	bne.n	800717e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007128:	2200      	movs	r2, #0
 800712a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f88c 	bl	800724c <UART_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d021      	beq.n	800717e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800714e:	653b      	str	r3, [r7, #80]	; 0x50
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007158:	647b      	str	r3, [r7, #68]	; 0x44
 800715a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800715e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e6      	bne.n	800713a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e062      	b.n	8007244 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b04      	cmp	r3, #4
 800718a:	d149      	bne.n	8007220 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800718c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007194:	2200      	movs	r2, #0
 8007196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f856 	bl	800724c <UART_WaitOnFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d03c      	beq.n	8007220 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	623b      	str	r3, [r7, #32]
   return(result);
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
 80071c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e6      	bne.n	80071a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3308      	adds	r3, #8
 80071de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3308      	adds	r3, #8
 80071f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f8:	61fa      	str	r2, [r7, #28]
 80071fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	69b9      	ldr	r1, [r7, #24]
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	617b      	str	r3, [r7, #20]
   return(result);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e011      	b.n	8007244 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3758      	adds	r7, #88	; 0x58
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725c:	e049      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007264:	d045      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007266:	f7fb fdbf 	bl	8002de8 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	429a      	cmp	r2, r3
 8007274:	d302      	bcc.n	800727c <UART_WaitOnFlagUntilTimeout+0x30>
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e048      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d031      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d110      	bne.n	80072be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2208      	movs	r2, #8
 80072a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f838 	bl	800731a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2208      	movs	r2, #8
 80072ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e029      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072cc:	d111      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f81e 	bl	800731a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e00f      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	429a      	cmp	r2, r3
 8007300:	bf0c      	ite	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	2300      	movne	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	429a      	cmp	r2, r3
 800730e:	d0a6      	beq.n	800725e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800731a:	b480      	push	{r7}
 800731c:	b095      	sub	sp, #84	; 0x54
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007340:	643b      	str	r3, [r7, #64]	; 0x40
 8007342:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e6      	bne.n	8007322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3308      	adds	r3, #8
 800735a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	61fb      	str	r3, [r7, #28]
   return(result);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f023 0301 	bic.w	r3, r3, #1
 800736a:	64bb      	str	r3, [r7, #72]	; 0x48
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800737a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e5      	bne.n	8007354 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738c:	2b01      	cmp	r3, #1
 800738e:	d118      	bne.n	80073c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	60bb      	str	r3, [r7, #8]
   return(result);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f023 0310 	bic.w	r3, r3, #16
 80073a4:	647b      	str	r3, [r7, #68]	; 0x44
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6979      	ldr	r1, [r7, #20]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	613b      	str	r3, [r7, #16]
   return(result);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e6      	bne.n	8007390 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073d6:	bf00      	nop
 80073d8:	3754      	adds	r7, #84	; 0x54
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	4603      	mov	r3, r0
 80073ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80073f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073f4:	2b84      	cmp	r3, #132	; 0x84
 80073f6:	d005      	beq.n	8007404 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80073f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	3303      	adds	r3, #3
 8007402:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007404:	68fb      	ldr	r3, [r7, #12]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007416:	f000 fadf 	bl	80079d8 <vTaskStartScheduler>
  
  return osOK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	bd80      	pop	{r7, pc}

08007420 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	b089      	sub	sp, #36	; 0x24
 8007424:	af04      	add	r7, sp, #16
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d020      	beq.n	8007474 <osThreadCreate+0x54>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01c      	beq.n	8007474 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685c      	ldr	r4, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691e      	ldr	r6, [r3, #16]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff ffc8 	bl	80073e2 <makeFreeRtosPriority>
 8007452:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800745c:	9202      	str	r2, [sp, #8]
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	9100      	str	r1, [sp, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	4632      	mov	r2, r6
 8007466:	4629      	mov	r1, r5
 8007468:	4620      	mov	r0, r4
 800746a:	f000 f8ed 	bl	8007648 <xTaskCreateStatic>
 800746e:	4603      	mov	r3, r0
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e01c      	b.n	80074ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685c      	ldr	r4, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007480:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff ffaa 	bl	80073e2 <makeFreeRtosPriority>
 800748e:	4602      	mov	r2, r0
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	9200      	str	r2, [sp, #0]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	4632      	mov	r2, r6
 800749c:	4629      	mov	r1, r5
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 f92f 	bl	8007702 <xTaskCreate>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d001      	beq.n	80074ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e000      	b.n	80074b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80074ae:	68fb      	ldr	r3, [r7, #12]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <osDelay+0x16>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	e000      	b.n	80074d0 <osDelay+0x18>
 80074ce:	2301      	movs	r3, #1
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fa4d 	bl	8007970 <vTaskDelay>
  
  return osOK;
 80074d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f103 0208 	add.w	r2, r3, #8
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f103 0208 	add.w	r2, r3, #8
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f103 0208 	add.w	r2, r3, #8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	601a      	str	r2, [r3, #0]
}
 8007576:	bf00      	nop
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007598:	d103      	bne.n	80075a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e00c      	b.n	80075bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3308      	adds	r3, #8
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	e002      	b.n	80075b0 <vListInsert+0x2e>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d2f6      	bcs.n	80075aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	601a      	str	r2, [r3, #0]
}
 80075e8:	bf00      	nop
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	6892      	ldr	r2, [r2, #8]
 800760a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6852      	ldr	r2, [r2, #4]
 8007614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d103      	bne.n	8007628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	1e5a      	subs	r2, r3, #1
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af04      	add	r7, sp, #16
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <xTaskCreateStatic+0x46>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800768e:	2354      	movs	r3, #84	; 0x54
 8007690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b54      	cmp	r3, #84	; 0x54
 8007696:	d00a      	beq.n	80076ae <xTaskCreateStatic+0x66>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	61bb      	str	r3, [r7, #24]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d01e      	beq.n	80076f4 <xTaskCreateStatic+0xac>
 80076b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01b      	beq.n	80076f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076ce:	2300      	movs	r3, #0
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	9302      	str	r3, [sp, #8]
 80076d6:	f107 0314 	add.w	r3, r7, #20
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 f850 	bl	800778c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ee:	f000 f8d5 	bl	800789c <prvAddNewTaskToReadyList>
 80076f2:	e001      	b.n	80076f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076f8:	697b      	ldr	r3, [r7, #20]
	}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007702:	b580      	push	{r7, lr}
 8007704:	b08c      	sub	sp, #48	; 0x30
 8007706:	af04      	add	r7, sp, #16
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fec6 	bl	80084a8 <pvPortMalloc>
 800771c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00e      	beq.n	8007742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007724:	2054      	movs	r0, #84	; 0x54
 8007726:	f000 febf 	bl	80084a8 <pvPortMalloc>
 800772a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
 8007738:	e005      	b.n	8007746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800773a:	6978      	ldr	r0, [r7, #20]
 800773c:	f000 ff80 	bl	8008640 <vPortFree>
 8007740:	e001      	b.n	8007746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	2300      	movs	r3, #0
 8007758:	9303      	str	r3, [sp, #12]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	9302      	str	r3, [sp, #8]
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f80e 	bl	800778c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007770:	69f8      	ldr	r0, [r7, #28]
 8007772:	f000 f893 	bl	800789c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007776:	2301      	movs	r3, #1
 8007778:	61bb      	str	r3, [r7, #24]
 800777a:	e002      	b.n	8007782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800777c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007782:	69bb      	ldr	r3, [r7, #24]
	}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077a4:	3b01      	subs	r3, #1
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	f023 0307 	bic.w	r3, r3, #7
 80077b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	617b      	str	r3, [r7, #20]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01f      	beq.n	800781a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077da:	2300      	movs	r3, #0
 80077dc:	61fb      	str	r3, [r7, #28]
 80077de:	e012      	b.n	8007806 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	4413      	add	r3, r2
 80077e6:	7819      	ldrb	r1, [r3, #0]
 80077e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	3334      	adds	r3, #52	; 0x34
 80077f0:	460a      	mov	r2, r1
 80077f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	4413      	add	r3, r2
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d006      	beq.n	800780e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	3301      	adds	r3, #1
 8007804:	61fb      	str	r3, [r7, #28]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	2b0f      	cmp	r3, #15
 800780a:	d9e9      	bls.n	80077e0 <prvInitialiseNewTask+0x54>
 800780c:	e000      	b.n	8007810 <prvInitialiseNewTask+0x84>
			{
				break;
 800780e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007818:	e003      	b.n	8007822 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	2b06      	cmp	r3, #6
 8007826:	d901      	bls.n	800782c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007828:	2306      	movs	r3, #6
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007830:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007836:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	2200      	movs	r2, #0
 800783c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	3304      	adds	r3, #4
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff fe6c 	bl	8007520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	3318      	adds	r3, #24
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fe67 	bl	8007520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007856:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	f1c3 0207 	rsb	r2, r3, #7
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007866:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	2200      	movs	r2, #0
 800786c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	68f9      	ldr	r1, [r7, #12]
 800787a:	69b8      	ldr	r0, [r7, #24]
 800787c:	f000 fc06 	bl	800808c <pxPortInitialiseStack>
 8007880:	4602      	mov	r2, r0
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007892:	bf00      	nop
 8007894:	3720      	adds	r7, #32
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078a4:	f000 fd1e 	bl	80082e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078a8:	4b2a      	ldr	r3, [pc, #168]	; (8007954 <prvAddNewTaskToReadyList+0xb8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	4a29      	ldr	r2, [pc, #164]	; (8007954 <prvAddNewTaskToReadyList+0xb8>)
 80078b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078b2:	4b29      	ldr	r3, [pc, #164]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078ba:	4a27      	ldr	r2, [pc, #156]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078c0:	4b24      	ldr	r3, [pc, #144]	; (8007954 <prvAddNewTaskToReadyList+0xb8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d110      	bne.n	80078ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078c8:	f000 fabc 	bl	8007e44 <prvInitialiseTaskLists>
 80078cc:	e00d      	b.n	80078ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ce:	4b23      	ldr	r3, [pc, #140]	; (800795c <prvAddNewTaskToReadyList+0xc0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078d6:	4b20      	ldr	r3, [pc, #128]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d802      	bhi.n	80078ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078e4:	4a1c      	ldr	r2, [pc, #112]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078ea:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <prvAddNewTaskToReadyList+0xc4>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3301      	adds	r3, #1
 80078f0:	4a1b      	ldr	r2, [pc, #108]	; (8007960 <prvAddNewTaskToReadyList+0xc4>)
 80078f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	2201      	movs	r2, #1
 80078fa:	409a      	lsls	r2, r3
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <prvAddNewTaskToReadyList+0xc8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4313      	orrs	r3, r2
 8007902:	4a18      	ldr	r2, [pc, #96]	; (8007964 <prvAddNewTaskToReadyList+0xc8>)
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4a15      	ldr	r2, [pc, #84]	; (8007968 <prvAddNewTaskToReadyList+0xcc>)
 8007914:	441a      	add	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3304      	adds	r3, #4
 800791a:	4619      	mov	r1, r3
 800791c:	4610      	mov	r0, r2
 800791e:	f7ff fe0c 	bl	800753a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007922:	f000 fd0f 	bl	8008344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <prvAddNewTaskToReadyList+0xc0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	429a      	cmp	r2, r3
 800793a:	d207      	bcs.n	800794c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800793c:	4b0b      	ldr	r3, [pc, #44]	; (800796c <prvAddNewTaskToReadyList+0xd0>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	2000083c 	.word	0x2000083c
 8007958:	2000073c 	.word	0x2000073c
 800795c:	20000848 	.word	0x20000848
 8007960:	20000858 	.word	0x20000858
 8007964:	20000844 	.word	0x20000844
 8007968:	20000740 	.word	0x20000740
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007978:	2300      	movs	r3, #0
 800797a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d017      	beq.n	80079b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007982:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <vTaskDelay+0x60>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <vTaskDelay+0x30>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	60bb      	str	r3, [r7, #8]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079a0:	f000 f87a 	bl	8007a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079a4:	2100      	movs	r1, #0
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb0a 	bl	8007fc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079ac:	f000 f882 	bl	8007ab4 <xTaskResumeAll>
 80079b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d107      	bne.n	80079c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079b8:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <vTaskDelay+0x64>)
 80079ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079c8:	bf00      	nop
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000864 	.word	0x20000864
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08a      	sub	sp, #40	; 0x28
 80079dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079e6:	463a      	mov	r2, r7
 80079e8:	1d39      	adds	r1, r7, #4
 80079ea:	f107 0308 	add.w	r3, r7, #8
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7f9 fa58 	bl	8000ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	9202      	str	r2, [sp, #8]
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	460a      	mov	r2, r1
 8007a06:	491e      	ldr	r1, [pc, #120]	; (8007a80 <vTaskStartScheduler+0xa8>)
 8007a08:	481e      	ldr	r0, [pc, #120]	; (8007a84 <vTaskStartScheduler+0xac>)
 8007a0a:	f7ff fe1d 	bl	8007648 <xTaskCreateStatic>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <vTaskStartScheduler+0xb0>)
 8007a12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a14:	4b1c      	ldr	r3, [pc, #112]	; (8007a88 <vTaskStartScheduler+0xb0>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	e001      	b.n	8007a26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d116      	bne.n	8007a5a <vTaskStartScheduler+0x82>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	613b      	str	r3, [r7, #16]
}
 8007a3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a40:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <vTaskStartScheduler+0xb4>)
 8007a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a48:	4b11      	ldr	r3, [pc, #68]	; (8007a90 <vTaskStartScheduler+0xb8>)
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a4e:	4b11      	ldr	r3, [pc, #68]	; (8007a94 <vTaskStartScheduler+0xbc>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a54:	f000 fba4 	bl	80081a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a58:	e00e      	b.n	8007a78 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a60:	d10a      	bne.n	8007a78 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	60fb      	str	r3, [r7, #12]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <vTaskStartScheduler+0x9e>
}
 8007a78:	bf00      	nop
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	0800b684 	.word	0x0800b684
 8007a84:	08007e15 	.word	0x08007e15
 8007a88:	20000860 	.word	0x20000860
 8007a8c:	2000085c 	.word	0x2000085c
 8007a90:	20000848 	.word	0x20000848
 8007a94:	20000840 	.word	0x20000840

08007a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a9c:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <vTaskSuspendAll+0x18>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	4a03      	ldr	r2, [pc, #12]	; (8007ab0 <vTaskSuspendAll+0x18>)
 8007aa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007aa6:	bf00      	nop
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	20000864 	.word	0x20000864

08007ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ac2:	4b41      	ldr	r3, [pc, #260]	; (8007bc8 <xTaskResumeAll+0x114>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	603b      	str	r3, [r7, #0]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ae0:	f000 fc00 	bl	80082e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ae4:	4b38      	ldr	r3, [pc, #224]	; (8007bc8 <xTaskResumeAll+0x114>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	4a37      	ldr	r2, [pc, #220]	; (8007bc8 <xTaskResumeAll+0x114>)
 8007aec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aee:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <xTaskResumeAll+0x114>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d161      	bne.n	8007bba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007af6:	4b35      	ldr	r3, [pc, #212]	; (8007bcc <xTaskResumeAll+0x118>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d05d      	beq.n	8007bba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007afe:	e02e      	b.n	8007b5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b00:	4b33      	ldr	r3, [pc, #204]	; (8007bd0 <xTaskResumeAll+0x11c>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3318      	adds	r3, #24
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fd71 	bl	80075f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fd6c 	bl	80075f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	2201      	movs	r2, #1
 8007b22:	409a      	lsls	r2, r3
 8007b24:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <xTaskResumeAll+0x120>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <xTaskResumeAll+0x120>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4a27      	ldr	r2, [pc, #156]	; (8007bd8 <xTaskResumeAll+0x124>)
 8007b3c:	441a      	add	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7ff fcf8 	bl	800753a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4e:	4b23      	ldr	r3, [pc, #140]	; (8007bdc <xTaskResumeAll+0x128>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d302      	bcc.n	8007b5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b58:	4b21      	ldr	r3, [pc, #132]	; (8007be0 <xTaskResumeAll+0x12c>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b5e:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <xTaskResumeAll+0x11c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1cc      	bne.n	8007b00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b6c:	f000 fa08 	bl	8007f80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b70:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <xTaskResumeAll+0x130>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b7c:	f000 f836 	bl	8007bec <xTaskIncrementTick>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d002      	beq.n	8007b8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b86:	4b16      	ldr	r3, [pc, #88]	; (8007be0 <xTaskResumeAll+0x12c>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1f1      	bne.n	8007b7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007b98:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <xTaskResumeAll+0x130>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b9e:	4b10      	ldr	r3, [pc, #64]	; (8007be0 <xTaskResumeAll+0x12c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <xTaskResumeAll+0x134>)
 8007bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bba:	f000 fbc3 	bl	8008344 <vPortExitCritical>

	return xAlreadyYielded;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20000864 	.word	0x20000864
 8007bcc:	2000083c 	.word	0x2000083c
 8007bd0:	200007fc 	.word	0x200007fc
 8007bd4:	20000844 	.word	0x20000844
 8007bd8:	20000740 	.word	0x20000740
 8007bdc:	2000073c 	.word	0x2000073c
 8007be0:	20000850 	.word	0x20000850
 8007be4:	2000084c 	.word	0x2000084c
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf6:	4b4e      	ldr	r3, [pc, #312]	; (8007d30 <xTaskIncrementTick+0x144>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f040 808e 	bne.w	8007d1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c00:	4b4c      	ldr	r3, [pc, #304]	; (8007d34 <xTaskIncrementTick+0x148>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c08:	4a4a      	ldr	r2, [pc, #296]	; (8007d34 <xTaskIncrementTick+0x148>)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d120      	bne.n	8007c56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c14:	4b48      	ldr	r3, [pc, #288]	; (8007d38 <xTaskIncrementTick+0x14c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	603b      	str	r3, [r7, #0]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xTaskIncrementTick+0x46>
 8007c34:	4b40      	ldr	r3, [pc, #256]	; (8007d38 <xTaskIncrementTick+0x14c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	4b40      	ldr	r3, [pc, #256]	; (8007d3c <xTaskIncrementTick+0x150>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a3e      	ldr	r2, [pc, #248]	; (8007d38 <xTaskIncrementTick+0x14c>)
 8007c40:	6013      	str	r3, [r2, #0]
 8007c42:	4a3e      	ldr	r2, [pc, #248]	; (8007d3c <xTaskIncrementTick+0x150>)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	4b3d      	ldr	r3, [pc, #244]	; (8007d40 <xTaskIncrementTick+0x154>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	4a3c      	ldr	r2, [pc, #240]	; (8007d40 <xTaskIncrementTick+0x154>)
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	f000 f995 	bl	8007f80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c56:	4b3b      	ldr	r3, [pc, #236]	; (8007d44 <xTaskIncrementTick+0x158>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d348      	bcc.n	8007cf2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c60:	4b35      	ldr	r3, [pc, #212]	; (8007d38 <xTaskIncrementTick+0x14c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d104      	bne.n	8007c74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6a:	4b36      	ldr	r3, [pc, #216]	; (8007d44 <xTaskIncrementTick+0x158>)
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c70:	601a      	str	r2, [r3, #0]
					break;
 8007c72:	e03e      	b.n	8007cf2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c74:	4b30      	ldr	r3, [pc, #192]	; (8007d38 <xTaskIncrementTick+0x14c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d203      	bcs.n	8007c94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c8c:	4a2d      	ldr	r2, [pc, #180]	; (8007d44 <xTaskIncrementTick+0x158>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c92:	e02e      	b.n	8007cf2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	3304      	adds	r3, #4
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fcab 	bl	80075f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d004      	beq.n	8007cb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	3318      	adds	r3, #24
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fca2 	bl	80075f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	409a      	lsls	r2, r3
 8007cb8:	4b23      	ldr	r3, [pc, #140]	; (8007d48 <xTaskIncrementTick+0x15c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	4a22      	ldr	r2, [pc, #136]	; (8007d48 <xTaskIncrementTick+0x15c>)
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4a1f      	ldr	r2, [pc, #124]	; (8007d4c <xTaskIncrementTick+0x160>)
 8007cd0:	441a      	add	r2, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f7ff fc2e 	bl	800753a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce2:	4b1b      	ldr	r3, [pc, #108]	; (8007d50 <xTaskIncrementTick+0x164>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d3b9      	bcc.n	8007c60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007cec:	2301      	movs	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cf0:	e7b6      	b.n	8007c60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cf2:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <xTaskIncrementTick+0x164>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf8:	4914      	ldr	r1, [pc, #80]	; (8007d4c <xTaskIncrementTick+0x160>)
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d901      	bls.n	8007d0e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d0e:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <xTaskIncrementTick+0x168>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d16:	2301      	movs	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	e004      	b.n	8007d26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d1c:	4b0e      	ldr	r3, [pc, #56]	; (8007d58 <xTaskIncrementTick+0x16c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	4a0d      	ldr	r2, [pc, #52]	; (8007d58 <xTaskIncrementTick+0x16c>)
 8007d24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d26:	697b      	ldr	r3, [r7, #20]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20000864 	.word	0x20000864
 8007d34:	20000840 	.word	0x20000840
 8007d38:	200007f4 	.word	0x200007f4
 8007d3c:	200007f8 	.word	0x200007f8
 8007d40:	20000854 	.word	0x20000854
 8007d44:	2000085c 	.word	0x2000085c
 8007d48:	20000844 	.word	0x20000844
 8007d4c:	20000740 	.word	0x20000740
 8007d50:	2000073c 	.word	0x2000073c
 8007d54:	20000850 	.word	0x20000850
 8007d58:	2000084c 	.word	0x2000084c

08007d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d62:	4b27      	ldr	r3, [pc, #156]	; (8007e00 <vTaskSwitchContext+0xa4>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d6a:	4b26      	ldr	r3, [pc, #152]	; (8007e04 <vTaskSwitchContext+0xa8>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d70:	e03f      	b.n	8007df2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <vTaskSwitchContext+0xa8>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d78:	4b23      	ldr	r3, [pc, #140]	; (8007e08 <vTaskSwitchContext+0xac>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	fab3 f383 	clz	r3, r3
 8007d84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	f1c3 031f 	rsb	r3, r3, #31
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	491f      	ldr	r1, [pc, #124]	; (8007e0c <vTaskSwitchContext+0xb0>)
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	607b      	str	r3, [r7, #4]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <vTaskSwitchContext+0x5a>
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4a12      	ldr	r2, [pc, #72]	; (8007e0c <vTaskSwitchContext+0xb0>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d104      	bne.n	8007de8 <vTaskSwitchContext+0x8c>
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <vTaskSwitchContext+0xb4>)
 8007df0:	6013      	str	r3, [r2, #0]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20000864 	.word	0x20000864
 8007e04:	20000850 	.word	0x20000850
 8007e08:	20000844 	.word	0x20000844
 8007e0c:	20000740 	.word	0x20000740
 8007e10:	2000073c 	.word	0x2000073c

08007e14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e1c:	f000 f852 	bl	8007ec4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e20:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <prvIdleTask+0x28>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d9f9      	bls.n	8007e1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e28:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <prvIdleTask+0x2c>)
 8007e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e38:	e7f0      	b.n	8007e1c <prvIdleTask+0x8>
 8007e3a:	bf00      	nop
 8007e3c:	20000740 	.word	0x20000740
 8007e40:	e000ed04 	.word	0xe000ed04

08007e44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	607b      	str	r3, [r7, #4]
 8007e4e:	e00c      	b.n	8007e6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4a12      	ldr	r2, [pc, #72]	; (8007ea4 <prvInitialiseTaskLists+0x60>)
 8007e5c:	4413      	add	r3, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fb3e 	bl	80074e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3301      	adds	r3, #1
 8007e68:	607b      	str	r3, [r7, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b06      	cmp	r3, #6
 8007e6e:	d9ef      	bls.n	8007e50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e70:	480d      	ldr	r0, [pc, #52]	; (8007ea8 <prvInitialiseTaskLists+0x64>)
 8007e72:	f7ff fb35 	bl	80074e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e76:	480d      	ldr	r0, [pc, #52]	; (8007eac <prvInitialiseTaskLists+0x68>)
 8007e78:	f7ff fb32 	bl	80074e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e7c:	480c      	ldr	r0, [pc, #48]	; (8007eb0 <prvInitialiseTaskLists+0x6c>)
 8007e7e:	f7ff fb2f 	bl	80074e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e82:	480c      	ldr	r0, [pc, #48]	; (8007eb4 <prvInitialiseTaskLists+0x70>)
 8007e84:	f7ff fb2c 	bl	80074e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e88:	480b      	ldr	r0, [pc, #44]	; (8007eb8 <prvInitialiseTaskLists+0x74>)
 8007e8a:	f7ff fb29 	bl	80074e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e8e:	4b0b      	ldr	r3, [pc, #44]	; (8007ebc <prvInitialiseTaskLists+0x78>)
 8007e90:	4a05      	ldr	r2, [pc, #20]	; (8007ea8 <prvInitialiseTaskLists+0x64>)
 8007e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e94:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <prvInitialiseTaskLists+0x7c>)
 8007e96:	4a05      	ldr	r2, [pc, #20]	; (8007eac <prvInitialiseTaskLists+0x68>)
 8007e98:	601a      	str	r2, [r3, #0]
}
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000740 	.word	0x20000740
 8007ea8:	200007cc 	.word	0x200007cc
 8007eac:	200007e0 	.word	0x200007e0
 8007eb0:	200007fc 	.word	0x200007fc
 8007eb4:	20000810 	.word	0x20000810
 8007eb8:	20000828 	.word	0x20000828
 8007ebc:	200007f4 	.word	0x200007f4
 8007ec0:	200007f8 	.word	0x200007f8

08007ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eca:	e019      	b.n	8007f00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ecc:	f000 fa0a 	bl	80082e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed0:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <prvCheckTasksWaitingTermination+0x50>)
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fb89 	bl	80075f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ee2:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <prvCheckTasksWaitingTermination+0x54>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	4a0b      	ldr	r2, [pc, #44]	; (8007f18 <prvCheckTasksWaitingTermination+0x54>)
 8007eea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <prvCheckTasksWaitingTermination+0x58>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	4a0a      	ldr	r2, [pc, #40]	; (8007f1c <prvCheckTasksWaitingTermination+0x58>)
 8007ef4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ef6:	f000 fa25 	bl	8008344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f810 	bl	8007f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f00:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <prvCheckTasksWaitingTermination+0x58>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e1      	bne.n	8007ecc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000810 	.word	0x20000810
 8007f18:	2000083c 	.word	0x2000083c
 8007f1c:	20000824 	.word	0x20000824

08007f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d108      	bne.n	8007f44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fb82 	bl	8008640 <vPortFree>
				vPortFree( pxTCB );
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fb7f 	bl	8008640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f42:	e018      	b.n	8007f76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d103      	bne.n	8007f56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fb76 	bl	8008640 <vPortFree>
	}
 8007f54:	e00f      	b.n	8007f76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d00a      	beq.n	8007f76 <prvDeleteTCB+0x56>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	60fb      	str	r3, [r7, #12]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <prvDeleteTCB+0x54>
	}
 8007f76:	bf00      	nop
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <prvResetNextTaskUnblockTime+0x38>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d104      	bne.n	8007f9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f90:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <prvResetNextTaskUnblockTime+0x3c>)
 8007f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f98:	e008      	b.n	8007fac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <prvResetNextTaskUnblockTime+0x38>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4a04      	ldr	r2, [pc, #16]	; (8007fbc <prvResetNextTaskUnblockTime+0x3c>)
 8007faa:	6013      	str	r3, [r2, #0]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	200007f4 	.word	0x200007f4
 8007fbc:	2000085c 	.word	0x2000085c

08007fc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fca:	4b29      	ldr	r3, [pc, #164]	; (8008070 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fd0:	4b28      	ldr	r3, [pc, #160]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fb0c 	bl	80075f4 <uxListRemove>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10b      	bne.n	8007ffa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fe2:	4b24      	ldr	r3, [pc, #144]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	2201      	movs	r2, #1
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	43da      	mvns	r2, r3
 8007ff0:	4b21      	ldr	r3, [pc, #132]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	4a20      	ldr	r2, [pc, #128]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ff8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008000:	d10a      	bne.n	8008018 <prvAddCurrentTaskToDelayedList+0x58>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008008:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3304      	adds	r3, #4
 800800e:	4619      	mov	r1, r3
 8008010:	481a      	ldr	r0, [pc, #104]	; (800807c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008012:	f7ff fa92 	bl	800753a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008016:	e026      	b.n	8008066 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008020:	4b14      	ldr	r3, [pc, #80]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	429a      	cmp	r2, r3
 800802e:	d209      	bcs.n	8008044 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008030:	4b13      	ldr	r3, [pc, #76]	; (8008080 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3304      	adds	r3, #4
 800803a:	4619      	mov	r1, r3
 800803c:	4610      	mov	r0, r2
 800803e:	f7ff faa0 	bl	8007582 <vListInsert>
}
 8008042:	e010      	b.n	8008066 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008044:	4b0f      	ldr	r3, [pc, #60]	; (8008084 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3304      	adds	r3, #4
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f7ff fa96 	bl	8007582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	429a      	cmp	r2, r3
 800805e:	d202      	bcs.n	8008066 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008060:	4a09      	ldr	r2, [pc, #36]	; (8008088 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6013      	str	r3, [r2, #0]
}
 8008066:	bf00      	nop
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000840 	.word	0x20000840
 8008074:	2000073c 	.word	0x2000073c
 8008078:	20000844 	.word	0x20000844
 800807c:	20000828 	.word	0x20000828
 8008080:	200007f8 	.word	0x200007f8
 8008084:	200007f4 	.word	0x200007f4
 8008088:	2000085c 	.word	0x2000085c

0800808c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3b04      	subs	r3, #4
 800809c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3b04      	subs	r3, #4
 80080aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f023 0201 	bic.w	r2, r3, #1
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3b04      	subs	r3, #4
 80080ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080bc:	4a0c      	ldr	r2, [pc, #48]	; (80080f0 <pxPortInitialiseStack+0x64>)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3b14      	subs	r3, #20
 80080c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3b04      	subs	r3, #4
 80080d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f06f 0202 	mvn.w	r2, #2
 80080da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3b20      	subs	r3, #32
 80080e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080e2:	68fb      	ldr	r3, [r7, #12]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	080080f5 	.word	0x080080f5

080080f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080fe:	4b12      	ldr	r3, [pc, #72]	; (8008148 <prvTaskExitError+0x54>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008106:	d00a      	beq.n	800811e <prvTaskExitError+0x2a>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	60fb      	str	r3, [r7, #12]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <prvTaskExitError+0x28>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	60bb      	str	r3, [r7, #8]
}
 8008130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008132:	bf00      	nop
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0fc      	beq.n	8008134 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	2000008c 	.word	0x2000008c
 800814c:	00000000 	.word	0x00000000

08008150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <pxCurrentTCBConst2>)
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	6808      	ldr	r0, [r1, #0]
 8008156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	f380 8809 	msr	PSP, r0
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	4770      	bx	lr
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst2>:
 8008170:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008178:	4808      	ldr	r0, [pc, #32]	; (800819c <prvPortStartFirstTask+0x24>)
 800817a:	6800      	ldr	r0, [r0, #0]
 800817c:	6800      	ldr	r0, [r0, #0]
 800817e:	f380 8808 	msr	MSP, r0
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8814 	msr	CONTROL, r0
 800818a:	b662      	cpsie	i
 800818c:	b661      	cpsie	f
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	df00      	svc	0
 8008198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800819a:	bf00      	nop
 800819c:	e000ed08 	.word	0xe000ed08

080081a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081a6:	4b46      	ldr	r3, [pc, #280]	; (80082c0 <xPortStartScheduler+0x120>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a46      	ldr	r2, [pc, #280]	; (80082c4 <xPortStartScheduler+0x124>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10a      	bne.n	80081c6 <xPortStartScheduler+0x26>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081c6:	4b3e      	ldr	r3, [pc, #248]	; (80082c0 <xPortStartScheduler+0x120>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a3f      	ldr	r2, [pc, #252]	; (80082c8 <xPortStartScheduler+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10a      	bne.n	80081e6 <xPortStartScheduler+0x46>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	60fb      	str	r3, [r7, #12]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081e6:	4b39      	ldr	r3, [pc, #228]	; (80082cc <xPortStartScheduler+0x12c>)
 80081e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	22ff      	movs	r2, #255	; 0xff
 80081f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008208:	b2da      	uxtb	r2, r3
 800820a:	4b31      	ldr	r3, [pc, #196]	; (80082d0 <xPortStartScheduler+0x130>)
 800820c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800820e:	4b31      	ldr	r3, [pc, #196]	; (80082d4 <xPortStartScheduler+0x134>)
 8008210:	2207      	movs	r2, #7
 8008212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008214:	e009      	b.n	800822a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008216:	4b2f      	ldr	r3, [pc, #188]	; (80082d4 <xPortStartScheduler+0x134>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3b01      	subs	r3, #1
 800821c:	4a2d      	ldr	r2, [pc, #180]	; (80082d4 <xPortStartScheduler+0x134>)
 800821e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	d0ef      	beq.n	8008216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008236:	4b27      	ldr	r3, [pc, #156]	; (80082d4 <xPortStartScheduler+0x134>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f1c3 0307 	rsb	r3, r3, #7
 800823e:	2b04      	cmp	r3, #4
 8008240:	d00a      	beq.n	8008258 <xPortStartScheduler+0xb8>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	60bb      	str	r3, [r7, #8]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008258:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <xPortStartScheduler+0x134>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	4a1d      	ldr	r2, [pc, #116]	; (80082d4 <xPortStartScheduler+0x134>)
 8008260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008262:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <xPortStartScheduler+0x134>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800826a:	4a1a      	ldr	r2, [pc, #104]	; (80082d4 <xPortStartScheduler+0x134>)
 800826c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	b2da      	uxtb	r2, r3
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <xPortStartScheduler+0x138>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a17      	ldr	r2, [pc, #92]	; (80082d8 <xPortStartScheduler+0x138>)
 800827c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008282:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <xPortStartScheduler+0x138>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a14      	ldr	r2, [pc, #80]	; (80082d8 <xPortStartScheduler+0x138>)
 8008288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800828c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800828e:	f000 f8dd 	bl	800844c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008292:	4b12      	ldr	r3, [pc, #72]	; (80082dc <xPortStartScheduler+0x13c>)
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008298:	f000 f8fc 	bl	8008494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800829c:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <xPortStartScheduler+0x140>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a0f      	ldr	r2, [pc, #60]	; (80082e0 <xPortStartScheduler+0x140>)
 80082a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082a8:	f7ff ff66 	bl	8008178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082ac:	f7ff fd56 	bl	8007d5c <vTaskSwitchContext>
	prvTaskExitError();
 80082b0:	f7ff ff20 	bl	80080f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	e000ed00 	.word	0xe000ed00
 80082c4:	410fc271 	.word	0x410fc271
 80082c8:	410fc270 	.word	0x410fc270
 80082cc:	e000e400 	.word	0xe000e400
 80082d0:	20000868 	.word	0x20000868
 80082d4:	2000086c 	.word	0x2000086c
 80082d8:	e000ed20 	.word	0xe000ed20
 80082dc:	2000008c 	.word	0x2000008c
 80082e0:	e000ef34 	.word	0xe000ef34

080082e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	607b      	str	r3, [r7, #4]
}
 80082fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <vPortEnterCritical+0x58>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3301      	adds	r3, #1
 8008304:	4a0d      	ldr	r2, [pc, #52]	; (800833c <vPortEnterCritical+0x58>)
 8008306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008308:	4b0c      	ldr	r3, [pc, #48]	; (800833c <vPortEnterCritical+0x58>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d10f      	bne.n	8008330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008310:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <vPortEnterCritical+0x5c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <vPortEnterCritical+0x4c>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	603b      	str	r3, [r7, #0]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <vPortEnterCritical+0x4a>
	}
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	2000008c 	.word	0x2000008c
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800834a:	4b12      	ldr	r3, [pc, #72]	; (8008394 <vPortExitCritical+0x50>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <vPortExitCritical+0x24>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	607b      	str	r3, [r7, #4]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <vPortExitCritical+0x50>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3b01      	subs	r3, #1
 800836e:	4a09      	ldr	r2, [pc, #36]	; (8008394 <vPortExitCritical+0x50>)
 8008370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008372:	4b08      	ldr	r3, [pc, #32]	; (8008394 <vPortExitCritical+0x50>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <vPortExitCritical+0x42>
 800837a:	2300      	movs	r3, #0
 800837c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	2000008c 	.word	0x2000008c
	...

080083a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083a0:	f3ef 8009 	mrs	r0, PSP
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <pxCurrentTCBConst>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	f01e 0f10 	tst.w	lr, #16
 80083b0:	bf08      	it	eq
 80083b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	6010      	str	r0, [r2, #0]
 80083bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083c4:	f380 8811 	msr	BASEPRI, r0
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f7ff fcc4 	bl	8007d5c <vTaskSwitchContext>
 80083d4:	f04f 0000 	mov.w	r0, #0
 80083d8:	f380 8811 	msr	BASEPRI, r0
 80083dc:	bc09      	pop	{r0, r3}
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	6808      	ldr	r0, [r1, #0]
 80083e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e6:	f01e 0f10 	tst.w	lr, #16
 80083ea:	bf08      	it	eq
 80083ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083f0:	f380 8809 	msr	PSP, r0
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	f3af 8000 	nop.w

08008400 <pxCurrentTCBConst>:
 8008400:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008422:	f7ff fbe3 	bl	8007bec <xTaskIncrementTick>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800842c:	4b06      	ldr	r3, [pc, #24]	; (8008448 <SysTick_Handler+0x40>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	2300      	movs	r3, #0
 8008436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f383 8811 	msr	BASEPRI, r3
}
 800843e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008456:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <vPortSetupTimerInterrupt+0x38>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <vPortSetupTimerInterrupt+0x3c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <vPortSetupTimerInterrupt+0x40>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	099b      	lsrs	r3, r3, #6
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <vPortSetupTimerInterrupt+0x44>)
 800846a:	3b01      	subs	r3, #1
 800846c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800846e:	4b04      	ldr	r3, [pc, #16]	; (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008470:	2207      	movs	r2, #7
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	e000e010 	.word	0xe000e010
 8008484:	e000e018 	.word	0xe000e018
 8008488:	20000080 	.word	0x20000080
 800848c:	10624dd3 	.word	0x10624dd3
 8008490:	e000e014 	.word	0xe000e014

08008494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084a4 <vPortEnableVFP+0x10>
 8008498:	6801      	ldr	r1, [r0, #0]
 800849a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800849e:	6001      	str	r1, [r0, #0]
 80084a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084a2:	bf00      	nop
 80084a4:	e000ed88 	.word	0xe000ed88

080084a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084b4:	f7ff faf0 	bl	8007a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084b8:	4b5b      	ldr	r3, [pc, #364]	; (8008628 <pvPortMalloc+0x180>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084c0:	f000 f920 	bl	8008704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084c4:	4b59      	ldr	r3, [pc, #356]	; (800862c <pvPortMalloc+0x184>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 8093 	bne.w	80085f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01d      	beq.n	8008514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084d8:	2208      	movs	r2, #8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4413      	add	r3, r2
 80084de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d014      	beq.n	8008514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f023 0307 	bic.w	r3, r3, #7
 80084f0:	3308      	adds	r3, #8
 80084f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <pvPortMalloc+0x6c>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	617b      	str	r3, [r7, #20]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d06e      	beq.n	80085f8 <pvPortMalloc+0x150>
 800851a:	4b45      	ldr	r3, [pc, #276]	; (8008630 <pvPortMalloc+0x188>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d869      	bhi.n	80085f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008524:	4b43      	ldr	r3, [pc, #268]	; (8008634 <pvPortMalloc+0x18c>)
 8008526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008528:	4b42      	ldr	r3, [pc, #264]	; (8008634 <pvPortMalloc+0x18c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852e:	e004      	b.n	800853a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d903      	bls.n	800854c <pvPortMalloc+0xa4>
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f1      	bne.n	8008530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800854c:	4b36      	ldr	r3, [pc, #216]	; (8008628 <pvPortMalloc+0x180>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008552:	429a      	cmp	r2, r3
 8008554:	d050      	beq.n	80085f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2208      	movs	r2, #8
 800855c:	4413      	add	r3, r2
 800855e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	2308      	movs	r3, #8
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	429a      	cmp	r2, r3
 8008576:	d91f      	bls.n	80085b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <pvPortMalloc+0xf8>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	613b      	str	r3, [r7, #16]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085b2:	69b8      	ldr	r0, [r7, #24]
 80085b4:	f000 f908 	bl	80087c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085b8:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <pvPortMalloc+0x188>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	4a1b      	ldr	r2, [pc, #108]	; (8008630 <pvPortMalloc+0x188>)
 80085c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <pvPortMalloc+0x188>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b1b      	ldr	r3, [pc, #108]	; (8008638 <pvPortMalloc+0x190>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d203      	bcs.n	80085da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085d2:	4b17      	ldr	r3, [pc, #92]	; (8008630 <pvPortMalloc+0x188>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a18      	ldr	r2, [pc, #96]	; (8008638 <pvPortMalloc+0x190>)
 80085d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <pvPortMalloc+0x184>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <pvPortMalloc+0x194>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a11      	ldr	r2, [pc, #68]	; (800863c <pvPortMalloc+0x194>)
 80085f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085f8:	f7ff fa5c 	bl	8007ab4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <pvPortMalloc+0x174>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	60fb      	str	r3, [r7, #12]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <pvPortMalloc+0x172>
	return pvReturn;
 800861c:	69fb      	ldr	r3, [r7, #28]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3728      	adds	r7, #40	; 0x28
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20001430 	.word	0x20001430
 800862c:	20001444 	.word	0x20001444
 8008630:	20001434 	.word	0x20001434
 8008634:	20001428 	.word	0x20001428
 8008638:	20001438 	.word	0x20001438
 800863c:	2000143c 	.word	0x2000143c

08008640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d04d      	beq.n	80086ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008652:	2308      	movs	r3, #8
 8008654:	425b      	negs	r3, r3
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4413      	add	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <vPortFree+0xb8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <vPortFree+0x44>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	60fb      	str	r3, [r7, #12]
}
 8008680:	bf00      	nop
 8008682:	e7fe      	b.n	8008682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <vPortFree+0x62>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60bb      	str	r3, [r7, #8]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <vPortFree+0xb8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01e      	beq.n	80086ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11a      	bne.n	80086ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <vPortFree+0xb8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	401a      	ands	r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086c8:	f7ff f9e6 	bl	8007a98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <vPortFree+0xbc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <vPortFree+0xbc>)
 80086d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086da:	6938      	ldr	r0, [r7, #16]
 80086dc:	f000 f874 	bl	80087c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <vPortFree+0xc0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3301      	adds	r3, #1
 80086e6:	4a06      	ldr	r2, [pc, #24]	; (8008700 <vPortFree+0xc0>)
 80086e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086ea:	f7ff f9e3 	bl	8007ab4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ee:	bf00      	nop
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20001444 	.word	0x20001444
 80086fc:	20001434 	.word	0x20001434
 8008700:	20001440 	.word	0x20001440

08008704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800870a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800870e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008710:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <prvHeapInit+0xac>)
 8008712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3307      	adds	r3, #7
 8008722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0307 	bic.w	r3, r3, #7
 800872a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <prvHeapInit+0xac>)
 8008734:	4413      	add	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800873c:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <prvHeapInit+0xb0>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <prvHeapInit+0xb0>)
 8008744:	2200      	movs	r2, #0
 8008746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008750:	2208      	movs	r2, #8
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0307 	bic.w	r3, r3, #7
 800875e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <prvHeapInit+0xb4>)
 8008764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <prvHeapInit+0xb4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2200      	movs	r2, #0
 800876c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800876e:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <prvHeapInit+0xb4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <prvHeapInit+0xb4>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <prvHeapInit+0xb8>)
 8008792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <prvHeapInit+0xbc>)
 800879a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800879c:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <prvHeapInit+0xc0>)
 800879e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087a2:	601a      	str	r2, [r3, #0]
}
 80087a4:	bf00      	nop
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	20000870 	.word	0x20000870
 80087b4:	20001428 	.word	0x20001428
 80087b8:	20001430 	.word	0x20001430
 80087bc:	20001438 	.word	0x20001438
 80087c0:	20001434 	.word	0x20001434
 80087c4:	20001444 	.word	0x20001444

080087c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087d0:	4b28      	ldr	r3, [pc, #160]	; (8008874 <prvInsertBlockIntoFreeList+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	e002      	b.n	80087dc <prvInsertBlockIntoFreeList+0x14>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d8f7      	bhi.n	80087d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4413      	add	r3, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d108      	bne.n	800880a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	441a      	add	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	441a      	add	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d118      	bne.n	8008850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <prvInsertBlockIntoFreeList+0xb0>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d00d      	beq.n	8008846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	441a      	add	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e008      	b.n	8008858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvInsertBlockIntoFreeList+0xb0>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e003      	b.n	8008858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d002      	beq.n	8008866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20001428 	.word	0x20001428
 8008878:	20001430 	.word	0x20001430

0800887c <__cvt>:
 800887c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	ec55 4b10 	vmov	r4, r5, d0
 8008884:	2d00      	cmp	r5, #0
 8008886:	460e      	mov	r6, r1
 8008888:	4619      	mov	r1, r3
 800888a:	462b      	mov	r3, r5
 800888c:	bfbb      	ittet	lt
 800888e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008892:	461d      	movlt	r5, r3
 8008894:	2300      	movge	r3, #0
 8008896:	232d      	movlt	r3, #45	; 0x2d
 8008898:	700b      	strb	r3, [r1, #0]
 800889a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800889c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088a0:	4691      	mov	r9, r2
 80088a2:	f023 0820 	bic.w	r8, r3, #32
 80088a6:	bfbc      	itt	lt
 80088a8:	4622      	movlt	r2, r4
 80088aa:	4614      	movlt	r4, r2
 80088ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088b0:	d005      	beq.n	80088be <__cvt+0x42>
 80088b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088b6:	d100      	bne.n	80088ba <__cvt+0x3e>
 80088b8:	3601      	adds	r6, #1
 80088ba:	2102      	movs	r1, #2
 80088bc:	e000      	b.n	80088c0 <__cvt+0x44>
 80088be:	2103      	movs	r1, #3
 80088c0:	ab03      	add	r3, sp, #12
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	ab02      	add	r3, sp, #8
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	ec45 4b10 	vmov	d0, r4, r5
 80088cc:	4653      	mov	r3, sl
 80088ce:	4632      	mov	r2, r6
 80088d0:	f000 fdda 	bl	8009488 <_dtoa_r>
 80088d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088d8:	4607      	mov	r7, r0
 80088da:	d102      	bne.n	80088e2 <__cvt+0x66>
 80088dc:	f019 0f01 	tst.w	r9, #1
 80088e0:	d022      	beq.n	8008928 <__cvt+0xac>
 80088e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088e6:	eb07 0906 	add.w	r9, r7, r6
 80088ea:	d110      	bne.n	800890e <__cvt+0x92>
 80088ec:	783b      	ldrb	r3, [r7, #0]
 80088ee:	2b30      	cmp	r3, #48	; 0x30
 80088f0:	d10a      	bne.n	8008908 <__cvt+0x8c>
 80088f2:	2200      	movs	r2, #0
 80088f4:	2300      	movs	r3, #0
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f8 f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80088fe:	b918      	cbnz	r0, 8008908 <__cvt+0x8c>
 8008900:	f1c6 0601 	rsb	r6, r6, #1
 8008904:	f8ca 6000 	str.w	r6, [sl]
 8008908:	f8da 3000 	ldr.w	r3, [sl]
 800890c:	4499      	add	r9, r3
 800890e:	2200      	movs	r2, #0
 8008910:	2300      	movs	r3, #0
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f7f8 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800891a:	b108      	cbz	r0, 8008920 <__cvt+0xa4>
 800891c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008920:	2230      	movs	r2, #48	; 0x30
 8008922:	9b03      	ldr	r3, [sp, #12]
 8008924:	454b      	cmp	r3, r9
 8008926:	d307      	bcc.n	8008938 <__cvt+0xbc>
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800892c:	1bdb      	subs	r3, r3, r7
 800892e:	4638      	mov	r0, r7
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	b004      	add	sp, #16
 8008934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008938:	1c59      	adds	r1, r3, #1
 800893a:	9103      	str	r1, [sp, #12]
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	e7f0      	b.n	8008922 <__cvt+0xa6>

08008940 <__exponent>:
 8008940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008942:	4603      	mov	r3, r0
 8008944:	2900      	cmp	r1, #0
 8008946:	bfb8      	it	lt
 8008948:	4249      	neglt	r1, r1
 800894a:	f803 2b02 	strb.w	r2, [r3], #2
 800894e:	bfb4      	ite	lt
 8008950:	222d      	movlt	r2, #45	; 0x2d
 8008952:	222b      	movge	r2, #43	; 0x2b
 8008954:	2909      	cmp	r1, #9
 8008956:	7042      	strb	r2, [r0, #1]
 8008958:	dd2a      	ble.n	80089b0 <__exponent+0x70>
 800895a:	f10d 0207 	add.w	r2, sp, #7
 800895e:	4617      	mov	r7, r2
 8008960:	260a      	movs	r6, #10
 8008962:	4694      	mov	ip, r2
 8008964:	fb91 f5f6 	sdiv	r5, r1, r6
 8008968:	fb06 1415 	mls	r4, r6, r5, r1
 800896c:	3430      	adds	r4, #48	; 0x30
 800896e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008972:	460c      	mov	r4, r1
 8008974:	2c63      	cmp	r4, #99	; 0x63
 8008976:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800897a:	4629      	mov	r1, r5
 800897c:	dcf1      	bgt.n	8008962 <__exponent+0x22>
 800897e:	3130      	adds	r1, #48	; 0x30
 8008980:	f1ac 0402 	sub.w	r4, ip, #2
 8008984:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008988:	1c41      	adds	r1, r0, #1
 800898a:	4622      	mov	r2, r4
 800898c:	42ba      	cmp	r2, r7
 800898e:	d30a      	bcc.n	80089a6 <__exponent+0x66>
 8008990:	f10d 0209 	add.w	r2, sp, #9
 8008994:	eba2 020c 	sub.w	r2, r2, ip
 8008998:	42bc      	cmp	r4, r7
 800899a:	bf88      	it	hi
 800899c:	2200      	movhi	r2, #0
 800899e:	4413      	add	r3, r2
 80089a0:	1a18      	subs	r0, r3, r0
 80089a2:	b003      	add	sp, #12
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80089aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80089ae:	e7ed      	b.n	800898c <__exponent+0x4c>
 80089b0:	2330      	movs	r3, #48	; 0x30
 80089b2:	3130      	adds	r1, #48	; 0x30
 80089b4:	7083      	strb	r3, [r0, #2]
 80089b6:	70c1      	strb	r1, [r0, #3]
 80089b8:	1d03      	adds	r3, r0, #4
 80089ba:	e7f1      	b.n	80089a0 <__exponent+0x60>

080089bc <_printf_float>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	ed2d 8b02 	vpush	{d8}
 80089c4:	b08d      	sub	sp, #52	; 0x34
 80089c6:	460c      	mov	r4, r1
 80089c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089cc:	4616      	mov	r6, r2
 80089ce:	461f      	mov	r7, r3
 80089d0:	4605      	mov	r5, r0
 80089d2:	f000 fc91 	bl	80092f8 <_localeconv_r>
 80089d6:	f8d0 a000 	ldr.w	sl, [r0]
 80089da:	4650      	mov	r0, sl
 80089dc:	f7f7 fc48 	bl	8000270 <strlen>
 80089e0:	2300      	movs	r3, #0
 80089e2:	930a      	str	r3, [sp, #40]	; 0x28
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	9305      	str	r3, [sp, #20]
 80089e8:	f8d8 3000 	ldr.w	r3, [r8]
 80089ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089f0:	3307      	adds	r3, #7
 80089f2:	f023 0307 	bic.w	r3, r3, #7
 80089f6:	f103 0208 	add.w	r2, r3, #8
 80089fa:	f8c8 2000 	str.w	r2, [r8]
 80089fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a06:	9307      	str	r3, [sp, #28]
 8008a08:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a0c:	ee08 0a10 	vmov	s16, r0
 8008a10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a18:	4b9e      	ldr	r3, [pc, #632]	; (8008c94 <_printf_float+0x2d8>)
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a1e:	f7f8 f885 	bl	8000b2c <__aeabi_dcmpun>
 8008a22:	bb88      	cbnz	r0, 8008a88 <_printf_float+0xcc>
 8008a24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a28:	4b9a      	ldr	r3, [pc, #616]	; (8008c94 <_printf_float+0x2d8>)
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a2e:	f7f8 f85f 	bl	8000af0 <__aeabi_dcmple>
 8008a32:	bb48      	cbnz	r0, 8008a88 <_printf_float+0xcc>
 8008a34:	2200      	movs	r2, #0
 8008a36:	2300      	movs	r3, #0
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f8 f84e 	bl	8000adc <__aeabi_dcmplt>
 8008a40:	b110      	cbz	r0, 8008a48 <_printf_float+0x8c>
 8008a42:	232d      	movs	r3, #45	; 0x2d
 8008a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a48:	4a93      	ldr	r2, [pc, #588]	; (8008c98 <_printf_float+0x2dc>)
 8008a4a:	4b94      	ldr	r3, [pc, #592]	; (8008c9c <_printf_float+0x2e0>)
 8008a4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a50:	bf94      	ite	ls
 8008a52:	4690      	movls	r8, r2
 8008a54:	4698      	movhi	r8, r3
 8008a56:	2303      	movs	r3, #3
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	9b05      	ldr	r3, [sp, #20]
 8008a5c:	f023 0304 	bic.w	r3, r3, #4
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	f04f 0900 	mov.w	r9, #0
 8008a66:	9700      	str	r7, [sp, #0]
 8008a68:	4633      	mov	r3, r6
 8008a6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 f9da 	bl	8008e28 <_printf_common>
 8008a74:	3001      	adds	r0, #1
 8008a76:	f040 8090 	bne.w	8008b9a <_printf_float+0x1de>
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a7e:	b00d      	add	sp, #52	; 0x34
 8008a80:	ecbd 8b02 	vpop	{d8}
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f84c 	bl	8000b2c <__aeabi_dcmpun>
 8008a94:	b140      	cbz	r0, 8008aa8 <_printf_float+0xec>
 8008a96:	464b      	mov	r3, r9
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bfbc      	itt	lt
 8008a9c:	232d      	movlt	r3, #45	; 0x2d
 8008a9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008aa2:	4a7f      	ldr	r2, [pc, #508]	; (8008ca0 <_printf_float+0x2e4>)
 8008aa4:	4b7f      	ldr	r3, [pc, #508]	; (8008ca4 <_printf_float+0x2e8>)
 8008aa6:	e7d1      	b.n	8008a4c <_printf_float+0x90>
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008aae:	9206      	str	r2, [sp, #24]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	d13f      	bne.n	8008b34 <_printf_float+0x178>
 8008ab4:	2306      	movs	r3, #6
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	9b05      	ldr	r3, [sp, #20]
 8008aba:	6861      	ldr	r1, [r4, #4]
 8008abc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9303      	str	r3, [sp, #12]
 8008ac4:	ab0a      	add	r3, sp, #40	; 0x28
 8008ac6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008aca:	ab09      	add	r3, sp, #36	; 0x24
 8008acc:	ec49 8b10 	vmov	d0, r8, r9
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	6022      	str	r2, [r4, #0]
 8008ad4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f7ff fecf 	bl	800887c <__cvt>
 8008ade:	9b06      	ldr	r3, [sp, #24]
 8008ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ae2:	2b47      	cmp	r3, #71	; 0x47
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	d108      	bne.n	8008afa <_printf_float+0x13e>
 8008ae8:	1cc8      	adds	r0, r1, #3
 8008aea:	db02      	blt.n	8008af2 <_printf_float+0x136>
 8008aec:	6863      	ldr	r3, [r4, #4]
 8008aee:	4299      	cmp	r1, r3
 8008af0:	dd41      	ble.n	8008b76 <_printf_float+0x1ba>
 8008af2:	f1ab 0302 	sub.w	r3, fp, #2
 8008af6:	fa5f fb83 	uxtb.w	fp, r3
 8008afa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008afe:	d820      	bhi.n	8008b42 <_printf_float+0x186>
 8008b00:	3901      	subs	r1, #1
 8008b02:	465a      	mov	r2, fp
 8008b04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b08:	9109      	str	r1, [sp, #36]	; 0x24
 8008b0a:	f7ff ff19 	bl	8008940 <__exponent>
 8008b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b10:	1813      	adds	r3, r2, r0
 8008b12:	2a01      	cmp	r2, #1
 8008b14:	4681      	mov	r9, r0
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	dc02      	bgt.n	8008b20 <_printf_float+0x164>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	07d2      	lsls	r2, r2, #31
 8008b1e:	d501      	bpl.n	8008b24 <_printf_float+0x168>
 8008b20:	3301      	adds	r3, #1
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d09c      	beq.n	8008a66 <_printf_float+0xaa>
 8008b2c:	232d      	movs	r3, #45	; 0x2d
 8008b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b32:	e798      	b.n	8008a66 <_printf_float+0xaa>
 8008b34:	9a06      	ldr	r2, [sp, #24]
 8008b36:	2a47      	cmp	r2, #71	; 0x47
 8008b38:	d1be      	bne.n	8008ab8 <_printf_float+0xfc>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1bc      	bne.n	8008ab8 <_printf_float+0xfc>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e7b9      	b.n	8008ab6 <_printf_float+0xfa>
 8008b42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b46:	d118      	bne.n	8008b7a <_printf_float+0x1be>
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	dd0b      	ble.n	8008b66 <_printf_float+0x1aa>
 8008b4e:	6121      	str	r1, [r4, #16]
 8008b50:	b913      	cbnz	r3, 8008b58 <_printf_float+0x19c>
 8008b52:	6822      	ldr	r2, [r4, #0]
 8008b54:	07d0      	lsls	r0, r2, #31
 8008b56:	d502      	bpl.n	8008b5e <_printf_float+0x1a2>
 8008b58:	3301      	adds	r3, #1
 8008b5a:	440b      	add	r3, r1
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b60:	f04f 0900 	mov.w	r9, #0
 8008b64:	e7de      	b.n	8008b24 <_printf_float+0x168>
 8008b66:	b913      	cbnz	r3, 8008b6e <_printf_float+0x1b2>
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	07d2      	lsls	r2, r2, #31
 8008b6c:	d501      	bpl.n	8008b72 <_printf_float+0x1b6>
 8008b6e:	3302      	adds	r3, #2
 8008b70:	e7f4      	b.n	8008b5c <_printf_float+0x1a0>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e7f2      	b.n	8008b5c <_printf_float+0x1a0>
 8008b76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7c:	4299      	cmp	r1, r3
 8008b7e:	db05      	blt.n	8008b8c <_printf_float+0x1d0>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	6121      	str	r1, [r4, #16]
 8008b84:	07d8      	lsls	r0, r3, #31
 8008b86:	d5ea      	bpl.n	8008b5e <_printf_float+0x1a2>
 8008b88:	1c4b      	adds	r3, r1, #1
 8008b8a:	e7e7      	b.n	8008b5c <_printf_float+0x1a0>
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	bfd4      	ite	le
 8008b90:	f1c1 0202 	rsble	r2, r1, #2
 8008b94:	2201      	movgt	r2, #1
 8008b96:	4413      	add	r3, r2
 8008b98:	e7e0      	b.n	8008b5c <_printf_float+0x1a0>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	055a      	lsls	r2, r3, #21
 8008b9e:	d407      	bmi.n	8008bb0 <_printf_float+0x1f4>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	4642      	mov	r2, r8
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	47b8      	blx	r7
 8008baa:	3001      	adds	r0, #1
 8008bac:	d12c      	bne.n	8008c08 <_printf_float+0x24c>
 8008bae:	e764      	b.n	8008a7a <_printf_float+0xbe>
 8008bb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bb4:	f240 80e0 	bls.w	8008d78 <_printf_float+0x3bc>
 8008bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f7f7 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d034      	beq.n	8008c32 <_printf_float+0x276>
 8008bc8:	4a37      	ldr	r2, [pc, #220]	; (8008ca8 <_printf_float+0x2ec>)
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f43f af51 	beq.w	8008a7a <_printf_float+0xbe>
 8008bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	db02      	blt.n	8008be6 <_printf_float+0x22a>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	07d8      	lsls	r0, r3, #31
 8008be4:	d510      	bpl.n	8008c08 <_printf_float+0x24c>
 8008be6:	ee18 3a10 	vmov	r3, s16
 8008bea:	4652      	mov	r2, sl
 8008bec:	4631      	mov	r1, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f43f af41 	beq.w	8008a7a <_printf_float+0xbe>
 8008bf8:	f04f 0800 	mov.w	r8, #0
 8008bfc:	f104 091a 	add.w	r9, r4, #26
 8008c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c02:	3b01      	subs	r3, #1
 8008c04:	4543      	cmp	r3, r8
 8008c06:	dc09      	bgt.n	8008c1c <_printf_float+0x260>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	079b      	lsls	r3, r3, #30
 8008c0c:	f100 8107 	bmi.w	8008e1e <_printf_float+0x462>
 8008c10:	68e0      	ldr	r0, [r4, #12]
 8008c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c14:	4298      	cmp	r0, r3
 8008c16:	bfb8      	it	lt
 8008c18:	4618      	movlt	r0, r3
 8008c1a:	e730      	b.n	8008a7e <_printf_float+0xc2>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	464a      	mov	r2, r9
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f af27 	beq.w	8008a7a <_printf_float+0xbe>
 8008c2c:	f108 0801 	add.w	r8, r8, #1
 8008c30:	e7e6      	b.n	8008c00 <_printf_float+0x244>
 8008c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dc39      	bgt.n	8008cac <_printf_float+0x2f0>
 8008c38:	4a1b      	ldr	r2, [pc, #108]	; (8008ca8 <_printf_float+0x2ec>)
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b8      	blx	r7
 8008c42:	3001      	adds	r0, #1
 8008c44:	f43f af19 	beq.w	8008a7a <_printf_float+0xbe>
 8008c48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	d102      	bne.n	8008c56 <_printf_float+0x29a>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	07d9      	lsls	r1, r3, #31
 8008c54:	d5d8      	bpl.n	8008c08 <_printf_float+0x24c>
 8008c56:	ee18 3a10 	vmov	r3, s16
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4628      	mov	r0, r5
 8008c60:	47b8      	blx	r7
 8008c62:	3001      	adds	r0, #1
 8008c64:	f43f af09 	beq.w	8008a7a <_printf_float+0xbe>
 8008c68:	f04f 0900 	mov.w	r9, #0
 8008c6c:	f104 0a1a 	add.w	sl, r4, #26
 8008c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c72:	425b      	negs	r3, r3
 8008c74:	454b      	cmp	r3, r9
 8008c76:	dc01      	bgt.n	8008c7c <_printf_float+0x2c0>
 8008c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7a:	e792      	b.n	8008ba2 <_printf_float+0x1e6>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4652      	mov	r2, sl
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f aef7 	beq.w	8008a7a <_printf_float+0xbe>
 8008c8c:	f109 0901 	add.w	r9, r9, #1
 8008c90:	e7ee      	b.n	8008c70 <_printf_float+0x2b4>
 8008c92:	bf00      	nop
 8008c94:	7fefffff 	.word	0x7fefffff
 8008c98:	0800b6d4 	.word	0x0800b6d4
 8008c9c:	0800b6d8 	.word	0x0800b6d8
 8008ca0:	0800b6dc 	.word	0x0800b6dc
 8008ca4:	0800b6e0 	.word	0x0800b6e0
 8008ca8:	0800b6e4 	.word	0x0800b6e4
 8008cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	bfa8      	it	ge
 8008cb4:	461a      	movge	r2, r3
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	4691      	mov	r9, r2
 8008cba:	dc37      	bgt.n	8008d2c <_printf_float+0x370>
 8008cbc:	f04f 0b00 	mov.w	fp, #0
 8008cc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc4:	f104 021a 	add.w	r2, r4, #26
 8008cc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cca:	9305      	str	r3, [sp, #20]
 8008ccc:	eba3 0309 	sub.w	r3, r3, r9
 8008cd0:	455b      	cmp	r3, fp
 8008cd2:	dc33      	bgt.n	8008d3c <_printf_float+0x380>
 8008cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	db3b      	blt.n	8008d54 <_printf_float+0x398>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	07da      	lsls	r2, r3, #31
 8008ce0:	d438      	bmi.n	8008d54 <_printf_float+0x398>
 8008ce2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ce6:	eba2 0903 	sub.w	r9, r2, r3
 8008cea:	9b05      	ldr	r3, [sp, #20]
 8008cec:	1ad2      	subs	r2, r2, r3
 8008cee:	4591      	cmp	r9, r2
 8008cf0:	bfa8      	it	ge
 8008cf2:	4691      	movge	r9, r2
 8008cf4:	f1b9 0f00 	cmp.w	r9, #0
 8008cf8:	dc35      	bgt.n	8008d66 <_printf_float+0x3aa>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d02:	f104 0a1a 	add.w	sl, r4, #26
 8008d06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	eba3 0309 	sub.w	r3, r3, r9
 8008d10:	4543      	cmp	r3, r8
 8008d12:	f77f af79 	ble.w	8008c08 <_printf_float+0x24c>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4652      	mov	r2, sl
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b8      	blx	r7
 8008d20:	3001      	adds	r0, #1
 8008d22:	f43f aeaa 	beq.w	8008a7a <_printf_float+0xbe>
 8008d26:	f108 0801 	add.w	r8, r8, #1
 8008d2a:	e7ec      	b.n	8008d06 <_printf_float+0x34a>
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4642      	mov	r2, r8
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	d1c0      	bne.n	8008cbc <_printf_float+0x300>
 8008d3a:	e69e      	b.n	8008a7a <_printf_float+0xbe>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	9205      	str	r2, [sp, #20]
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f ae97 	beq.w	8008a7a <_printf_float+0xbe>
 8008d4c:	9a05      	ldr	r2, [sp, #20]
 8008d4e:	f10b 0b01 	add.w	fp, fp, #1
 8008d52:	e7b9      	b.n	8008cc8 <_printf_float+0x30c>
 8008d54:	ee18 3a10 	vmov	r3, s16
 8008d58:	4652      	mov	r2, sl
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b8      	blx	r7
 8008d60:	3001      	adds	r0, #1
 8008d62:	d1be      	bne.n	8008ce2 <_printf_float+0x326>
 8008d64:	e689      	b.n	8008a7a <_printf_float+0xbe>
 8008d66:	9a05      	ldr	r2, [sp, #20]
 8008d68:	464b      	mov	r3, r9
 8008d6a:	4442      	add	r2, r8
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	d1c1      	bne.n	8008cfa <_printf_float+0x33e>
 8008d76:	e680      	b.n	8008a7a <_printf_float+0xbe>
 8008d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d7a:	2a01      	cmp	r2, #1
 8008d7c:	dc01      	bgt.n	8008d82 <_printf_float+0x3c6>
 8008d7e:	07db      	lsls	r3, r3, #31
 8008d80:	d53a      	bpl.n	8008df8 <_printf_float+0x43c>
 8008d82:	2301      	movs	r3, #1
 8008d84:	4642      	mov	r2, r8
 8008d86:	4631      	mov	r1, r6
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b8      	blx	r7
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	f43f ae74 	beq.w	8008a7a <_printf_float+0xbe>
 8008d92:	ee18 3a10 	vmov	r3, s16
 8008d96:	4652      	mov	r2, sl
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f ae6b 	beq.w	8008a7a <_printf_float+0xbe>
 8008da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008da8:	2200      	movs	r2, #0
 8008daa:	2300      	movs	r3, #0
 8008dac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008db0:	f7f7 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db4:	b9d8      	cbnz	r0, 8008dee <_printf_float+0x432>
 8008db6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008dba:	f108 0201 	add.w	r2, r8, #1
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	47b8      	blx	r7
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d10e      	bne.n	8008de6 <_printf_float+0x42a>
 8008dc8:	e657      	b.n	8008a7a <_printf_float+0xbe>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4652      	mov	r2, sl
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f ae50 	beq.w	8008a7a <_printf_float+0xbe>
 8008dda:	f108 0801 	add.w	r8, r8, #1
 8008dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de0:	3b01      	subs	r3, #1
 8008de2:	4543      	cmp	r3, r8
 8008de4:	dcf1      	bgt.n	8008dca <_printf_float+0x40e>
 8008de6:	464b      	mov	r3, r9
 8008de8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008dec:	e6da      	b.n	8008ba4 <_printf_float+0x1e8>
 8008dee:	f04f 0800 	mov.w	r8, #0
 8008df2:	f104 0a1a 	add.w	sl, r4, #26
 8008df6:	e7f2      	b.n	8008dde <_printf_float+0x422>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	e7df      	b.n	8008dbe <_printf_float+0x402>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	464a      	mov	r2, r9
 8008e02:	4631      	mov	r1, r6
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b8      	blx	r7
 8008e08:	3001      	adds	r0, #1
 8008e0a:	f43f ae36 	beq.w	8008a7a <_printf_float+0xbe>
 8008e0e:	f108 0801 	add.w	r8, r8, #1
 8008e12:	68e3      	ldr	r3, [r4, #12]
 8008e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e16:	1a5b      	subs	r3, r3, r1
 8008e18:	4543      	cmp	r3, r8
 8008e1a:	dcf0      	bgt.n	8008dfe <_printf_float+0x442>
 8008e1c:	e6f8      	b.n	8008c10 <_printf_float+0x254>
 8008e1e:	f04f 0800 	mov.w	r8, #0
 8008e22:	f104 0919 	add.w	r9, r4, #25
 8008e26:	e7f4      	b.n	8008e12 <_printf_float+0x456>

08008e28 <_printf_common>:
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	4699      	mov	r9, r3
 8008e30:	688a      	ldr	r2, [r1, #8]
 8008e32:	690b      	ldr	r3, [r1, #16]
 8008e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	bfb8      	it	lt
 8008e3c:	4613      	movlt	r3, r2
 8008e3e:	6033      	str	r3, [r6, #0]
 8008e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e44:	4607      	mov	r7, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	b10a      	cbz	r2, 8008e4e <_printf_common+0x26>
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	6033      	str	r3, [r6, #0]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	0699      	lsls	r1, r3, #26
 8008e52:	bf42      	ittt	mi
 8008e54:	6833      	ldrmi	r3, [r6, #0]
 8008e56:	3302      	addmi	r3, #2
 8008e58:	6033      	strmi	r3, [r6, #0]
 8008e5a:	6825      	ldr	r5, [r4, #0]
 8008e5c:	f015 0506 	ands.w	r5, r5, #6
 8008e60:	d106      	bne.n	8008e70 <_printf_common+0x48>
 8008e62:	f104 0a19 	add.w	sl, r4, #25
 8008e66:	68e3      	ldr	r3, [r4, #12]
 8008e68:	6832      	ldr	r2, [r6, #0]
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	42ab      	cmp	r3, r5
 8008e6e:	dc26      	bgt.n	8008ebe <_printf_common+0x96>
 8008e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e74:	1e13      	subs	r3, r2, #0
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	bf18      	it	ne
 8008e7a:	2301      	movne	r3, #1
 8008e7c:	0692      	lsls	r2, r2, #26
 8008e7e:	d42b      	bmi.n	8008ed8 <_printf_common+0xb0>
 8008e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e84:	4649      	mov	r1, r9
 8008e86:	4638      	mov	r0, r7
 8008e88:	47c0      	blx	r8
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d01e      	beq.n	8008ecc <_printf_common+0xa4>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	6922      	ldr	r2, [r4, #16]
 8008e92:	f003 0306 	and.w	r3, r3, #6
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	bf02      	ittt	eq
 8008e9a:	68e5      	ldreq	r5, [r4, #12]
 8008e9c:	6833      	ldreq	r3, [r6, #0]
 8008e9e:	1aed      	subeq	r5, r5, r3
 8008ea0:	68a3      	ldr	r3, [r4, #8]
 8008ea2:	bf0c      	ite	eq
 8008ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea8:	2500      	movne	r5, #0
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	bfc4      	itt	gt
 8008eae:	1a9b      	subgt	r3, r3, r2
 8008eb0:	18ed      	addgt	r5, r5, r3
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	341a      	adds	r4, #26
 8008eb6:	42b5      	cmp	r5, r6
 8008eb8:	d11a      	bne.n	8008ef0 <_printf_common+0xc8>
 8008eba:	2000      	movs	r0, #0
 8008ebc:	e008      	b.n	8008ed0 <_printf_common+0xa8>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4652      	mov	r2, sl
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	47c0      	blx	r8
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d103      	bne.n	8008ed4 <_printf_common+0xac>
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	e7c6      	b.n	8008e66 <_printf_common+0x3e>
 8008ed8:	18e1      	adds	r1, r4, r3
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	2030      	movs	r0, #48	; 0x30
 8008ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ee2:	4422      	add	r2, r4
 8008ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eec:	3302      	adds	r3, #2
 8008eee:	e7c7      	b.n	8008e80 <_printf_common+0x58>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	47c0      	blx	r8
 8008efa:	3001      	adds	r0, #1
 8008efc:	d0e6      	beq.n	8008ecc <_printf_common+0xa4>
 8008efe:	3601      	adds	r6, #1
 8008f00:	e7d9      	b.n	8008eb6 <_printf_common+0x8e>
	...

08008f04 <_printf_i>:
 8008f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	7e0f      	ldrb	r7, [r1, #24]
 8008f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f0c:	2f78      	cmp	r7, #120	; 0x78
 8008f0e:	4691      	mov	r9, r2
 8008f10:	4680      	mov	r8, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	469a      	mov	sl, r3
 8008f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f1a:	d807      	bhi.n	8008f2c <_printf_i+0x28>
 8008f1c:	2f62      	cmp	r7, #98	; 0x62
 8008f1e:	d80a      	bhi.n	8008f36 <_printf_i+0x32>
 8008f20:	2f00      	cmp	r7, #0
 8008f22:	f000 80d4 	beq.w	80090ce <_printf_i+0x1ca>
 8008f26:	2f58      	cmp	r7, #88	; 0x58
 8008f28:	f000 80c0 	beq.w	80090ac <_printf_i+0x1a8>
 8008f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f34:	e03a      	b.n	8008fac <_printf_i+0xa8>
 8008f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f3a:	2b15      	cmp	r3, #21
 8008f3c:	d8f6      	bhi.n	8008f2c <_printf_i+0x28>
 8008f3e:	a101      	add	r1, pc, #4	; (adr r1, 8008f44 <_printf_i+0x40>)
 8008f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f44:	08008f9d 	.word	0x08008f9d
 8008f48:	08008fb1 	.word	0x08008fb1
 8008f4c:	08008f2d 	.word	0x08008f2d
 8008f50:	08008f2d 	.word	0x08008f2d
 8008f54:	08008f2d 	.word	0x08008f2d
 8008f58:	08008f2d 	.word	0x08008f2d
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008f2d 	.word	0x08008f2d
 8008f64:	08008f2d 	.word	0x08008f2d
 8008f68:	08008f2d 	.word	0x08008f2d
 8008f6c:	08008f2d 	.word	0x08008f2d
 8008f70:	080090b5 	.word	0x080090b5
 8008f74:	08008fdd 	.word	0x08008fdd
 8008f78:	0800906f 	.word	0x0800906f
 8008f7c:	08008f2d 	.word	0x08008f2d
 8008f80:	08008f2d 	.word	0x08008f2d
 8008f84:	080090d7 	.word	0x080090d7
 8008f88:	08008f2d 	.word	0x08008f2d
 8008f8c:	08008fdd 	.word	0x08008fdd
 8008f90:	08008f2d 	.word	0x08008f2d
 8008f94:	08008f2d 	.word	0x08008f2d
 8008f98:	08009077 	.word	0x08009077
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	1d1a      	adds	r2, r3, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	602a      	str	r2, [r5, #0]
 8008fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fac:	2301      	movs	r3, #1
 8008fae:	e09f      	b.n	80090f0 <_printf_i+0x1ec>
 8008fb0:	6820      	ldr	r0, [r4, #0]
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	0607      	lsls	r7, r0, #24
 8008fb6:	f103 0104 	add.w	r1, r3, #4
 8008fba:	6029      	str	r1, [r5, #0]
 8008fbc:	d501      	bpl.n	8008fc2 <_printf_i+0xbe>
 8008fbe:	681e      	ldr	r6, [r3, #0]
 8008fc0:	e003      	b.n	8008fca <_printf_i+0xc6>
 8008fc2:	0646      	lsls	r6, r0, #25
 8008fc4:	d5fb      	bpl.n	8008fbe <_printf_i+0xba>
 8008fc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008fca:	2e00      	cmp	r6, #0
 8008fcc:	da03      	bge.n	8008fd6 <_printf_i+0xd2>
 8008fce:	232d      	movs	r3, #45	; 0x2d
 8008fd0:	4276      	negs	r6, r6
 8008fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd6:	485a      	ldr	r0, [pc, #360]	; (8009140 <_printf_i+0x23c>)
 8008fd8:	230a      	movs	r3, #10
 8008fda:	e012      	b.n	8009002 <_printf_i+0xfe>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	6820      	ldr	r0, [r4, #0]
 8008fe0:	1d19      	adds	r1, r3, #4
 8008fe2:	6029      	str	r1, [r5, #0]
 8008fe4:	0605      	lsls	r5, r0, #24
 8008fe6:	d501      	bpl.n	8008fec <_printf_i+0xe8>
 8008fe8:	681e      	ldr	r6, [r3, #0]
 8008fea:	e002      	b.n	8008ff2 <_printf_i+0xee>
 8008fec:	0641      	lsls	r1, r0, #25
 8008fee:	d5fb      	bpl.n	8008fe8 <_printf_i+0xe4>
 8008ff0:	881e      	ldrh	r6, [r3, #0]
 8008ff2:	4853      	ldr	r0, [pc, #332]	; (8009140 <_printf_i+0x23c>)
 8008ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2308      	moveq	r3, #8
 8008ffa:	230a      	movne	r3, #10
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009002:	6865      	ldr	r5, [r4, #4]
 8009004:	60a5      	str	r5, [r4, #8]
 8009006:	2d00      	cmp	r5, #0
 8009008:	bfa2      	ittt	ge
 800900a:	6821      	ldrge	r1, [r4, #0]
 800900c:	f021 0104 	bicge.w	r1, r1, #4
 8009010:	6021      	strge	r1, [r4, #0]
 8009012:	b90e      	cbnz	r6, 8009018 <_printf_i+0x114>
 8009014:	2d00      	cmp	r5, #0
 8009016:	d04b      	beq.n	80090b0 <_printf_i+0x1ac>
 8009018:	4615      	mov	r5, r2
 800901a:	fbb6 f1f3 	udiv	r1, r6, r3
 800901e:	fb03 6711 	mls	r7, r3, r1, r6
 8009022:	5dc7      	ldrb	r7, [r0, r7]
 8009024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009028:	4637      	mov	r7, r6
 800902a:	42bb      	cmp	r3, r7
 800902c:	460e      	mov	r6, r1
 800902e:	d9f4      	bls.n	800901a <_printf_i+0x116>
 8009030:	2b08      	cmp	r3, #8
 8009032:	d10b      	bne.n	800904c <_printf_i+0x148>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	07de      	lsls	r6, r3, #31
 8009038:	d508      	bpl.n	800904c <_printf_i+0x148>
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	6861      	ldr	r1, [r4, #4]
 800903e:	4299      	cmp	r1, r3
 8009040:	bfde      	ittt	le
 8009042:	2330      	movle	r3, #48	; 0x30
 8009044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009048:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800904c:	1b52      	subs	r2, r2, r5
 800904e:	6122      	str	r2, [r4, #16]
 8009050:	f8cd a000 	str.w	sl, [sp]
 8009054:	464b      	mov	r3, r9
 8009056:	aa03      	add	r2, sp, #12
 8009058:	4621      	mov	r1, r4
 800905a:	4640      	mov	r0, r8
 800905c:	f7ff fee4 	bl	8008e28 <_printf_common>
 8009060:	3001      	adds	r0, #1
 8009062:	d14a      	bne.n	80090fa <_printf_i+0x1f6>
 8009064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009068:	b004      	add	sp, #16
 800906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	f043 0320 	orr.w	r3, r3, #32
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	4833      	ldr	r0, [pc, #204]	; (8009144 <_printf_i+0x240>)
 8009078:	2778      	movs	r7, #120	; 0x78
 800907a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	6829      	ldr	r1, [r5, #0]
 8009082:	061f      	lsls	r7, r3, #24
 8009084:	f851 6b04 	ldr.w	r6, [r1], #4
 8009088:	d402      	bmi.n	8009090 <_printf_i+0x18c>
 800908a:	065f      	lsls	r7, r3, #25
 800908c:	bf48      	it	mi
 800908e:	b2b6      	uxthmi	r6, r6
 8009090:	07df      	lsls	r7, r3, #31
 8009092:	bf48      	it	mi
 8009094:	f043 0320 	orrmi.w	r3, r3, #32
 8009098:	6029      	str	r1, [r5, #0]
 800909a:	bf48      	it	mi
 800909c:	6023      	strmi	r3, [r4, #0]
 800909e:	b91e      	cbnz	r6, 80090a8 <_printf_i+0x1a4>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	f023 0320 	bic.w	r3, r3, #32
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	2310      	movs	r3, #16
 80090aa:	e7a7      	b.n	8008ffc <_printf_i+0xf8>
 80090ac:	4824      	ldr	r0, [pc, #144]	; (8009140 <_printf_i+0x23c>)
 80090ae:	e7e4      	b.n	800907a <_printf_i+0x176>
 80090b0:	4615      	mov	r5, r2
 80090b2:	e7bd      	b.n	8009030 <_printf_i+0x12c>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	6826      	ldr	r6, [r4, #0]
 80090b8:	6961      	ldr	r1, [r4, #20]
 80090ba:	1d18      	adds	r0, r3, #4
 80090bc:	6028      	str	r0, [r5, #0]
 80090be:	0635      	lsls	r5, r6, #24
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	d501      	bpl.n	80090c8 <_printf_i+0x1c4>
 80090c4:	6019      	str	r1, [r3, #0]
 80090c6:	e002      	b.n	80090ce <_printf_i+0x1ca>
 80090c8:	0670      	lsls	r0, r6, #25
 80090ca:	d5fb      	bpl.n	80090c4 <_printf_i+0x1c0>
 80090cc:	8019      	strh	r1, [r3, #0]
 80090ce:	2300      	movs	r3, #0
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	4615      	mov	r5, r2
 80090d4:	e7bc      	b.n	8009050 <_printf_i+0x14c>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	602a      	str	r2, [r5, #0]
 80090dc:	681d      	ldr	r5, [r3, #0]
 80090de:	6862      	ldr	r2, [r4, #4]
 80090e0:	2100      	movs	r1, #0
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7f7 f874 	bl	80001d0 <memchr>
 80090e8:	b108      	cbz	r0, 80090ee <_printf_i+0x1ea>
 80090ea:	1b40      	subs	r0, r0, r5
 80090ec:	6060      	str	r0, [r4, #4]
 80090ee:	6863      	ldr	r3, [r4, #4]
 80090f0:	6123      	str	r3, [r4, #16]
 80090f2:	2300      	movs	r3, #0
 80090f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090f8:	e7aa      	b.n	8009050 <_printf_i+0x14c>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	462a      	mov	r2, r5
 80090fe:	4649      	mov	r1, r9
 8009100:	4640      	mov	r0, r8
 8009102:	47d0      	blx	sl
 8009104:	3001      	adds	r0, #1
 8009106:	d0ad      	beq.n	8009064 <_printf_i+0x160>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	079b      	lsls	r3, r3, #30
 800910c:	d413      	bmi.n	8009136 <_printf_i+0x232>
 800910e:	68e0      	ldr	r0, [r4, #12]
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	4298      	cmp	r0, r3
 8009114:	bfb8      	it	lt
 8009116:	4618      	movlt	r0, r3
 8009118:	e7a6      	b.n	8009068 <_printf_i+0x164>
 800911a:	2301      	movs	r3, #1
 800911c:	4632      	mov	r2, r6
 800911e:	4649      	mov	r1, r9
 8009120:	4640      	mov	r0, r8
 8009122:	47d0      	blx	sl
 8009124:	3001      	adds	r0, #1
 8009126:	d09d      	beq.n	8009064 <_printf_i+0x160>
 8009128:	3501      	adds	r5, #1
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	9903      	ldr	r1, [sp, #12]
 800912e:	1a5b      	subs	r3, r3, r1
 8009130:	42ab      	cmp	r3, r5
 8009132:	dcf2      	bgt.n	800911a <_printf_i+0x216>
 8009134:	e7eb      	b.n	800910e <_printf_i+0x20a>
 8009136:	2500      	movs	r5, #0
 8009138:	f104 0619 	add.w	r6, r4, #25
 800913c:	e7f5      	b.n	800912a <_printf_i+0x226>
 800913e:	bf00      	nop
 8009140:	0800b6e6 	.word	0x0800b6e6
 8009144:	0800b6f7 	.word	0x0800b6f7

08009148 <siprintf>:
 8009148:	b40e      	push	{r1, r2, r3}
 800914a:	b500      	push	{lr}
 800914c:	b09c      	sub	sp, #112	; 0x70
 800914e:	ab1d      	add	r3, sp, #116	; 0x74
 8009150:	9002      	str	r0, [sp, #8]
 8009152:	9006      	str	r0, [sp, #24]
 8009154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009158:	4809      	ldr	r0, [pc, #36]	; (8009180 <siprintf+0x38>)
 800915a:	9107      	str	r1, [sp, #28]
 800915c:	9104      	str	r1, [sp, #16]
 800915e:	4909      	ldr	r1, [pc, #36]	; (8009184 <siprintf+0x3c>)
 8009160:	f853 2b04 	ldr.w	r2, [r3], #4
 8009164:	9105      	str	r1, [sp, #20]
 8009166:	6800      	ldr	r0, [r0, #0]
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	a902      	add	r1, sp, #8
 800916c:	f000 ffd8 	bl	800a120 <_svfiprintf_r>
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	2200      	movs	r2, #0
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	b01c      	add	sp, #112	; 0x70
 8009178:	f85d eb04 	ldr.w	lr, [sp], #4
 800917c:	b003      	add	sp, #12
 800917e:	4770      	bx	lr
 8009180:	200000e8 	.word	0x200000e8
 8009184:	ffff0208 	.word	0xffff0208

08009188 <std>:
 8009188:	2300      	movs	r3, #0
 800918a:	b510      	push	{r4, lr}
 800918c:	4604      	mov	r4, r0
 800918e:	e9c0 3300 	strd	r3, r3, [r0]
 8009192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009196:	6083      	str	r3, [r0, #8]
 8009198:	8181      	strh	r1, [r0, #12]
 800919a:	6643      	str	r3, [r0, #100]	; 0x64
 800919c:	81c2      	strh	r2, [r0, #14]
 800919e:	6183      	str	r3, [r0, #24]
 80091a0:	4619      	mov	r1, r3
 80091a2:	2208      	movs	r2, #8
 80091a4:	305c      	adds	r0, #92	; 0x5c
 80091a6:	f000 f89f 	bl	80092e8 <memset>
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <std+0x38>)
 80091ac:	6263      	str	r3, [r4, #36]	; 0x24
 80091ae:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <std+0x3c>)
 80091b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80091b2:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <std+0x40>)
 80091b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091b6:	4b05      	ldr	r3, [pc, #20]	; (80091cc <std+0x44>)
 80091b8:	6224      	str	r4, [r4, #32]
 80091ba:	6323      	str	r3, [r4, #48]	; 0x30
 80091bc:	bd10      	pop	{r4, pc}
 80091be:	bf00      	nop
 80091c0:	0800acd9 	.word	0x0800acd9
 80091c4:	0800acfb 	.word	0x0800acfb
 80091c8:	0800ad33 	.word	0x0800ad33
 80091cc:	0800ad57 	.word	0x0800ad57

080091d0 <stdio_exit_handler>:
 80091d0:	4a02      	ldr	r2, [pc, #8]	; (80091dc <stdio_exit_handler+0xc>)
 80091d2:	4903      	ldr	r1, [pc, #12]	; (80091e0 <stdio_exit_handler+0x10>)
 80091d4:	4803      	ldr	r0, [pc, #12]	; (80091e4 <stdio_exit_handler+0x14>)
 80091d6:	f000 b869 	b.w	80092ac <_fwalk_sglue>
 80091da:	bf00      	nop
 80091dc:	20000090 	.word	0x20000090
 80091e0:	0800a579 	.word	0x0800a579
 80091e4:	2000009c 	.word	0x2000009c

080091e8 <cleanup_stdio>:
 80091e8:	6841      	ldr	r1, [r0, #4]
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <cleanup_stdio+0x34>)
 80091ec:	4299      	cmp	r1, r3
 80091ee:	b510      	push	{r4, lr}
 80091f0:	4604      	mov	r4, r0
 80091f2:	d001      	beq.n	80091f8 <cleanup_stdio+0x10>
 80091f4:	f001 f9c0 	bl	800a578 <_fflush_r>
 80091f8:	68a1      	ldr	r1, [r4, #8]
 80091fa:	4b09      	ldr	r3, [pc, #36]	; (8009220 <cleanup_stdio+0x38>)
 80091fc:	4299      	cmp	r1, r3
 80091fe:	d002      	beq.n	8009206 <cleanup_stdio+0x1e>
 8009200:	4620      	mov	r0, r4
 8009202:	f001 f9b9 	bl	800a578 <_fflush_r>
 8009206:	68e1      	ldr	r1, [r4, #12]
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <cleanup_stdio+0x3c>)
 800920a:	4299      	cmp	r1, r3
 800920c:	d004      	beq.n	8009218 <cleanup_stdio+0x30>
 800920e:	4620      	mov	r0, r4
 8009210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009214:	f001 b9b0 	b.w	800a578 <_fflush_r>
 8009218:	bd10      	pop	{r4, pc}
 800921a:	bf00      	nop
 800921c:	20001448 	.word	0x20001448
 8009220:	200014b0 	.word	0x200014b0
 8009224:	20001518 	.word	0x20001518

08009228 <global_stdio_init.part.0>:
 8009228:	b510      	push	{r4, lr}
 800922a:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <global_stdio_init.part.0+0x30>)
 800922c:	4c0b      	ldr	r4, [pc, #44]	; (800925c <global_stdio_init.part.0+0x34>)
 800922e:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <global_stdio_init.part.0+0x38>)
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	4620      	mov	r0, r4
 8009234:	2200      	movs	r2, #0
 8009236:	2104      	movs	r1, #4
 8009238:	f7ff ffa6 	bl	8009188 <std>
 800923c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009240:	2201      	movs	r2, #1
 8009242:	2109      	movs	r1, #9
 8009244:	f7ff ffa0 	bl	8009188 <std>
 8009248:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800924c:	2202      	movs	r2, #2
 800924e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009252:	2112      	movs	r1, #18
 8009254:	f7ff bf98 	b.w	8009188 <std>
 8009258:	20001580 	.word	0x20001580
 800925c:	20001448 	.word	0x20001448
 8009260:	080091d1 	.word	0x080091d1

08009264 <__sfp_lock_acquire>:
 8009264:	4801      	ldr	r0, [pc, #4]	; (800926c <__sfp_lock_acquire+0x8>)
 8009266:	f000 b875 	b.w	8009354 <__retarget_lock_acquire_recursive>
 800926a:	bf00      	nop
 800926c:	20001585 	.word	0x20001585

08009270 <__sfp_lock_release>:
 8009270:	4801      	ldr	r0, [pc, #4]	; (8009278 <__sfp_lock_release+0x8>)
 8009272:	f000 b870 	b.w	8009356 <__retarget_lock_release_recursive>
 8009276:	bf00      	nop
 8009278:	20001585 	.word	0x20001585

0800927c <__sinit>:
 800927c:	b510      	push	{r4, lr}
 800927e:	4604      	mov	r4, r0
 8009280:	f7ff fff0 	bl	8009264 <__sfp_lock_acquire>
 8009284:	6a23      	ldr	r3, [r4, #32]
 8009286:	b11b      	cbz	r3, 8009290 <__sinit+0x14>
 8009288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928c:	f7ff bff0 	b.w	8009270 <__sfp_lock_release>
 8009290:	4b04      	ldr	r3, [pc, #16]	; (80092a4 <__sinit+0x28>)
 8009292:	6223      	str	r3, [r4, #32]
 8009294:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <__sinit+0x2c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1f5      	bne.n	8009288 <__sinit+0xc>
 800929c:	f7ff ffc4 	bl	8009228 <global_stdio_init.part.0>
 80092a0:	e7f2      	b.n	8009288 <__sinit+0xc>
 80092a2:	bf00      	nop
 80092a4:	080091e9 	.word	0x080091e9
 80092a8:	20001580 	.word	0x20001580

080092ac <_fwalk_sglue>:
 80092ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b0:	4607      	mov	r7, r0
 80092b2:	4688      	mov	r8, r1
 80092b4:	4614      	mov	r4, r2
 80092b6:	2600      	movs	r6, #0
 80092b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092bc:	f1b9 0901 	subs.w	r9, r9, #1
 80092c0:	d505      	bpl.n	80092ce <_fwalk_sglue+0x22>
 80092c2:	6824      	ldr	r4, [r4, #0]
 80092c4:	2c00      	cmp	r4, #0
 80092c6:	d1f7      	bne.n	80092b8 <_fwalk_sglue+0xc>
 80092c8:	4630      	mov	r0, r6
 80092ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d907      	bls.n	80092e4 <_fwalk_sglue+0x38>
 80092d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092d8:	3301      	adds	r3, #1
 80092da:	d003      	beq.n	80092e4 <_fwalk_sglue+0x38>
 80092dc:	4629      	mov	r1, r5
 80092de:	4638      	mov	r0, r7
 80092e0:	47c0      	blx	r8
 80092e2:	4306      	orrs	r6, r0
 80092e4:	3568      	adds	r5, #104	; 0x68
 80092e6:	e7e9      	b.n	80092bc <_fwalk_sglue+0x10>

080092e8 <memset>:
 80092e8:	4402      	add	r2, r0
 80092ea:	4603      	mov	r3, r0
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d100      	bne.n	80092f2 <memset+0xa>
 80092f0:	4770      	bx	lr
 80092f2:	f803 1b01 	strb.w	r1, [r3], #1
 80092f6:	e7f9      	b.n	80092ec <memset+0x4>

080092f8 <_localeconv_r>:
 80092f8:	4800      	ldr	r0, [pc, #0]	; (80092fc <_localeconv_r+0x4>)
 80092fa:	4770      	bx	lr
 80092fc:	200001dc 	.word	0x200001dc

08009300 <__errno>:
 8009300:	4b01      	ldr	r3, [pc, #4]	; (8009308 <__errno+0x8>)
 8009302:	6818      	ldr	r0, [r3, #0]
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	200000e8 	.word	0x200000e8

0800930c <__libc_init_array>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	4d0d      	ldr	r5, [pc, #52]	; (8009344 <__libc_init_array+0x38>)
 8009310:	4c0d      	ldr	r4, [pc, #52]	; (8009348 <__libc_init_array+0x3c>)
 8009312:	1b64      	subs	r4, r4, r5
 8009314:	10a4      	asrs	r4, r4, #2
 8009316:	2600      	movs	r6, #0
 8009318:	42a6      	cmp	r6, r4
 800931a:	d109      	bne.n	8009330 <__libc_init_array+0x24>
 800931c:	4d0b      	ldr	r5, [pc, #44]	; (800934c <__libc_init_array+0x40>)
 800931e:	4c0c      	ldr	r4, [pc, #48]	; (8009350 <__libc_init_array+0x44>)
 8009320:	f002 f91e 	bl	800b560 <_init>
 8009324:	1b64      	subs	r4, r4, r5
 8009326:	10a4      	asrs	r4, r4, #2
 8009328:	2600      	movs	r6, #0
 800932a:	42a6      	cmp	r6, r4
 800932c:	d105      	bne.n	800933a <__libc_init_array+0x2e>
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	f855 3b04 	ldr.w	r3, [r5], #4
 8009334:	4798      	blx	r3
 8009336:	3601      	adds	r6, #1
 8009338:	e7ee      	b.n	8009318 <__libc_init_array+0xc>
 800933a:	f855 3b04 	ldr.w	r3, [r5], #4
 800933e:	4798      	blx	r3
 8009340:	3601      	adds	r6, #1
 8009342:	e7f2      	b.n	800932a <__libc_init_array+0x1e>
 8009344:	0800ba4c 	.word	0x0800ba4c
 8009348:	0800ba4c 	.word	0x0800ba4c
 800934c:	0800ba4c 	.word	0x0800ba4c
 8009350:	0800ba50 	.word	0x0800ba50

08009354 <__retarget_lock_acquire_recursive>:
 8009354:	4770      	bx	lr

08009356 <__retarget_lock_release_recursive>:
 8009356:	4770      	bx	lr

08009358 <memcpy>:
 8009358:	440a      	add	r2, r1
 800935a:	4291      	cmp	r1, r2
 800935c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009360:	d100      	bne.n	8009364 <memcpy+0xc>
 8009362:	4770      	bx	lr
 8009364:	b510      	push	{r4, lr}
 8009366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800936a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936e:	4291      	cmp	r1, r2
 8009370:	d1f9      	bne.n	8009366 <memcpy+0xe>
 8009372:	bd10      	pop	{r4, pc}

08009374 <quorem>:
 8009374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009378:	6903      	ldr	r3, [r0, #16]
 800937a:	690c      	ldr	r4, [r1, #16]
 800937c:	42a3      	cmp	r3, r4
 800937e:	4607      	mov	r7, r0
 8009380:	db7e      	blt.n	8009480 <quorem+0x10c>
 8009382:	3c01      	subs	r4, #1
 8009384:	f101 0814 	add.w	r8, r1, #20
 8009388:	f100 0514 	add.w	r5, r0, #20
 800938c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009396:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800939a:	3301      	adds	r3, #1
 800939c:	429a      	cmp	r2, r3
 800939e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80093aa:	d331      	bcc.n	8009410 <quorem+0x9c>
 80093ac:	f04f 0e00 	mov.w	lr, #0
 80093b0:	4640      	mov	r0, r8
 80093b2:	46ac      	mov	ip, r5
 80093b4:	46f2      	mov	sl, lr
 80093b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80093ba:	b293      	uxth	r3, r2
 80093bc:	fb06 e303 	mla	r3, r6, r3, lr
 80093c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093c4:	0c1a      	lsrs	r2, r3, #16
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	ebaa 0303 	sub.w	r3, sl, r3
 80093cc:	f8dc a000 	ldr.w	sl, [ip]
 80093d0:	fa13 f38a 	uxtah	r3, r3, sl
 80093d4:	fb06 220e 	mla	r2, r6, lr, r2
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	9b00      	ldr	r3, [sp, #0]
 80093dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093e0:	b292      	uxth	r2, r2
 80093e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80093ee:	4581      	cmp	r9, r0
 80093f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093f4:	f84c 3b04 	str.w	r3, [ip], #4
 80093f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093fc:	d2db      	bcs.n	80093b6 <quorem+0x42>
 80093fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8009402:	b92b      	cbnz	r3, 8009410 <quorem+0x9c>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	3b04      	subs	r3, #4
 8009408:	429d      	cmp	r5, r3
 800940a:	461a      	mov	r2, r3
 800940c:	d32c      	bcc.n	8009468 <quorem+0xf4>
 800940e:	613c      	str	r4, [r7, #16]
 8009410:	4638      	mov	r0, r7
 8009412:	f001 fb61 	bl	800aad8 <__mcmp>
 8009416:	2800      	cmp	r0, #0
 8009418:	db22      	blt.n	8009460 <quorem+0xec>
 800941a:	3601      	adds	r6, #1
 800941c:	4629      	mov	r1, r5
 800941e:	2000      	movs	r0, #0
 8009420:	f858 2b04 	ldr.w	r2, [r8], #4
 8009424:	f8d1 c000 	ldr.w	ip, [r1]
 8009428:	b293      	uxth	r3, r2
 800942a:	1ac3      	subs	r3, r0, r3
 800942c:	0c12      	lsrs	r2, r2, #16
 800942e:	fa13 f38c 	uxtah	r3, r3, ip
 8009432:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009436:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800943a:	b29b      	uxth	r3, r3
 800943c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009440:	45c1      	cmp	r9, r8
 8009442:	f841 3b04 	str.w	r3, [r1], #4
 8009446:	ea4f 4022 	mov.w	r0, r2, asr #16
 800944a:	d2e9      	bcs.n	8009420 <quorem+0xac>
 800944c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009450:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009454:	b922      	cbnz	r2, 8009460 <quorem+0xec>
 8009456:	3b04      	subs	r3, #4
 8009458:	429d      	cmp	r5, r3
 800945a:	461a      	mov	r2, r3
 800945c:	d30a      	bcc.n	8009474 <quorem+0x100>
 800945e:	613c      	str	r4, [r7, #16]
 8009460:	4630      	mov	r0, r6
 8009462:	b003      	add	sp, #12
 8009464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009468:	6812      	ldr	r2, [r2, #0]
 800946a:	3b04      	subs	r3, #4
 800946c:	2a00      	cmp	r2, #0
 800946e:	d1ce      	bne.n	800940e <quorem+0x9a>
 8009470:	3c01      	subs	r4, #1
 8009472:	e7c9      	b.n	8009408 <quorem+0x94>
 8009474:	6812      	ldr	r2, [r2, #0]
 8009476:	3b04      	subs	r3, #4
 8009478:	2a00      	cmp	r2, #0
 800947a:	d1f0      	bne.n	800945e <quorem+0xea>
 800947c:	3c01      	subs	r4, #1
 800947e:	e7eb      	b.n	8009458 <quorem+0xe4>
 8009480:	2000      	movs	r0, #0
 8009482:	e7ee      	b.n	8009462 <quorem+0xee>
 8009484:	0000      	movs	r0, r0
	...

08009488 <_dtoa_r>:
 8009488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	ed2d 8b04 	vpush	{d8-d9}
 8009490:	69c5      	ldr	r5, [r0, #28]
 8009492:	b093      	sub	sp, #76	; 0x4c
 8009494:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009498:	ec57 6b10 	vmov	r6, r7, d0
 800949c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094a0:	9107      	str	r1, [sp, #28]
 80094a2:	4604      	mov	r4, r0
 80094a4:	920a      	str	r2, [sp, #40]	; 0x28
 80094a6:	930d      	str	r3, [sp, #52]	; 0x34
 80094a8:	b975      	cbnz	r5, 80094c8 <_dtoa_r+0x40>
 80094aa:	2010      	movs	r0, #16
 80094ac:	f000 ff36 	bl	800a31c <malloc>
 80094b0:	4602      	mov	r2, r0
 80094b2:	61e0      	str	r0, [r4, #28]
 80094b4:	b920      	cbnz	r0, 80094c0 <_dtoa_r+0x38>
 80094b6:	4bae      	ldr	r3, [pc, #696]	; (8009770 <_dtoa_r+0x2e8>)
 80094b8:	21ef      	movs	r1, #239	; 0xef
 80094ba:	48ae      	ldr	r0, [pc, #696]	; (8009774 <_dtoa_r+0x2ec>)
 80094bc:	f001 fcee 	bl	800ae9c <__assert_func>
 80094c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094c4:	6005      	str	r5, [r0, #0]
 80094c6:	60c5      	str	r5, [r0, #12]
 80094c8:	69e3      	ldr	r3, [r4, #28]
 80094ca:	6819      	ldr	r1, [r3, #0]
 80094cc:	b151      	cbz	r1, 80094e4 <_dtoa_r+0x5c>
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	604a      	str	r2, [r1, #4]
 80094d2:	2301      	movs	r3, #1
 80094d4:	4093      	lsls	r3, r2
 80094d6:	608b      	str	r3, [r1, #8]
 80094d8:	4620      	mov	r0, r4
 80094da:	f001 f8c1 	bl	800a660 <_Bfree>
 80094de:	69e3      	ldr	r3, [r4, #28]
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	1e3b      	subs	r3, r7, #0
 80094e6:	bfbb      	ittet	lt
 80094e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094ec:	9303      	strlt	r3, [sp, #12]
 80094ee:	2300      	movge	r3, #0
 80094f0:	2201      	movlt	r2, #1
 80094f2:	bfac      	ite	ge
 80094f4:	f8c8 3000 	strge.w	r3, [r8]
 80094f8:	f8c8 2000 	strlt.w	r2, [r8]
 80094fc:	4b9e      	ldr	r3, [pc, #632]	; (8009778 <_dtoa_r+0x2f0>)
 80094fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009502:	ea33 0308 	bics.w	r3, r3, r8
 8009506:	d11b      	bne.n	8009540 <_dtoa_r+0xb8>
 8009508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800950a:	f242 730f 	movw	r3, #9999	; 0x270f
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009514:	4333      	orrs	r3, r6
 8009516:	f000 8593 	beq.w	800a040 <_dtoa_r+0xbb8>
 800951a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800951c:	b963      	cbnz	r3, 8009538 <_dtoa_r+0xb0>
 800951e:	4b97      	ldr	r3, [pc, #604]	; (800977c <_dtoa_r+0x2f4>)
 8009520:	e027      	b.n	8009572 <_dtoa_r+0xea>
 8009522:	4b97      	ldr	r3, [pc, #604]	; (8009780 <_dtoa_r+0x2f8>)
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	9800      	ldr	r0, [sp, #0]
 800952e:	b013      	add	sp, #76	; 0x4c
 8009530:	ecbd 8b04 	vpop	{d8-d9}
 8009534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009538:	4b90      	ldr	r3, [pc, #576]	; (800977c <_dtoa_r+0x2f4>)
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	3303      	adds	r3, #3
 800953e:	e7f3      	b.n	8009528 <_dtoa_r+0xa0>
 8009540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009544:	2200      	movs	r2, #0
 8009546:	ec51 0b17 	vmov	r0, r1, d7
 800954a:	eeb0 8a47 	vmov.f32	s16, s14
 800954e:	eef0 8a67 	vmov.f32	s17, s15
 8009552:	2300      	movs	r3, #0
 8009554:	f7f7 fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009558:	4681      	mov	r9, r0
 800955a:	b160      	cbz	r0, 8009576 <_dtoa_r+0xee>
 800955c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800955e:	2301      	movs	r3, #1
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 8568 	beq.w	800a03a <_dtoa_r+0xbb2>
 800956a:	4b86      	ldr	r3, [pc, #536]	; (8009784 <_dtoa_r+0x2fc>)
 800956c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	3b01      	subs	r3, #1
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	e7da      	b.n	800952c <_dtoa_r+0xa4>
 8009576:	aa10      	add	r2, sp, #64	; 0x40
 8009578:	a911      	add	r1, sp, #68	; 0x44
 800957a:	4620      	mov	r0, r4
 800957c:	eeb0 0a48 	vmov.f32	s0, s16
 8009580:	eef0 0a68 	vmov.f32	s1, s17
 8009584:	f001 fb4e 	bl	800ac24 <__d2b>
 8009588:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800958c:	4682      	mov	sl, r0
 800958e:	2d00      	cmp	r5, #0
 8009590:	d07f      	beq.n	8009692 <_dtoa_r+0x20a>
 8009592:	ee18 3a90 	vmov	r3, s17
 8009596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800959a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800959e:	ec51 0b18 	vmov	r0, r1, d8
 80095a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80095a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80095ae:	4619      	mov	r1, r3
 80095b0:	2200      	movs	r2, #0
 80095b2:	4b75      	ldr	r3, [pc, #468]	; (8009788 <_dtoa_r+0x300>)
 80095b4:	f7f6 fe68 	bl	8000288 <__aeabi_dsub>
 80095b8:	a367      	add	r3, pc, #412	; (adr r3, 8009758 <_dtoa_r+0x2d0>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f7 f81b 	bl	80005f8 <__aeabi_dmul>
 80095c2:	a367      	add	r3, pc, #412	; (adr r3, 8009760 <_dtoa_r+0x2d8>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f6 fe60 	bl	800028c <__adddf3>
 80095cc:	4606      	mov	r6, r0
 80095ce:	4628      	mov	r0, r5
 80095d0:	460f      	mov	r7, r1
 80095d2:	f7f6 ffa7 	bl	8000524 <__aeabi_i2d>
 80095d6:	a364      	add	r3, pc, #400	; (adr r3, 8009768 <_dtoa_r+0x2e0>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f7 f80c 	bl	80005f8 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f6 fe50 	bl	800028c <__adddf3>
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	f7f7 fab2 	bl	8000b58 <__aeabi_d2iz>
 80095f4:	2200      	movs	r2, #0
 80095f6:	4683      	mov	fp, r0
 80095f8:	2300      	movs	r3, #0
 80095fa:	4630      	mov	r0, r6
 80095fc:	4639      	mov	r1, r7
 80095fe:	f7f7 fa6d 	bl	8000adc <__aeabi_dcmplt>
 8009602:	b148      	cbz	r0, 8009618 <_dtoa_r+0x190>
 8009604:	4658      	mov	r0, fp
 8009606:	f7f6 ff8d 	bl	8000524 <__aeabi_i2d>
 800960a:	4632      	mov	r2, r6
 800960c:	463b      	mov	r3, r7
 800960e:	f7f7 fa5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009612:	b908      	cbnz	r0, 8009618 <_dtoa_r+0x190>
 8009614:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009618:	f1bb 0f16 	cmp.w	fp, #22
 800961c:	d857      	bhi.n	80096ce <_dtoa_r+0x246>
 800961e:	4b5b      	ldr	r3, [pc, #364]	; (800978c <_dtoa_r+0x304>)
 8009620:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	ec51 0b18 	vmov	r0, r1, d8
 800962c:	f7f7 fa56 	bl	8000adc <__aeabi_dcmplt>
 8009630:	2800      	cmp	r0, #0
 8009632:	d04e      	beq.n	80096d2 <_dtoa_r+0x24a>
 8009634:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009638:	2300      	movs	r3, #0
 800963a:	930c      	str	r3, [sp, #48]	; 0x30
 800963c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963e:	1b5b      	subs	r3, r3, r5
 8009640:	1e5a      	subs	r2, r3, #1
 8009642:	bf45      	ittet	mi
 8009644:	f1c3 0301 	rsbmi	r3, r3, #1
 8009648:	9305      	strmi	r3, [sp, #20]
 800964a:	2300      	movpl	r3, #0
 800964c:	2300      	movmi	r3, #0
 800964e:	9206      	str	r2, [sp, #24]
 8009650:	bf54      	ite	pl
 8009652:	9305      	strpl	r3, [sp, #20]
 8009654:	9306      	strmi	r3, [sp, #24]
 8009656:	f1bb 0f00 	cmp.w	fp, #0
 800965a:	db3c      	blt.n	80096d6 <_dtoa_r+0x24e>
 800965c:	9b06      	ldr	r3, [sp, #24]
 800965e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009662:	445b      	add	r3, fp
 8009664:	9306      	str	r3, [sp, #24]
 8009666:	2300      	movs	r3, #0
 8009668:	9308      	str	r3, [sp, #32]
 800966a:	9b07      	ldr	r3, [sp, #28]
 800966c:	2b09      	cmp	r3, #9
 800966e:	d868      	bhi.n	8009742 <_dtoa_r+0x2ba>
 8009670:	2b05      	cmp	r3, #5
 8009672:	bfc4      	itt	gt
 8009674:	3b04      	subgt	r3, #4
 8009676:	9307      	strgt	r3, [sp, #28]
 8009678:	9b07      	ldr	r3, [sp, #28]
 800967a:	f1a3 0302 	sub.w	r3, r3, #2
 800967e:	bfcc      	ite	gt
 8009680:	2500      	movgt	r5, #0
 8009682:	2501      	movle	r5, #1
 8009684:	2b03      	cmp	r3, #3
 8009686:	f200 8085 	bhi.w	8009794 <_dtoa_r+0x30c>
 800968a:	e8df f003 	tbb	[pc, r3]
 800968e:	3b2e      	.short	0x3b2e
 8009690:	5839      	.short	0x5839
 8009692:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009696:	441d      	add	r5, r3
 8009698:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800969c:	2b20      	cmp	r3, #32
 800969e:	bfc1      	itttt	gt
 80096a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80096a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80096ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80096b0:	bfd6      	itet	le
 80096b2:	f1c3 0320 	rsble	r3, r3, #32
 80096b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80096ba:	fa06 f003 	lslle.w	r0, r6, r3
 80096be:	f7f6 ff21 	bl	8000504 <__aeabi_ui2d>
 80096c2:	2201      	movs	r2, #1
 80096c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80096c8:	3d01      	subs	r5, #1
 80096ca:	920e      	str	r2, [sp, #56]	; 0x38
 80096cc:	e76f      	b.n	80095ae <_dtoa_r+0x126>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e7b3      	b.n	800963a <_dtoa_r+0x1b2>
 80096d2:	900c      	str	r0, [sp, #48]	; 0x30
 80096d4:	e7b2      	b.n	800963c <_dtoa_r+0x1b4>
 80096d6:	9b05      	ldr	r3, [sp, #20]
 80096d8:	eba3 030b 	sub.w	r3, r3, fp
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	f1cb 0300 	rsb	r3, fp, #0
 80096e2:	9308      	str	r3, [sp, #32]
 80096e4:	2300      	movs	r3, #0
 80096e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80096e8:	e7bf      	b.n	800966a <_dtoa_r+0x1e2>
 80096ea:	2300      	movs	r3, #0
 80096ec:	9309      	str	r3, [sp, #36]	; 0x24
 80096ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dc52      	bgt.n	800979a <_dtoa_r+0x312>
 80096f4:	2301      	movs	r3, #1
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	461a      	mov	r2, r3
 80096fc:	920a      	str	r2, [sp, #40]	; 0x28
 80096fe:	e00b      	b.n	8009718 <_dtoa_r+0x290>
 8009700:	2301      	movs	r3, #1
 8009702:	e7f3      	b.n	80096ec <_dtoa_r+0x264>
 8009704:	2300      	movs	r3, #0
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970a:	445b      	add	r3, fp
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	3301      	adds	r3, #1
 8009710:	2b01      	cmp	r3, #1
 8009712:	9304      	str	r3, [sp, #16]
 8009714:	bfb8      	it	lt
 8009716:	2301      	movlt	r3, #1
 8009718:	69e0      	ldr	r0, [r4, #28]
 800971a:	2100      	movs	r1, #0
 800971c:	2204      	movs	r2, #4
 800971e:	f102 0614 	add.w	r6, r2, #20
 8009722:	429e      	cmp	r6, r3
 8009724:	d93d      	bls.n	80097a2 <_dtoa_r+0x31a>
 8009726:	6041      	str	r1, [r0, #4]
 8009728:	4620      	mov	r0, r4
 800972a:	f000 ff59 	bl	800a5e0 <_Balloc>
 800972e:	9000      	str	r0, [sp, #0]
 8009730:	2800      	cmp	r0, #0
 8009732:	d139      	bne.n	80097a8 <_dtoa_r+0x320>
 8009734:	4b16      	ldr	r3, [pc, #88]	; (8009790 <_dtoa_r+0x308>)
 8009736:	4602      	mov	r2, r0
 8009738:	f240 11af 	movw	r1, #431	; 0x1af
 800973c:	e6bd      	b.n	80094ba <_dtoa_r+0x32>
 800973e:	2301      	movs	r3, #1
 8009740:	e7e1      	b.n	8009706 <_dtoa_r+0x27e>
 8009742:	2501      	movs	r5, #1
 8009744:	2300      	movs	r3, #0
 8009746:	9307      	str	r3, [sp, #28]
 8009748:	9509      	str	r5, [sp, #36]	; 0x24
 800974a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	2200      	movs	r2, #0
 8009754:	2312      	movs	r3, #18
 8009756:	e7d1      	b.n	80096fc <_dtoa_r+0x274>
 8009758:	636f4361 	.word	0x636f4361
 800975c:	3fd287a7 	.word	0x3fd287a7
 8009760:	8b60c8b3 	.word	0x8b60c8b3
 8009764:	3fc68a28 	.word	0x3fc68a28
 8009768:	509f79fb 	.word	0x509f79fb
 800976c:	3fd34413 	.word	0x3fd34413
 8009770:	0800b715 	.word	0x0800b715
 8009774:	0800b72c 	.word	0x0800b72c
 8009778:	7ff00000 	.word	0x7ff00000
 800977c:	0800b711 	.word	0x0800b711
 8009780:	0800b708 	.word	0x0800b708
 8009784:	0800b6e5 	.word	0x0800b6e5
 8009788:	3ff80000 	.word	0x3ff80000
 800978c:	0800b828 	.word	0x0800b828
 8009790:	0800b784 	.word	0x0800b784
 8009794:	2301      	movs	r3, #1
 8009796:	9309      	str	r3, [sp, #36]	; 0x24
 8009798:	e7d7      	b.n	800974a <_dtoa_r+0x2c2>
 800979a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	9304      	str	r3, [sp, #16]
 80097a0:	e7ba      	b.n	8009718 <_dtoa_r+0x290>
 80097a2:	3101      	adds	r1, #1
 80097a4:	0052      	lsls	r2, r2, #1
 80097a6:	e7ba      	b.n	800971e <_dtoa_r+0x296>
 80097a8:	69e3      	ldr	r3, [r4, #28]
 80097aa:	9a00      	ldr	r2, [sp, #0]
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	9b04      	ldr	r3, [sp, #16]
 80097b0:	2b0e      	cmp	r3, #14
 80097b2:	f200 80a8 	bhi.w	8009906 <_dtoa_r+0x47e>
 80097b6:	2d00      	cmp	r5, #0
 80097b8:	f000 80a5 	beq.w	8009906 <_dtoa_r+0x47e>
 80097bc:	f1bb 0f00 	cmp.w	fp, #0
 80097c0:	dd38      	ble.n	8009834 <_dtoa_r+0x3ac>
 80097c2:	4bc0      	ldr	r3, [pc, #768]	; (8009ac4 <_dtoa_r+0x63c>)
 80097c4:	f00b 020f 	and.w	r2, fp, #15
 80097c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80097d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80097d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80097d8:	d019      	beq.n	800980e <_dtoa_r+0x386>
 80097da:	4bbb      	ldr	r3, [pc, #748]	; (8009ac8 <_dtoa_r+0x640>)
 80097dc:	ec51 0b18 	vmov	r0, r1, d8
 80097e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097e4:	f7f7 f832 	bl	800084c <__aeabi_ddiv>
 80097e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ec:	f008 080f 	and.w	r8, r8, #15
 80097f0:	2503      	movs	r5, #3
 80097f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009ac8 <_dtoa_r+0x640>
 80097f6:	f1b8 0f00 	cmp.w	r8, #0
 80097fa:	d10a      	bne.n	8009812 <_dtoa_r+0x38a>
 80097fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009800:	4632      	mov	r2, r6
 8009802:	463b      	mov	r3, r7
 8009804:	f7f7 f822 	bl	800084c <__aeabi_ddiv>
 8009808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800980c:	e02b      	b.n	8009866 <_dtoa_r+0x3de>
 800980e:	2502      	movs	r5, #2
 8009810:	e7ef      	b.n	80097f2 <_dtoa_r+0x36a>
 8009812:	f018 0f01 	tst.w	r8, #1
 8009816:	d008      	beq.n	800982a <_dtoa_r+0x3a2>
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009820:	f7f6 feea 	bl	80005f8 <__aeabi_dmul>
 8009824:	3501      	adds	r5, #1
 8009826:	4606      	mov	r6, r0
 8009828:	460f      	mov	r7, r1
 800982a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800982e:	f109 0908 	add.w	r9, r9, #8
 8009832:	e7e0      	b.n	80097f6 <_dtoa_r+0x36e>
 8009834:	f000 809f 	beq.w	8009976 <_dtoa_r+0x4ee>
 8009838:	f1cb 0600 	rsb	r6, fp, #0
 800983c:	4ba1      	ldr	r3, [pc, #644]	; (8009ac4 <_dtoa_r+0x63c>)
 800983e:	4fa2      	ldr	r7, [pc, #648]	; (8009ac8 <_dtoa_r+0x640>)
 8009840:	f006 020f 	and.w	r2, r6, #15
 8009844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	ec51 0b18 	vmov	r0, r1, d8
 8009850:	f7f6 fed2 	bl	80005f8 <__aeabi_dmul>
 8009854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009858:	1136      	asrs	r6, r6, #4
 800985a:	2300      	movs	r3, #0
 800985c:	2502      	movs	r5, #2
 800985e:	2e00      	cmp	r6, #0
 8009860:	d17e      	bne.n	8009960 <_dtoa_r+0x4d8>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1d0      	bne.n	8009808 <_dtoa_r+0x380>
 8009866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009868:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8084 	beq.w	800997a <_dtoa_r+0x4f2>
 8009872:	4b96      	ldr	r3, [pc, #600]	; (8009acc <_dtoa_r+0x644>)
 8009874:	2200      	movs	r2, #0
 8009876:	4640      	mov	r0, r8
 8009878:	4649      	mov	r1, r9
 800987a:	f7f7 f92f 	bl	8000adc <__aeabi_dcmplt>
 800987e:	2800      	cmp	r0, #0
 8009880:	d07b      	beq.n	800997a <_dtoa_r+0x4f2>
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d078      	beq.n	800997a <_dtoa_r+0x4f2>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	dd39      	ble.n	8009902 <_dtoa_r+0x47a>
 800988e:	4b90      	ldr	r3, [pc, #576]	; (8009ad0 <_dtoa_r+0x648>)
 8009890:	2200      	movs	r2, #0
 8009892:	4640      	mov	r0, r8
 8009894:	4649      	mov	r1, r9
 8009896:	f7f6 feaf 	bl	80005f8 <__aeabi_dmul>
 800989a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800989e:	9e01      	ldr	r6, [sp, #4]
 80098a0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80098a4:	3501      	adds	r5, #1
 80098a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098aa:	4628      	mov	r0, r5
 80098ac:	f7f6 fe3a 	bl	8000524 <__aeabi_i2d>
 80098b0:	4642      	mov	r2, r8
 80098b2:	464b      	mov	r3, r9
 80098b4:	f7f6 fea0 	bl	80005f8 <__aeabi_dmul>
 80098b8:	4b86      	ldr	r3, [pc, #536]	; (8009ad4 <_dtoa_r+0x64c>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	f7f6 fce6 	bl	800028c <__adddf3>
 80098c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80098c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098c8:	9303      	str	r3, [sp, #12]
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d158      	bne.n	8009980 <_dtoa_r+0x4f8>
 80098ce:	4b82      	ldr	r3, [pc, #520]	; (8009ad8 <_dtoa_r+0x650>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	f7f6 fcd7 	bl	8000288 <__aeabi_dsub>
 80098da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098de:	4680      	mov	r8, r0
 80098e0:	4689      	mov	r9, r1
 80098e2:	f7f7 f919 	bl	8000b18 <__aeabi_dcmpgt>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f040 8296 	bne.w	8009e18 <_dtoa_r+0x990>
 80098ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80098f0:	4640      	mov	r0, r8
 80098f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098f6:	4649      	mov	r1, r9
 80098f8:	f7f7 f8f0 	bl	8000adc <__aeabi_dcmplt>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f040 8289 	bne.w	8009e14 <_dtoa_r+0x98c>
 8009902:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009908:	2b00      	cmp	r3, #0
 800990a:	f2c0 814e 	blt.w	8009baa <_dtoa_r+0x722>
 800990e:	f1bb 0f0e 	cmp.w	fp, #14
 8009912:	f300 814a 	bgt.w	8009baa <_dtoa_r+0x722>
 8009916:	4b6b      	ldr	r3, [pc, #428]	; (8009ac4 <_dtoa_r+0x63c>)
 8009918:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800991c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009922:	2b00      	cmp	r3, #0
 8009924:	f280 80dc 	bge.w	8009ae0 <_dtoa_r+0x658>
 8009928:	9b04      	ldr	r3, [sp, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f300 80d8 	bgt.w	8009ae0 <_dtoa_r+0x658>
 8009930:	f040 826f 	bne.w	8009e12 <_dtoa_r+0x98a>
 8009934:	4b68      	ldr	r3, [pc, #416]	; (8009ad8 <_dtoa_r+0x650>)
 8009936:	2200      	movs	r2, #0
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	f7f6 fe5c 	bl	80005f8 <__aeabi_dmul>
 8009940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009944:	f7f7 f8de 	bl	8000b04 <__aeabi_dcmpge>
 8009948:	9e04      	ldr	r6, [sp, #16]
 800994a:	4637      	mov	r7, r6
 800994c:	2800      	cmp	r0, #0
 800994e:	f040 8245 	bne.w	8009ddc <_dtoa_r+0x954>
 8009952:	9d00      	ldr	r5, [sp, #0]
 8009954:	2331      	movs	r3, #49	; 0x31
 8009956:	f805 3b01 	strb.w	r3, [r5], #1
 800995a:	f10b 0b01 	add.w	fp, fp, #1
 800995e:	e241      	b.n	8009de4 <_dtoa_r+0x95c>
 8009960:	07f2      	lsls	r2, r6, #31
 8009962:	d505      	bpl.n	8009970 <_dtoa_r+0x4e8>
 8009964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009968:	f7f6 fe46 	bl	80005f8 <__aeabi_dmul>
 800996c:	3501      	adds	r5, #1
 800996e:	2301      	movs	r3, #1
 8009970:	1076      	asrs	r6, r6, #1
 8009972:	3708      	adds	r7, #8
 8009974:	e773      	b.n	800985e <_dtoa_r+0x3d6>
 8009976:	2502      	movs	r5, #2
 8009978:	e775      	b.n	8009866 <_dtoa_r+0x3de>
 800997a:	9e04      	ldr	r6, [sp, #16]
 800997c:	465f      	mov	r7, fp
 800997e:	e792      	b.n	80098a6 <_dtoa_r+0x41e>
 8009980:	9900      	ldr	r1, [sp, #0]
 8009982:	4b50      	ldr	r3, [pc, #320]	; (8009ac4 <_dtoa_r+0x63c>)
 8009984:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009988:	4431      	add	r1, r6
 800998a:	9102      	str	r1, [sp, #8]
 800998c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800998e:	eeb0 9a47 	vmov.f32	s18, s14
 8009992:	eef0 9a67 	vmov.f32	s19, s15
 8009996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800999a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800999e:	2900      	cmp	r1, #0
 80099a0:	d044      	beq.n	8009a2c <_dtoa_r+0x5a4>
 80099a2:	494e      	ldr	r1, [pc, #312]	; (8009adc <_dtoa_r+0x654>)
 80099a4:	2000      	movs	r0, #0
 80099a6:	f7f6 ff51 	bl	800084c <__aeabi_ddiv>
 80099aa:	ec53 2b19 	vmov	r2, r3, d9
 80099ae:	f7f6 fc6b 	bl	8000288 <__aeabi_dsub>
 80099b2:	9d00      	ldr	r5, [sp, #0]
 80099b4:	ec41 0b19 	vmov	d9, r0, r1
 80099b8:	4649      	mov	r1, r9
 80099ba:	4640      	mov	r0, r8
 80099bc:	f7f7 f8cc 	bl	8000b58 <__aeabi_d2iz>
 80099c0:	4606      	mov	r6, r0
 80099c2:	f7f6 fdaf 	bl	8000524 <__aeabi_i2d>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4640      	mov	r0, r8
 80099cc:	4649      	mov	r1, r9
 80099ce:	f7f6 fc5b 	bl	8000288 <__aeabi_dsub>
 80099d2:	3630      	adds	r6, #48	; 0x30
 80099d4:	f805 6b01 	strb.w	r6, [r5], #1
 80099d8:	ec53 2b19 	vmov	r2, r3, d9
 80099dc:	4680      	mov	r8, r0
 80099de:	4689      	mov	r9, r1
 80099e0:	f7f7 f87c 	bl	8000adc <__aeabi_dcmplt>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d164      	bne.n	8009ab2 <_dtoa_r+0x62a>
 80099e8:	4642      	mov	r2, r8
 80099ea:	464b      	mov	r3, r9
 80099ec:	4937      	ldr	r1, [pc, #220]	; (8009acc <_dtoa_r+0x644>)
 80099ee:	2000      	movs	r0, #0
 80099f0:	f7f6 fc4a 	bl	8000288 <__aeabi_dsub>
 80099f4:	ec53 2b19 	vmov	r2, r3, d9
 80099f8:	f7f7 f870 	bl	8000adc <__aeabi_dcmplt>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	f040 80b6 	bne.w	8009b6e <_dtoa_r+0x6e6>
 8009a02:	9b02      	ldr	r3, [sp, #8]
 8009a04:	429d      	cmp	r5, r3
 8009a06:	f43f af7c 	beq.w	8009902 <_dtoa_r+0x47a>
 8009a0a:	4b31      	ldr	r3, [pc, #196]	; (8009ad0 <_dtoa_r+0x648>)
 8009a0c:	ec51 0b19 	vmov	r0, r1, d9
 8009a10:	2200      	movs	r2, #0
 8009a12:	f7f6 fdf1 	bl	80005f8 <__aeabi_dmul>
 8009a16:	4b2e      	ldr	r3, [pc, #184]	; (8009ad0 <_dtoa_r+0x648>)
 8009a18:	ec41 0b19 	vmov	d9, r0, r1
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4649      	mov	r1, r9
 8009a22:	f7f6 fde9 	bl	80005f8 <__aeabi_dmul>
 8009a26:	4680      	mov	r8, r0
 8009a28:	4689      	mov	r9, r1
 8009a2a:	e7c5      	b.n	80099b8 <_dtoa_r+0x530>
 8009a2c:	ec51 0b17 	vmov	r0, r1, d7
 8009a30:	f7f6 fde2 	bl	80005f8 <__aeabi_dmul>
 8009a34:	9b02      	ldr	r3, [sp, #8]
 8009a36:	9d00      	ldr	r5, [sp, #0]
 8009a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a3a:	ec41 0b19 	vmov	d9, r0, r1
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	f7f7 f889 	bl	8000b58 <__aeabi_d2iz>
 8009a46:	4606      	mov	r6, r0
 8009a48:	f7f6 fd6c 	bl	8000524 <__aeabi_i2d>
 8009a4c:	3630      	adds	r6, #48	; 0x30
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fc17 	bl	8000288 <__aeabi_dsub>
 8009a5a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a5e:	9b02      	ldr	r3, [sp, #8]
 8009a60:	429d      	cmp	r5, r3
 8009a62:	4680      	mov	r8, r0
 8009a64:	4689      	mov	r9, r1
 8009a66:	f04f 0200 	mov.w	r2, #0
 8009a6a:	d124      	bne.n	8009ab6 <_dtoa_r+0x62e>
 8009a6c:	4b1b      	ldr	r3, [pc, #108]	; (8009adc <_dtoa_r+0x654>)
 8009a6e:	ec51 0b19 	vmov	r0, r1, d9
 8009a72:	f7f6 fc0b 	bl	800028c <__adddf3>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	f7f7 f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d173      	bne.n	8009b6e <_dtoa_r+0x6e6>
 8009a86:	ec53 2b19 	vmov	r2, r3, d9
 8009a8a:	4914      	ldr	r1, [pc, #80]	; (8009adc <_dtoa_r+0x654>)
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f7f6 fbfb 	bl	8000288 <__aeabi_dsub>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f7 f81f 	bl	8000adc <__aeabi_dcmplt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f af2f 	beq.w	8009902 <_dtoa_r+0x47a>
 8009aa4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009aa6:	1e6b      	subs	r3, r5, #1
 8009aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009aae:	2b30      	cmp	r3, #48	; 0x30
 8009ab0:	d0f8      	beq.n	8009aa4 <_dtoa_r+0x61c>
 8009ab2:	46bb      	mov	fp, r7
 8009ab4:	e04a      	b.n	8009b4c <_dtoa_r+0x6c4>
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <_dtoa_r+0x648>)
 8009ab8:	f7f6 fd9e 	bl	80005f8 <__aeabi_dmul>
 8009abc:	4680      	mov	r8, r0
 8009abe:	4689      	mov	r9, r1
 8009ac0:	e7bd      	b.n	8009a3e <_dtoa_r+0x5b6>
 8009ac2:	bf00      	nop
 8009ac4:	0800b828 	.word	0x0800b828
 8009ac8:	0800b800 	.word	0x0800b800
 8009acc:	3ff00000 	.word	0x3ff00000
 8009ad0:	40240000 	.word	0x40240000
 8009ad4:	401c0000 	.word	0x401c0000
 8009ad8:	40140000 	.word	0x40140000
 8009adc:	3fe00000 	.word	0x3fe00000
 8009ae0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ae4:	9d00      	ldr	r5, [sp, #0]
 8009ae6:	4642      	mov	r2, r8
 8009ae8:	464b      	mov	r3, r9
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	f7f6 fead 	bl	800084c <__aeabi_ddiv>
 8009af2:	f7f7 f831 	bl	8000b58 <__aeabi_d2iz>
 8009af6:	9001      	str	r0, [sp, #4]
 8009af8:	f7f6 fd14 	bl	8000524 <__aeabi_i2d>
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	f7f6 fd7a 	bl	80005f8 <__aeabi_dmul>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4630      	mov	r0, r6
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	f7f6 fbbc 	bl	8000288 <__aeabi_dsub>
 8009b10:	9e01      	ldr	r6, [sp, #4]
 8009b12:	9f04      	ldr	r7, [sp, #16]
 8009b14:	3630      	adds	r6, #48	; 0x30
 8009b16:	f805 6b01 	strb.w	r6, [r5], #1
 8009b1a:	9e00      	ldr	r6, [sp, #0]
 8009b1c:	1bae      	subs	r6, r5, r6
 8009b1e:	42b7      	cmp	r7, r6
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	d134      	bne.n	8009b90 <_dtoa_r+0x708>
 8009b26:	f7f6 fbb1 	bl	800028c <__adddf3>
 8009b2a:	4642      	mov	r2, r8
 8009b2c:	464b      	mov	r3, r9
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	f7f6 fff1 	bl	8000b18 <__aeabi_dcmpgt>
 8009b36:	b9c8      	cbnz	r0, 8009b6c <_dtoa_r+0x6e4>
 8009b38:	4642      	mov	r2, r8
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	4639      	mov	r1, r7
 8009b40:	f7f6 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b44:	b110      	cbz	r0, 8009b4c <_dtoa_r+0x6c4>
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	07db      	lsls	r3, r3, #31
 8009b4a:	d40f      	bmi.n	8009b6c <_dtoa_r+0x6e4>
 8009b4c:	4651      	mov	r1, sl
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 fd86 	bl	800a660 <_Bfree>
 8009b54:	2300      	movs	r3, #0
 8009b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b58:	702b      	strb	r3, [r5, #0]
 8009b5a:	f10b 0301 	add.w	r3, fp, #1
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f43f ace2 	beq.w	800952c <_dtoa_r+0xa4>
 8009b68:	601d      	str	r5, [r3, #0]
 8009b6a:	e4df      	b.n	800952c <_dtoa_r+0xa4>
 8009b6c:	465f      	mov	r7, fp
 8009b6e:	462b      	mov	r3, r5
 8009b70:	461d      	mov	r5, r3
 8009b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b76:	2a39      	cmp	r2, #57	; 0x39
 8009b78:	d106      	bne.n	8009b88 <_dtoa_r+0x700>
 8009b7a:	9a00      	ldr	r2, [sp, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d1f7      	bne.n	8009b70 <_dtoa_r+0x6e8>
 8009b80:	9900      	ldr	r1, [sp, #0]
 8009b82:	2230      	movs	r2, #48	; 0x30
 8009b84:	3701      	adds	r7, #1
 8009b86:	700a      	strb	r2, [r1, #0]
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	3201      	adds	r2, #1
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	e790      	b.n	8009ab2 <_dtoa_r+0x62a>
 8009b90:	4ba3      	ldr	r3, [pc, #652]	; (8009e20 <_dtoa_r+0x998>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	f7f6 fd30 	bl	80005f8 <__aeabi_dmul>
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	460f      	mov	r7, r1
 8009ba0:	f7f6 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d09e      	beq.n	8009ae6 <_dtoa_r+0x65e>
 8009ba8:	e7d0      	b.n	8009b4c <_dtoa_r+0x6c4>
 8009baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	f000 80ca 	beq.w	8009d46 <_dtoa_r+0x8be>
 8009bb2:	9a07      	ldr	r2, [sp, #28]
 8009bb4:	2a01      	cmp	r2, #1
 8009bb6:	f300 80ad 	bgt.w	8009d14 <_dtoa_r+0x88c>
 8009bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	f000 80a5 	beq.w	8009d0c <_dtoa_r+0x884>
 8009bc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009bc6:	9e08      	ldr	r6, [sp, #32]
 8009bc8:	9d05      	ldr	r5, [sp, #20]
 8009bca:	9a05      	ldr	r2, [sp, #20]
 8009bcc:	441a      	add	r2, r3
 8009bce:	9205      	str	r2, [sp, #20]
 8009bd0:	9a06      	ldr	r2, [sp, #24]
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	441a      	add	r2, r3
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	9206      	str	r2, [sp, #24]
 8009bda:	f000 fdf7 	bl	800a7cc <__i2b>
 8009bde:	4607      	mov	r7, r0
 8009be0:	b165      	cbz	r5, 8009bfc <_dtoa_r+0x774>
 8009be2:	9b06      	ldr	r3, [sp, #24]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dd09      	ble.n	8009bfc <_dtoa_r+0x774>
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	9a05      	ldr	r2, [sp, #20]
 8009bec:	bfa8      	it	ge
 8009bee:	462b      	movge	r3, r5
 8009bf0:	1ad2      	subs	r2, r2, r3
 8009bf2:	9205      	str	r2, [sp, #20]
 8009bf4:	9a06      	ldr	r2, [sp, #24]
 8009bf6:	1aed      	subs	r5, r5, r3
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	9306      	str	r3, [sp, #24]
 8009bfc:	9b08      	ldr	r3, [sp, #32]
 8009bfe:	b1f3      	cbz	r3, 8009c3e <_dtoa_r+0x7b6>
 8009c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 80a3 	beq.w	8009d4e <_dtoa_r+0x8c6>
 8009c08:	2e00      	cmp	r6, #0
 8009c0a:	dd10      	ble.n	8009c2e <_dtoa_r+0x7a6>
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	4632      	mov	r2, r6
 8009c10:	4620      	mov	r0, r4
 8009c12:	f000 fe9b 	bl	800a94c <__pow5mult>
 8009c16:	4652      	mov	r2, sl
 8009c18:	4601      	mov	r1, r0
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fdeb 	bl	800a7f8 <__multiply>
 8009c22:	4651      	mov	r1, sl
 8009c24:	4680      	mov	r8, r0
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fd1a 	bl	800a660 <_Bfree>
 8009c2c:	46c2      	mov	sl, r8
 8009c2e:	9b08      	ldr	r3, [sp, #32]
 8009c30:	1b9a      	subs	r2, r3, r6
 8009c32:	d004      	beq.n	8009c3e <_dtoa_r+0x7b6>
 8009c34:	4651      	mov	r1, sl
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fe88 	bl	800a94c <__pow5mult>
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	2101      	movs	r1, #1
 8009c40:	4620      	mov	r0, r4
 8009c42:	f000 fdc3 	bl	800a7cc <__i2b>
 8009c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	f340 8081 	ble.w	8009d52 <_dtoa_r+0x8ca>
 8009c50:	461a      	mov	r2, r3
 8009c52:	4601      	mov	r1, r0
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 fe79 	bl	800a94c <__pow5mult>
 8009c5a:	9b07      	ldr	r3, [sp, #28]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	4606      	mov	r6, r0
 8009c60:	dd7a      	ble.n	8009d58 <_dtoa_r+0x8d0>
 8009c62:	f04f 0800 	mov.w	r8, #0
 8009c66:	6933      	ldr	r3, [r6, #16]
 8009c68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c6c:	6918      	ldr	r0, [r3, #16]
 8009c6e:	f000 fd5f 	bl	800a730 <__hi0bits>
 8009c72:	f1c0 0020 	rsb	r0, r0, #32
 8009c76:	9b06      	ldr	r3, [sp, #24]
 8009c78:	4418      	add	r0, r3
 8009c7a:	f010 001f 	ands.w	r0, r0, #31
 8009c7e:	f000 8094 	beq.w	8009daa <_dtoa_r+0x922>
 8009c82:	f1c0 0320 	rsb	r3, r0, #32
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	f340 8085 	ble.w	8009d96 <_dtoa_r+0x90e>
 8009c8c:	9b05      	ldr	r3, [sp, #20]
 8009c8e:	f1c0 001c 	rsb	r0, r0, #28
 8009c92:	4403      	add	r3, r0
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	9b06      	ldr	r3, [sp, #24]
 8009c98:	4403      	add	r3, r0
 8009c9a:	4405      	add	r5, r0
 8009c9c:	9306      	str	r3, [sp, #24]
 8009c9e:	9b05      	ldr	r3, [sp, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dd05      	ble.n	8009cb0 <_dtoa_r+0x828>
 8009ca4:	4651      	mov	r1, sl
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fea9 	bl	800aa00 <__lshift>
 8009cae:	4682      	mov	sl, r0
 8009cb0:	9b06      	ldr	r3, [sp, #24]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dd05      	ble.n	8009cc2 <_dtoa_r+0x83a>
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 fea0 	bl	800aa00 <__lshift>
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d072      	beq.n	8009dae <_dtoa_r+0x926>
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4650      	mov	r0, sl
 8009ccc:	f000 ff04 	bl	800aad8 <__mcmp>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	da6c      	bge.n	8009dae <_dtoa_r+0x926>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4651      	mov	r1, sl
 8009cd8:	220a      	movs	r2, #10
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 fce2 	bl	800a6a4 <__multadd>
 8009ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009ce6:	4682      	mov	sl, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 81b0 	beq.w	800a04e <_dtoa_r+0xbc6>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fcd5 	bl	800a6a4 <__multadd>
 8009cfa:	9b01      	ldr	r3, [sp, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	4607      	mov	r7, r0
 8009d00:	f300 8096 	bgt.w	8009e30 <_dtoa_r+0x9a8>
 8009d04:	9b07      	ldr	r3, [sp, #28]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	dc59      	bgt.n	8009dbe <_dtoa_r+0x936>
 8009d0a:	e091      	b.n	8009e30 <_dtoa_r+0x9a8>
 8009d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d12:	e758      	b.n	8009bc6 <_dtoa_r+0x73e>
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	1e5e      	subs	r6, r3, #1
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	42b3      	cmp	r3, r6
 8009d1c:	bfbf      	itttt	lt
 8009d1e:	9b08      	ldrlt	r3, [sp, #32]
 8009d20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009d22:	9608      	strlt	r6, [sp, #32]
 8009d24:	1af3      	sublt	r3, r6, r3
 8009d26:	bfb4      	ite	lt
 8009d28:	18d2      	addlt	r2, r2, r3
 8009d2a:	1b9e      	subge	r6, r3, r6
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	bfbc      	itt	lt
 8009d30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009d32:	2600      	movlt	r6, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfb7      	itett	lt
 8009d38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009d3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009d40:	1a9d      	sublt	r5, r3, r2
 8009d42:	2300      	movlt	r3, #0
 8009d44:	e741      	b.n	8009bca <_dtoa_r+0x742>
 8009d46:	9e08      	ldr	r6, [sp, #32]
 8009d48:	9d05      	ldr	r5, [sp, #20]
 8009d4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d4c:	e748      	b.n	8009be0 <_dtoa_r+0x758>
 8009d4e:	9a08      	ldr	r2, [sp, #32]
 8009d50:	e770      	b.n	8009c34 <_dtoa_r+0x7ac>
 8009d52:	9b07      	ldr	r3, [sp, #28]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	dc19      	bgt.n	8009d8c <_dtoa_r+0x904>
 8009d58:	9b02      	ldr	r3, [sp, #8]
 8009d5a:	b9bb      	cbnz	r3, 8009d8c <_dtoa_r+0x904>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d62:	b99b      	cbnz	r3, 8009d8c <_dtoa_r+0x904>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d6a:	0d1b      	lsrs	r3, r3, #20
 8009d6c:	051b      	lsls	r3, r3, #20
 8009d6e:	b183      	cbz	r3, 8009d92 <_dtoa_r+0x90a>
 8009d70:	9b05      	ldr	r3, [sp, #20]
 8009d72:	3301      	adds	r3, #1
 8009d74:	9305      	str	r3, [sp, #20]
 8009d76:	9b06      	ldr	r3, [sp, #24]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	9306      	str	r3, [sp, #24]
 8009d7c:	f04f 0801 	mov.w	r8, #1
 8009d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f47f af6f 	bne.w	8009c66 <_dtoa_r+0x7de>
 8009d88:	2001      	movs	r0, #1
 8009d8a:	e774      	b.n	8009c76 <_dtoa_r+0x7ee>
 8009d8c:	f04f 0800 	mov.w	r8, #0
 8009d90:	e7f6      	b.n	8009d80 <_dtoa_r+0x8f8>
 8009d92:	4698      	mov	r8, r3
 8009d94:	e7f4      	b.n	8009d80 <_dtoa_r+0x8f8>
 8009d96:	d082      	beq.n	8009c9e <_dtoa_r+0x816>
 8009d98:	9a05      	ldr	r2, [sp, #20]
 8009d9a:	331c      	adds	r3, #28
 8009d9c:	441a      	add	r2, r3
 8009d9e:	9205      	str	r2, [sp, #20]
 8009da0:	9a06      	ldr	r2, [sp, #24]
 8009da2:	441a      	add	r2, r3
 8009da4:	441d      	add	r5, r3
 8009da6:	9206      	str	r2, [sp, #24]
 8009da8:	e779      	b.n	8009c9e <_dtoa_r+0x816>
 8009daa:	4603      	mov	r3, r0
 8009dac:	e7f4      	b.n	8009d98 <_dtoa_r+0x910>
 8009dae:	9b04      	ldr	r3, [sp, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dc37      	bgt.n	8009e24 <_dtoa_r+0x99c>
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	dd34      	ble.n	8009e24 <_dtoa_r+0x99c>
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	b963      	cbnz	r3, 8009ddc <_dtoa_r+0x954>
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	2205      	movs	r2, #5
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 fc6c 	bl	800a6a4 <__multadd>
 8009dcc:	4601      	mov	r1, r0
 8009dce:	4606      	mov	r6, r0
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	f000 fe81 	bl	800aad8 <__mcmp>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f73f adbb 	bgt.w	8009952 <_dtoa_r+0x4ca>
 8009ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dde:	9d00      	ldr	r5, [sp, #0]
 8009de0:	ea6f 0b03 	mvn.w	fp, r3
 8009de4:	f04f 0800 	mov.w	r8, #0
 8009de8:	4631      	mov	r1, r6
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fc38 	bl	800a660 <_Bfree>
 8009df0:	2f00      	cmp	r7, #0
 8009df2:	f43f aeab 	beq.w	8009b4c <_dtoa_r+0x6c4>
 8009df6:	f1b8 0f00 	cmp.w	r8, #0
 8009dfa:	d005      	beq.n	8009e08 <_dtoa_r+0x980>
 8009dfc:	45b8      	cmp	r8, r7
 8009dfe:	d003      	beq.n	8009e08 <_dtoa_r+0x980>
 8009e00:	4641      	mov	r1, r8
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fc2c 	bl	800a660 <_Bfree>
 8009e08:	4639      	mov	r1, r7
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fc28 	bl	800a660 <_Bfree>
 8009e10:	e69c      	b.n	8009b4c <_dtoa_r+0x6c4>
 8009e12:	2600      	movs	r6, #0
 8009e14:	4637      	mov	r7, r6
 8009e16:	e7e1      	b.n	8009ddc <_dtoa_r+0x954>
 8009e18:	46bb      	mov	fp, r7
 8009e1a:	4637      	mov	r7, r6
 8009e1c:	e599      	b.n	8009952 <_dtoa_r+0x4ca>
 8009e1e:	bf00      	nop
 8009e20:	40240000 	.word	0x40240000
 8009e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80c8 	beq.w	8009fbc <_dtoa_r+0xb34>
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	2d00      	cmp	r5, #0
 8009e32:	dd05      	ble.n	8009e40 <_dtoa_r+0x9b8>
 8009e34:	4639      	mov	r1, r7
 8009e36:	462a      	mov	r2, r5
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fde1 	bl	800aa00 <__lshift>
 8009e3e:	4607      	mov	r7, r0
 8009e40:	f1b8 0f00 	cmp.w	r8, #0
 8009e44:	d05b      	beq.n	8009efe <_dtoa_r+0xa76>
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f000 fbc9 	bl	800a5e0 <_Balloc>
 8009e4e:	4605      	mov	r5, r0
 8009e50:	b928      	cbnz	r0, 8009e5e <_dtoa_r+0x9d6>
 8009e52:	4b83      	ldr	r3, [pc, #524]	; (800a060 <_dtoa_r+0xbd8>)
 8009e54:	4602      	mov	r2, r0
 8009e56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009e5a:	f7ff bb2e 	b.w	80094ba <_dtoa_r+0x32>
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	3202      	adds	r2, #2
 8009e62:	0092      	lsls	r2, r2, #2
 8009e64:	f107 010c 	add.w	r1, r7, #12
 8009e68:	300c      	adds	r0, #12
 8009e6a:	f7ff fa75 	bl	8009358 <memcpy>
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4629      	mov	r1, r5
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 fdc4 	bl	800aa00 <__lshift>
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e82:	4413      	add	r3, r2
 8009e84:	9308      	str	r3, [sp, #32]
 8009e86:	9b02      	ldr	r3, [sp, #8]
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	46b8      	mov	r8, r7
 8009e8e:	9306      	str	r3, [sp, #24]
 8009e90:	4607      	mov	r7, r0
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	4631      	mov	r1, r6
 8009e96:	3b01      	subs	r3, #1
 8009e98:	4650      	mov	r0, sl
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	f7ff fa6a 	bl	8009374 <quorem>
 8009ea0:	4641      	mov	r1, r8
 8009ea2:	9002      	str	r0, [sp, #8]
 8009ea4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	f000 fe15 	bl	800aad8 <__mcmp>
 8009eae:	463a      	mov	r2, r7
 8009eb0:	9005      	str	r0, [sp, #20]
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 fe2b 	bl	800ab10 <__mdiff>
 8009eba:	68c2      	ldr	r2, [r0, #12]
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	bb02      	cbnz	r2, 8009f02 <_dtoa_r+0xa7a>
 8009ec0:	4601      	mov	r1, r0
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	f000 fe08 	bl	800aad8 <__mcmp>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4620      	mov	r0, r4
 8009ece:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed0:	f000 fbc6 	bl	800a660 <_Bfree>
 8009ed4:	9b07      	ldr	r3, [sp, #28]
 8009ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed8:	9d04      	ldr	r5, [sp, #16]
 8009eda:	ea43 0102 	orr.w	r1, r3, r2
 8009ede:	9b06      	ldr	r3, [sp, #24]
 8009ee0:	4319      	orrs	r1, r3
 8009ee2:	d110      	bne.n	8009f06 <_dtoa_r+0xa7e>
 8009ee4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ee8:	d029      	beq.n	8009f3e <_dtoa_r+0xab6>
 8009eea:	9b05      	ldr	r3, [sp, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dd02      	ble.n	8009ef6 <_dtoa_r+0xa6e>
 8009ef0:	9b02      	ldr	r3, [sp, #8]
 8009ef2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009ef6:	9b01      	ldr	r3, [sp, #4]
 8009ef8:	f883 9000 	strb.w	r9, [r3]
 8009efc:	e774      	b.n	8009de8 <_dtoa_r+0x960>
 8009efe:	4638      	mov	r0, r7
 8009f00:	e7ba      	b.n	8009e78 <_dtoa_r+0x9f0>
 8009f02:	2201      	movs	r2, #1
 8009f04:	e7e1      	b.n	8009eca <_dtoa_r+0xa42>
 8009f06:	9b05      	ldr	r3, [sp, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	db04      	blt.n	8009f16 <_dtoa_r+0xa8e>
 8009f0c:	9907      	ldr	r1, [sp, #28]
 8009f0e:	430b      	orrs	r3, r1
 8009f10:	9906      	ldr	r1, [sp, #24]
 8009f12:	430b      	orrs	r3, r1
 8009f14:	d120      	bne.n	8009f58 <_dtoa_r+0xad0>
 8009f16:	2a00      	cmp	r2, #0
 8009f18:	dded      	ble.n	8009ef6 <_dtoa_r+0xa6e>
 8009f1a:	4651      	mov	r1, sl
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 fd6e 	bl	800aa00 <__lshift>
 8009f24:	4631      	mov	r1, r6
 8009f26:	4682      	mov	sl, r0
 8009f28:	f000 fdd6 	bl	800aad8 <__mcmp>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	dc03      	bgt.n	8009f38 <_dtoa_r+0xab0>
 8009f30:	d1e1      	bne.n	8009ef6 <_dtoa_r+0xa6e>
 8009f32:	f019 0f01 	tst.w	r9, #1
 8009f36:	d0de      	beq.n	8009ef6 <_dtoa_r+0xa6e>
 8009f38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f3c:	d1d8      	bne.n	8009ef0 <_dtoa_r+0xa68>
 8009f3e:	9a01      	ldr	r2, [sp, #4]
 8009f40:	2339      	movs	r3, #57	; 0x39
 8009f42:	7013      	strb	r3, [r2, #0]
 8009f44:	462b      	mov	r3, r5
 8009f46:	461d      	mov	r5, r3
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f4e:	2a39      	cmp	r2, #57	; 0x39
 8009f50:	d06c      	beq.n	800a02c <_dtoa_r+0xba4>
 8009f52:	3201      	adds	r2, #1
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	e747      	b.n	8009de8 <_dtoa_r+0x960>
 8009f58:	2a00      	cmp	r2, #0
 8009f5a:	dd07      	ble.n	8009f6c <_dtoa_r+0xae4>
 8009f5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f60:	d0ed      	beq.n	8009f3e <_dtoa_r+0xab6>
 8009f62:	9a01      	ldr	r2, [sp, #4]
 8009f64:	f109 0301 	add.w	r3, r9, #1
 8009f68:	7013      	strb	r3, [r2, #0]
 8009f6a:	e73d      	b.n	8009de8 <_dtoa_r+0x960>
 8009f6c:	9b04      	ldr	r3, [sp, #16]
 8009f6e:	9a08      	ldr	r2, [sp, #32]
 8009f70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d043      	beq.n	800a000 <_dtoa_r+0xb78>
 8009f78:	4651      	mov	r1, sl
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	220a      	movs	r2, #10
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fb90 	bl	800a6a4 <__multadd>
 8009f84:	45b8      	cmp	r8, r7
 8009f86:	4682      	mov	sl, r0
 8009f88:	f04f 0300 	mov.w	r3, #0
 8009f8c:	f04f 020a 	mov.w	r2, #10
 8009f90:	4641      	mov	r1, r8
 8009f92:	4620      	mov	r0, r4
 8009f94:	d107      	bne.n	8009fa6 <_dtoa_r+0xb1e>
 8009f96:	f000 fb85 	bl	800a6a4 <__multadd>
 8009f9a:	4680      	mov	r8, r0
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	9b04      	ldr	r3, [sp, #16]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	e775      	b.n	8009e92 <_dtoa_r+0xa0a>
 8009fa6:	f000 fb7d 	bl	800a6a4 <__multadd>
 8009faa:	4639      	mov	r1, r7
 8009fac:	4680      	mov	r8, r0
 8009fae:	2300      	movs	r3, #0
 8009fb0:	220a      	movs	r2, #10
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 fb76 	bl	800a6a4 <__multadd>
 8009fb8:	4607      	mov	r7, r0
 8009fba:	e7f0      	b.n	8009f9e <_dtoa_r+0xb16>
 8009fbc:	9b04      	ldr	r3, [sp, #16]
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	9d00      	ldr	r5, [sp, #0]
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	f7ff f9d5 	bl	8009374 <quorem>
 8009fca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	f805 9b01 	strb.w	r9, [r5], #1
 8009fd4:	1aea      	subs	r2, r5, r3
 8009fd6:	9b01      	ldr	r3, [sp, #4]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	dd07      	ble.n	8009fec <_dtoa_r+0xb64>
 8009fdc:	4651      	mov	r1, sl
 8009fde:	2300      	movs	r3, #0
 8009fe0:	220a      	movs	r2, #10
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fb5e 	bl	800a6a4 <__multadd>
 8009fe8:	4682      	mov	sl, r0
 8009fea:	e7ea      	b.n	8009fc2 <_dtoa_r+0xb3a>
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfc8      	it	gt
 8009ff2:	461d      	movgt	r5, r3
 8009ff4:	9b00      	ldr	r3, [sp, #0]
 8009ff6:	bfd8      	it	le
 8009ff8:	2501      	movle	r5, #1
 8009ffa:	441d      	add	r5, r3
 8009ffc:	f04f 0800 	mov.w	r8, #0
 800a000:	4651      	mov	r1, sl
 800a002:	2201      	movs	r2, #1
 800a004:	4620      	mov	r0, r4
 800a006:	f000 fcfb 	bl	800aa00 <__lshift>
 800a00a:	4631      	mov	r1, r6
 800a00c:	4682      	mov	sl, r0
 800a00e:	f000 fd63 	bl	800aad8 <__mcmp>
 800a012:	2800      	cmp	r0, #0
 800a014:	dc96      	bgt.n	8009f44 <_dtoa_r+0xabc>
 800a016:	d102      	bne.n	800a01e <_dtoa_r+0xb96>
 800a018:	f019 0f01 	tst.w	r9, #1
 800a01c:	d192      	bne.n	8009f44 <_dtoa_r+0xabc>
 800a01e:	462b      	mov	r3, r5
 800a020:	461d      	mov	r5, r3
 800a022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a026:	2a30      	cmp	r2, #48	; 0x30
 800a028:	d0fa      	beq.n	800a020 <_dtoa_r+0xb98>
 800a02a:	e6dd      	b.n	8009de8 <_dtoa_r+0x960>
 800a02c:	9a00      	ldr	r2, [sp, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d189      	bne.n	8009f46 <_dtoa_r+0xabe>
 800a032:	f10b 0b01 	add.w	fp, fp, #1
 800a036:	2331      	movs	r3, #49	; 0x31
 800a038:	e796      	b.n	8009f68 <_dtoa_r+0xae0>
 800a03a:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <_dtoa_r+0xbdc>)
 800a03c:	f7ff ba99 	b.w	8009572 <_dtoa_r+0xea>
 800a040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a042:	2b00      	cmp	r3, #0
 800a044:	f47f aa6d 	bne.w	8009522 <_dtoa_r+0x9a>
 800a048:	4b07      	ldr	r3, [pc, #28]	; (800a068 <_dtoa_r+0xbe0>)
 800a04a:	f7ff ba92 	b.w	8009572 <_dtoa_r+0xea>
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dcb5      	bgt.n	8009fc0 <_dtoa_r+0xb38>
 800a054:	9b07      	ldr	r3, [sp, #28]
 800a056:	2b02      	cmp	r3, #2
 800a058:	f73f aeb1 	bgt.w	8009dbe <_dtoa_r+0x936>
 800a05c:	e7b0      	b.n	8009fc0 <_dtoa_r+0xb38>
 800a05e:	bf00      	nop
 800a060:	0800b784 	.word	0x0800b784
 800a064:	0800b6e4 	.word	0x0800b6e4
 800a068:	0800b708 	.word	0x0800b708

0800a06c <__ssputs_r>:
 800a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a070:	688e      	ldr	r6, [r1, #8]
 800a072:	461f      	mov	r7, r3
 800a074:	42be      	cmp	r6, r7
 800a076:	680b      	ldr	r3, [r1, #0]
 800a078:	4682      	mov	sl, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	4690      	mov	r8, r2
 800a07e:	d82c      	bhi.n	800a0da <__ssputs_r+0x6e>
 800a080:	898a      	ldrh	r2, [r1, #12]
 800a082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a086:	d026      	beq.n	800a0d6 <__ssputs_r+0x6a>
 800a088:	6965      	ldr	r5, [r4, #20]
 800a08a:	6909      	ldr	r1, [r1, #16]
 800a08c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a090:	eba3 0901 	sub.w	r9, r3, r1
 800a094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a098:	1c7b      	adds	r3, r7, #1
 800a09a:	444b      	add	r3, r9
 800a09c:	106d      	asrs	r5, r5, #1
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	bf38      	it	cc
 800a0a2:	461d      	movcc	r5, r3
 800a0a4:	0553      	lsls	r3, r2, #21
 800a0a6:	d527      	bpl.n	800a0f8 <__ssputs_r+0x8c>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f000 f95f 	bl	800a36c <_malloc_r>
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	b360      	cbz	r0, 800a10c <__ssputs_r+0xa0>
 800a0b2:	6921      	ldr	r1, [r4, #16]
 800a0b4:	464a      	mov	r2, r9
 800a0b6:	f7ff f94f 	bl	8009358 <memcpy>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	6126      	str	r6, [r4, #16]
 800a0c8:	6165      	str	r5, [r4, #20]
 800a0ca:	444e      	add	r6, r9
 800a0cc:	eba5 0509 	sub.w	r5, r5, r9
 800a0d0:	6026      	str	r6, [r4, #0]
 800a0d2:	60a5      	str	r5, [r4, #8]
 800a0d4:	463e      	mov	r6, r7
 800a0d6:	42be      	cmp	r6, r7
 800a0d8:	d900      	bls.n	800a0dc <__ssputs_r+0x70>
 800a0da:	463e      	mov	r6, r7
 800a0dc:	6820      	ldr	r0, [r4, #0]
 800a0de:	4632      	mov	r2, r6
 800a0e0:	4641      	mov	r1, r8
 800a0e2:	f000 fe6b 	bl	800adbc <memmove>
 800a0e6:	68a3      	ldr	r3, [r4, #8]
 800a0e8:	1b9b      	subs	r3, r3, r6
 800a0ea:	60a3      	str	r3, [r4, #8]
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	4433      	add	r3, r6
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	f000 fe30 	bl	800ad5e <_realloc_r>
 800a0fe:	4606      	mov	r6, r0
 800a100:	2800      	cmp	r0, #0
 800a102:	d1e0      	bne.n	800a0c6 <__ssputs_r+0x5a>
 800a104:	6921      	ldr	r1, [r4, #16]
 800a106:	4650      	mov	r0, sl
 800a108:	f000 fefc 	bl	800af04 <_free_r>
 800a10c:	230c      	movs	r3, #12
 800a10e:	f8ca 3000 	str.w	r3, [sl]
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a11e:	e7e9      	b.n	800a0f4 <__ssputs_r+0x88>

0800a120 <_svfiprintf_r>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	4698      	mov	r8, r3
 800a126:	898b      	ldrh	r3, [r1, #12]
 800a128:	061b      	lsls	r3, r3, #24
 800a12a:	b09d      	sub	sp, #116	; 0x74
 800a12c:	4607      	mov	r7, r0
 800a12e:	460d      	mov	r5, r1
 800a130:	4614      	mov	r4, r2
 800a132:	d50e      	bpl.n	800a152 <_svfiprintf_r+0x32>
 800a134:	690b      	ldr	r3, [r1, #16]
 800a136:	b963      	cbnz	r3, 800a152 <_svfiprintf_r+0x32>
 800a138:	2140      	movs	r1, #64	; 0x40
 800a13a:	f000 f917 	bl	800a36c <_malloc_r>
 800a13e:	6028      	str	r0, [r5, #0]
 800a140:	6128      	str	r0, [r5, #16]
 800a142:	b920      	cbnz	r0, 800a14e <_svfiprintf_r+0x2e>
 800a144:	230c      	movs	r3, #12
 800a146:	603b      	str	r3, [r7, #0]
 800a148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a14c:	e0d0      	b.n	800a2f0 <_svfiprintf_r+0x1d0>
 800a14e:	2340      	movs	r3, #64	; 0x40
 800a150:	616b      	str	r3, [r5, #20]
 800a152:	2300      	movs	r3, #0
 800a154:	9309      	str	r3, [sp, #36]	; 0x24
 800a156:	2320      	movs	r3, #32
 800a158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a15c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a160:	2330      	movs	r3, #48	; 0x30
 800a162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a308 <_svfiprintf_r+0x1e8>
 800a166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a16a:	f04f 0901 	mov.w	r9, #1
 800a16e:	4623      	mov	r3, r4
 800a170:	469a      	mov	sl, r3
 800a172:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a176:	b10a      	cbz	r2, 800a17c <_svfiprintf_r+0x5c>
 800a178:	2a25      	cmp	r2, #37	; 0x25
 800a17a:	d1f9      	bne.n	800a170 <_svfiprintf_r+0x50>
 800a17c:	ebba 0b04 	subs.w	fp, sl, r4
 800a180:	d00b      	beq.n	800a19a <_svfiprintf_r+0x7a>
 800a182:	465b      	mov	r3, fp
 800a184:	4622      	mov	r2, r4
 800a186:	4629      	mov	r1, r5
 800a188:	4638      	mov	r0, r7
 800a18a:	f7ff ff6f 	bl	800a06c <__ssputs_r>
 800a18e:	3001      	adds	r0, #1
 800a190:	f000 80a9 	beq.w	800a2e6 <_svfiprintf_r+0x1c6>
 800a194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a196:	445a      	add	r2, fp
 800a198:	9209      	str	r2, [sp, #36]	; 0x24
 800a19a:	f89a 3000 	ldrb.w	r3, [sl]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 80a1 	beq.w	800a2e6 <_svfiprintf_r+0x1c6>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ae:	f10a 0a01 	add.w	sl, sl, #1
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	9307      	str	r3, [sp, #28]
 800a1b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a1bc:	4654      	mov	r4, sl
 800a1be:	2205      	movs	r2, #5
 800a1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c4:	4850      	ldr	r0, [pc, #320]	; (800a308 <_svfiprintf_r+0x1e8>)
 800a1c6:	f7f6 f803 	bl	80001d0 <memchr>
 800a1ca:	9a04      	ldr	r2, [sp, #16]
 800a1cc:	b9d8      	cbnz	r0, 800a206 <_svfiprintf_r+0xe6>
 800a1ce:	06d0      	lsls	r0, r2, #27
 800a1d0:	bf44      	itt	mi
 800a1d2:	2320      	movmi	r3, #32
 800a1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d8:	0711      	lsls	r1, r2, #28
 800a1da:	bf44      	itt	mi
 800a1dc:	232b      	movmi	r3, #43	; 0x2b
 800a1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e8:	d015      	beq.n	800a216 <_svfiprintf_r+0xf6>
 800a1ea:	9a07      	ldr	r2, [sp, #28]
 800a1ec:	4654      	mov	r4, sl
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	f04f 0c0a 	mov.w	ip, #10
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1fa:	3b30      	subs	r3, #48	; 0x30
 800a1fc:	2b09      	cmp	r3, #9
 800a1fe:	d94d      	bls.n	800a29c <_svfiprintf_r+0x17c>
 800a200:	b1b0      	cbz	r0, 800a230 <_svfiprintf_r+0x110>
 800a202:	9207      	str	r2, [sp, #28]
 800a204:	e014      	b.n	800a230 <_svfiprintf_r+0x110>
 800a206:	eba0 0308 	sub.w	r3, r0, r8
 800a20a:	fa09 f303 	lsl.w	r3, r9, r3
 800a20e:	4313      	orrs	r3, r2
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	46a2      	mov	sl, r4
 800a214:	e7d2      	b.n	800a1bc <_svfiprintf_r+0x9c>
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	1d19      	adds	r1, r3, #4
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	9103      	str	r1, [sp, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bfbb      	ittet	lt
 800a222:	425b      	neglt	r3, r3
 800a224:	f042 0202 	orrlt.w	r2, r2, #2
 800a228:	9307      	strge	r3, [sp, #28]
 800a22a:	9307      	strlt	r3, [sp, #28]
 800a22c:	bfb8      	it	lt
 800a22e:	9204      	strlt	r2, [sp, #16]
 800a230:	7823      	ldrb	r3, [r4, #0]
 800a232:	2b2e      	cmp	r3, #46	; 0x2e
 800a234:	d10c      	bne.n	800a250 <_svfiprintf_r+0x130>
 800a236:	7863      	ldrb	r3, [r4, #1]
 800a238:	2b2a      	cmp	r3, #42	; 0x2a
 800a23a:	d134      	bne.n	800a2a6 <_svfiprintf_r+0x186>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	1d1a      	adds	r2, r3, #4
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	9203      	str	r2, [sp, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	bfb8      	it	lt
 800a248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a24c:	3402      	adds	r4, #2
 800a24e:	9305      	str	r3, [sp, #20]
 800a250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a318 <_svfiprintf_r+0x1f8>
 800a254:	7821      	ldrb	r1, [r4, #0]
 800a256:	2203      	movs	r2, #3
 800a258:	4650      	mov	r0, sl
 800a25a:	f7f5 ffb9 	bl	80001d0 <memchr>
 800a25e:	b138      	cbz	r0, 800a270 <_svfiprintf_r+0x150>
 800a260:	9b04      	ldr	r3, [sp, #16]
 800a262:	eba0 000a 	sub.w	r0, r0, sl
 800a266:	2240      	movs	r2, #64	; 0x40
 800a268:	4082      	lsls	r2, r0
 800a26a:	4313      	orrs	r3, r2
 800a26c:	3401      	adds	r4, #1
 800a26e:	9304      	str	r3, [sp, #16]
 800a270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a274:	4825      	ldr	r0, [pc, #148]	; (800a30c <_svfiprintf_r+0x1ec>)
 800a276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a27a:	2206      	movs	r2, #6
 800a27c:	f7f5 ffa8 	bl	80001d0 <memchr>
 800a280:	2800      	cmp	r0, #0
 800a282:	d038      	beq.n	800a2f6 <_svfiprintf_r+0x1d6>
 800a284:	4b22      	ldr	r3, [pc, #136]	; (800a310 <_svfiprintf_r+0x1f0>)
 800a286:	bb1b      	cbnz	r3, 800a2d0 <_svfiprintf_r+0x1b0>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	3307      	adds	r3, #7
 800a28c:	f023 0307 	bic.w	r3, r3, #7
 800a290:	3308      	adds	r3, #8
 800a292:	9303      	str	r3, [sp, #12]
 800a294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a296:	4433      	add	r3, r6
 800a298:	9309      	str	r3, [sp, #36]	; 0x24
 800a29a:	e768      	b.n	800a16e <_svfiprintf_r+0x4e>
 800a29c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	e7a6      	b.n	800a1f4 <_svfiprintf_r+0xd4>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	9305      	str	r3, [sp, #20]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	f04f 0c0a 	mov.w	ip, #10
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b8:	3a30      	subs	r2, #48	; 0x30
 800a2ba:	2a09      	cmp	r2, #9
 800a2bc:	d903      	bls.n	800a2c6 <_svfiprintf_r+0x1a6>
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0c6      	beq.n	800a250 <_svfiprintf_r+0x130>
 800a2c2:	9105      	str	r1, [sp, #20]
 800a2c4:	e7c4      	b.n	800a250 <_svfiprintf_r+0x130>
 800a2c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e7f0      	b.n	800a2b2 <_svfiprintf_r+0x192>
 800a2d0:	ab03      	add	r3, sp, #12
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <_svfiprintf_r+0x1f4>)
 800a2d8:	a904      	add	r1, sp, #16
 800a2da:	4638      	mov	r0, r7
 800a2dc:	f7fe fb6e 	bl	80089bc <_printf_float>
 800a2e0:	1c42      	adds	r2, r0, #1
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	d1d6      	bne.n	800a294 <_svfiprintf_r+0x174>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	065b      	lsls	r3, r3, #25
 800a2ea:	f53f af2d 	bmi.w	800a148 <_svfiprintf_r+0x28>
 800a2ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2f0:	b01d      	add	sp, #116	; 0x74
 800a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	ab03      	add	r3, sp, #12
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	462a      	mov	r2, r5
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <_svfiprintf_r+0x1f4>)
 800a2fe:	a904      	add	r1, sp, #16
 800a300:	4638      	mov	r0, r7
 800a302:	f7fe fdff 	bl	8008f04 <_printf_i>
 800a306:	e7eb      	b.n	800a2e0 <_svfiprintf_r+0x1c0>
 800a308:	0800b795 	.word	0x0800b795
 800a30c:	0800b79f 	.word	0x0800b79f
 800a310:	080089bd 	.word	0x080089bd
 800a314:	0800a06d 	.word	0x0800a06d
 800a318:	0800b79b 	.word	0x0800b79b

0800a31c <malloc>:
 800a31c:	4b02      	ldr	r3, [pc, #8]	; (800a328 <malloc+0xc>)
 800a31e:	4601      	mov	r1, r0
 800a320:	6818      	ldr	r0, [r3, #0]
 800a322:	f000 b823 	b.w	800a36c <_malloc_r>
 800a326:	bf00      	nop
 800a328:	200000e8 	.word	0x200000e8

0800a32c <sbrk_aligned>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	4e0e      	ldr	r6, [pc, #56]	; (800a368 <sbrk_aligned+0x3c>)
 800a330:	460c      	mov	r4, r1
 800a332:	6831      	ldr	r1, [r6, #0]
 800a334:	4605      	mov	r5, r0
 800a336:	b911      	cbnz	r1, 800a33e <sbrk_aligned+0x12>
 800a338:	f000 fd8e 	bl	800ae58 <_sbrk_r>
 800a33c:	6030      	str	r0, [r6, #0]
 800a33e:	4621      	mov	r1, r4
 800a340:	4628      	mov	r0, r5
 800a342:	f000 fd89 	bl	800ae58 <_sbrk_r>
 800a346:	1c43      	adds	r3, r0, #1
 800a348:	d00a      	beq.n	800a360 <sbrk_aligned+0x34>
 800a34a:	1cc4      	adds	r4, r0, #3
 800a34c:	f024 0403 	bic.w	r4, r4, #3
 800a350:	42a0      	cmp	r0, r4
 800a352:	d007      	beq.n	800a364 <sbrk_aligned+0x38>
 800a354:	1a21      	subs	r1, r4, r0
 800a356:	4628      	mov	r0, r5
 800a358:	f000 fd7e 	bl	800ae58 <_sbrk_r>
 800a35c:	3001      	adds	r0, #1
 800a35e:	d101      	bne.n	800a364 <sbrk_aligned+0x38>
 800a360:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a364:	4620      	mov	r0, r4
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	2000158c 	.word	0x2000158c

0800a36c <_malloc_r>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	1ccd      	adds	r5, r1, #3
 800a372:	f025 0503 	bic.w	r5, r5, #3
 800a376:	3508      	adds	r5, #8
 800a378:	2d0c      	cmp	r5, #12
 800a37a:	bf38      	it	cc
 800a37c:	250c      	movcc	r5, #12
 800a37e:	2d00      	cmp	r5, #0
 800a380:	4607      	mov	r7, r0
 800a382:	db01      	blt.n	800a388 <_malloc_r+0x1c>
 800a384:	42a9      	cmp	r1, r5
 800a386:	d905      	bls.n	800a394 <_malloc_r+0x28>
 800a388:	230c      	movs	r3, #12
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	2600      	movs	r6, #0
 800a38e:	4630      	mov	r0, r6
 800a390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a394:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a468 <_malloc_r+0xfc>
 800a398:	f000 f916 	bl	800a5c8 <__malloc_lock>
 800a39c:	f8d8 3000 	ldr.w	r3, [r8]
 800a3a0:	461c      	mov	r4, r3
 800a3a2:	bb5c      	cbnz	r4, 800a3fc <_malloc_r+0x90>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f7ff ffc0 	bl	800a32c <sbrk_aligned>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	d155      	bne.n	800a45e <_malloc_r+0xf2>
 800a3b2:	f8d8 4000 	ldr.w	r4, [r8]
 800a3b6:	4626      	mov	r6, r4
 800a3b8:	2e00      	cmp	r6, #0
 800a3ba:	d145      	bne.n	800a448 <_malloc_r+0xdc>
 800a3bc:	2c00      	cmp	r4, #0
 800a3be:	d048      	beq.n	800a452 <_malloc_r+0xe6>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	eb04 0903 	add.w	r9, r4, r3
 800a3ca:	f000 fd45 	bl	800ae58 <_sbrk_r>
 800a3ce:	4581      	cmp	r9, r0
 800a3d0:	d13f      	bne.n	800a452 <_malloc_r+0xe6>
 800a3d2:	6821      	ldr	r1, [r4, #0]
 800a3d4:	1a6d      	subs	r5, r5, r1
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff ffa7 	bl	800a32c <sbrk_aligned>
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d037      	beq.n	800a452 <_malloc_r+0xe6>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	442b      	add	r3, r5
 800a3e6:	6023      	str	r3, [r4, #0]
 800a3e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d038      	beq.n	800a462 <_malloc_r+0xf6>
 800a3f0:	685a      	ldr	r2, [r3, #4]
 800a3f2:	42a2      	cmp	r2, r4
 800a3f4:	d12b      	bne.n	800a44e <_malloc_r+0xe2>
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	605a      	str	r2, [r3, #4]
 800a3fa:	e00f      	b.n	800a41c <_malloc_r+0xb0>
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	1b52      	subs	r2, r2, r5
 800a400:	d41f      	bmi.n	800a442 <_malloc_r+0xd6>
 800a402:	2a0b      	cmp	r2, #11
 800a404:	d917      	bls.n	800a436 <_malloc_r+0xca>
 800a406:	1961      	adds	r1, r4, r5
 800a408:	42a3      	cmp	r3, r4
 800a40a:	6025      	str	r5, [r4, #0]
 800a40c:	bf18      	it	ne
 800a40e:	6059      	strne	r1, [r3, #4]
 800a410:	6863      	ldr	r3, [r4, #4]
 800a412:	bf08      	it	eq
 800a414:	f8c8 1000 	streq.w	r1, [r8]
 800a418:	5162      	str	r2, [r4, r5]
 800a41a:	604b      	str	r3, [r1, #4]
 800a41c:	4638      	mov	r0, r7
 800a41e:	f104 060b 	add.w	r6, r4, #11
 800a422:	f000 f8d7 	bl	800a5d4 <__malloc_unlock>
 800a426:	f026 0607 	bic.w	r6, r6, #7
 800a42a:	1d23      	adds	r3, r4, #4
 800a42c:	1af2      	subs	r2, r6, r3
 800a42e:	d0ae      	beq.n	800a38e <_malloc_r+0x22>
 800a430:	1b9b      	subs	r3, r3, r6
 800a432:	50a3      	str	r3, [r4, r2]
 800a434:	e7ab      	b.n	800a38e <_malloc_r+0x22>
 800a436:	42a3      	cmp	r3, r4
 800a438:	6862      	ldr	r2, [r4, #4]
 800a43a:	d1dd      	bne.n	800a3f8 <_malloc_r+0x8c>
 800a43c:	f8c8 2000 	str.w	r2, [r8]
 800a440:	e7ec      	b.n	800a41c <_malloc_r+0xb0>
 800a442:	4623      	mov	r3, r4
 800a444:	6864      	ldr	r4, [r4, #4]
 800a446:	e7ac      	b.n	800a3a2 <_malloc_r+0x36>
 800a448:	4634      	mov	r4, r6
 800a44a:	6876      	ldr	r6, [r6, #4]
 800a44c:	e7b4      	b.n	800a3b8 <_malloc_r+0x4c>
 800a44e:	4613      	mov	r3, r2
 800a450:	e7cc      	b.n	800a3ec <_malloc_r+0x80>
 800a452:	230c      	movs	r3, #12
 800a454:	603b      	str	r3, [r7, #0]
 800a456:	4638      	mov	r0, r7
 800a458:	f000 f8bc 	bl	800a5d4 <__malloc_unlock>
 800a45c:	e797      	b.n	800a38e <_malloc_r+0x22>
 800a45e:	6025      	str	r5, [r4, #0]
 800a460:	e7dc      	b.n	800a41c <_malloc_r+0xb0>
 800a462:	605b      	str	r3, [r3, #4]
 800a464:	deff      	udf	#255	; 0xff
 800a466:	bf00      	nop
 800a468:	20001588 	.word	0x20001588

0800a46c <__sflush_r>:
 800a46c:	898a      	ldrh	r2, [r1, #12]
 800a46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a472:	4605      	mov	r5, r0
 800a474:	0710      	lsls	r0, r2, #28
 800a476:	460c      	mov	r4, r1
 800a478:	d458      	bmi.n	800a52c <__sflush_r+0xc0>
 800a47a:	684b      	ldr	r3, [r1, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dc05      	bgt.n	800a48c <__sflush_r+0x20>
 800a480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a482:	2b00      	cmp	r3, #0
 800a484:	dc02      	bgt.n	800a48c <__sflush_r+0x20>
 800a486:	2000      	movs	r0, #0
 800a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a48e:	2e00      	cmp	r6, #0
 800a490:	d0f9      	beq.n	800a486 <__sflush_r+0x1a>
 800a492:	2300      	movs	r3, #0
 800a494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a498:	682f      	ldr	r7, [r5, #0]
 800a49a:	6a21      	ldr	r1, [r4, #32]
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	d032      	beq.n	800a506 <__sflush_r+0x9a>
 800a4a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	075a      	lsls	r2, r3, #29
 800a4a6:	d505      	bpl.n	800a4b4 <__sflush_r+0x48>
 800a4a8:	6863      	ldr	r3, [r4, #4]
 800a4aa:	1ac0      	subs	r0, r0, r3
 800a4ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4ae:	b10b      	cbz	r3, 800a4b4 <__sflush_r+0x48>
 800a4b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4b2:	1ac0      	subs	r0, r0, r3
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ba:	6a21      	ldr	r1, [r4, #32]
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b0      	blx	r6
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	d106      	bne.n	800a4d4 <__sflush_r+0x68>
 800a4c6:	6829      	ldr	r1, [r5, #0]
 800a4c8:	291d      	cmp	r1, #29
 800a4ca:	d82b      	bhi.n	800a524 <__sflush_r+0xb8>
 800a4cc:	4a29      	ldr	r2, [pc, #164]	; (800a574 <__sflush_r+0x108>)
 800a4ce:	410a      	asrs	r2, r1
 800a4d0:	07d6      	lsls	r6, r2, #31
 800a4d2:	d427      	bmi.n	800a524 <__sflush_r+0xb8>
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	6062      	str	r2, [r4, #4]
 800a4d8:	04d9      	lsls	r1, r3, #19
 800a4da:	6922      	ldr	r2, [r4, #16]
 800a4dc:	6022      	str	r2, [r4, #0]
 800a4de:	d504      	bpl.n	800a4ea <__sflush_r+0x7e>
 800a4e0:	1c42      	adds	r2, r0, #1
 800a4e2:	d101      	bne.n	800a4e8 <__sflush_r+0x7c>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	b903      	cbnz	r3, 800a4ea <__sflush_r+0x7e>
 800a4e8:	6560      	str	r0, [r4, #84]	; 0x54
 800a4ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ec:	602f      	str	r7, [r5, #0]
 800a4ee:	2900      	cmp	r1, #0
 800a4f0:	d0c9      	beq.n	800a486 <__sflush_r+0x1a>
 800a4f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4f6:	4299      	cmp	r1, r3
 800a4f8:	d002      	beq.n	800a500 <__sflush_r+0x94>
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f000 fd02 	bl	800af04 <_free_r>
 800a500:	2000      	movs	r0, #0
 800a502:	6360      	str	r0, [r4, #52]	; 0x34
 800a504:	e7c0      	b.n	800a488 <__sflush_r+0x1c>
 800a506:	2301      	movs	r3, #1
 800a508:	4628      	mov	r0, r5
 800a50a:	47b0      	blx	r6
 800a50c:	1c41      	adds	r1, r0, #1
 800a50e:	d1c8      	bne.n	800a4a2 <__sflush_r+0x36>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0c5      	beq.n	800a4a2 <__sflush_r+0x36>
 800a516:	2b1d      	cmp	r3, #29
 800a518:	d001      	beq.n	800a51e <__sflush_r+0xb2>
 800a51a:	2b16      	cmp	r3, #22
 800a51c:	d101      	bne.n	800a522 <__sflush_r+0xb6>
 800a51e:	602f      	str	r7, [r5, #0]
 800a520:	e7b1      	b.n	800a486 <__sflush_r+0x1a>
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a528:	81a3      	strh	r3, [r4, #12]
 800a52a:	e7ad      	b.n	800a488 <__sflush_r+0x1c>
 800a52c:	690f      	ldr	r7, [r1, #16]
 800a52e:	2f00      	cmp	r7, #0
 800a530:	d0a9      	beq.n	800a486 <__sflush_r+0x1a>
 800a532:	0793      	lsls	r3, r2, #30
 800a534:	680e      	ldr	r6, [r1, #0]
 800a536:	bf08      	it	eq
 800a538:	694b      	ldreq	r3, [r1, #20]
 800a53a:	600f      	str	r7, [r1, #0]
 800a53c:	bf18      	it	ne
 800a53e:	2300      	movne	r3, #0
 800a540:	eba6 0807 	sub.w	r8, r6, r7
 800a544:	608b      	str	r3, [r1, #8]
 800a546:	f1b8 0f00 	cmp.w	r8, #0
 800a54a:	dd9c      	ble.n	800a486 <__sflush_r+0x1a>
 800a54c:	6a21      	ldr	r1, [r4, #32]
 800a54e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a550:	4643      	mov	r3, r8
 800a552:	463a      	mov	r2, r7
 800a554:	4628      	mov	r0, r5
 800a556:	47b0      	blx	r6
 800a558:	2800      	cmp	r0, #0
 800a55a:	dc06      	bgt.n	800a56a <__sflush_r+0xfe>
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a562:	81a3      	strh	r3, [r4, #12]
 800a564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a568:	e78e      	b.n	800a488 <__sflush_r+0x1c>
 800a56a:	4407      	add	r7, r0
 800a56c:	eba8 0800 	sub.w	r8, r8, r0
 800a570:	e7e9      	b.n	800a546 <__sflush_r+0xda>
 800a572:	bf00      	nop
 800a574:	dfbffffe 	.word	0xdfbffffe

0800a578 <_fflush_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	690b      	ldr	r3, [r1, #16]
 800a57c:	4605      	mov	r5, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	b913      	cbnz	r3, 800a588 <_fflush_r+0x10>
 800a582:	2500      	movs	r5, #0
 800a584:	4628      	mov	r0, r5
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	b118      	cbz	r0, 800a592 <_fflush_r+0x1a>
 800a58a:	6a03      	ldr	r3, [r0, #32]
 800a58c:	b90b      	cbnz	r3, 800a592 <_fflush_r+0x1a>
 800a58e:	f7fe fe75 	bl	800927c <__sinit>
 800a592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d0f3      	beq.n	800a582 <_fflush_r+0xa>
 800a59a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a59c:	07d0      	lsls	r0, r2, #31
 800a59e:	d404      	bmi.n	800a5aa <_fflush_r+0x32>
 800a5a0:	0599      	lsls	r1, r3, #22
 800a5a2:	d402      	bmi.n	800a5aa <_fflush_r+0x32>
 800a5a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5a6:	f7fe fed5 	bl	8009354 <__retarget_lock_acquire_recursive>
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	f7ff ff5d 	bl	800a46c <__sflush_r>
 800a5b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b4:	07da      	lsls	r2, r3, #31
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	d4e4      	bmi.n	800a584 <_fflush_r+0xc>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	059b      	lsls	r3, r3, #22
 800a5be:	d4e1      	bmi.n	800a584 <_fflush_r+0xc>
 800a5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5c2:	f7fe fec8 	bl	8009356 <__retarget_lock_release_recursive>
 800a5c6:	e7dd      	b.n	800a584 <_fflush_r+0xc>

0800a5c8 <__malloc_lock>:
 800a5c8:	4801      	ldr	r0, [pc, #4]	; (800a5d0 <__malloc_lock+0x8>)
 800a5ca:	f7fe bec3 	b.w	8009354 <__retarget_lock_acquire_recursive>
 800a5ce:	bf00      	nop
 800a5d0:	20001584 	.word	0x20001584

0800a5d4 <__malloc_unlock>:
 800a5d4:	4801      	ldr	r0, [pc, #4]	; (800a5dc <__malloc_unlock+0x8>)
 800a5d6:	f7fe bebe 	b.w	8009356 <__retarget_lock_release_recursive>
 800a5da:	bf00      	nop
 800a5dc:	20001584 	.word	0x20001584

0800a5e0 <_Balloc>:
 800a5e0:	b570      	push	{r4, r5, r6, lr}
 800a5e2:	69c6      	ldr	r6, [r0, #28]
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	b976      	cbnz	r6, 800a608 <_Balloc+0x28>
 800a5ea:	2010      	movs	r0, #16
 800a5ec:	f7ff fe96 	bl	800a31c <malloc>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	61e0      	str	r0, [r4, #28]
 800a5f4:	b920      	cbnz	r0, 800a600 <_Balloc+0x20>
 800a5f6:	4b18      	ldr	r3, [pc, #96]	; (800a658 <_Balloc+0x78>)
 800a5f8:	4818      	ldr	r0, [pc, #96]	; (800a65c <_Balloc+0x7c>)
 800a5fa:	216b      	movs	r1, #107	; 0x6b
 800a5fc:	f000 fc4e 	bl	800ae9c <__assert_func>
 800a600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a604:	6006      	str	r6, [r0, #0]
 800a606:	60c6      	str	r6, [r0, #12]
 800a608:	69e6      	ldr	r6, [r4, #28]
 800a60a:	68f3      	ldr	r3, [r6, #12]
 800a60c:	b183      	cbz	r3, 800a630 <_Balloc+0x50>
 800a60e:	69e3      	ldr	r3, [r4, #28]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a616:	b9b8      	cbnz	r0, 800a648 <_Balloc+0x68>
 800a618:	2101      	movs	r1, #1
 800a61a:	fa01 f605 	lsl.w	r6, r1, r5
 800a61e:	1d72      	adds	r2, r6, #5
 800a620:	0092      	lsls	r2, r2, #2
 800a622:	4620      	mov	r0, r4
 800a624:	f000 fc58 	bl	800aed8 <_calloc_r>
 800a628:	b160      	cbz	r0, 800a644 <_Balloc+0x64>
 800a62a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a62e:	e00e      	b.n	800a64e <_Balloc+0x6e>
 800a630:	2221      	movs	r2, #33	; 0x21
 800a632:	2104      	movs	r1, #4
 800a634:	4620      	mov	r0, r4
 800a636:	f000 fc4f 	bl	800aed8 <_calloc_r>
 800a63a:	69e3      	ldr	r3, [r4, #28]
 800a63c:	60f0      	str	r0, [r6, #12]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e4      	bne.n	800a60e <_Balloc+0x2e>
 800a644:	2000      	movs	r0, #0
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	6802      	ldr	r2, [r0, #0]
 800a64a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a64e:	2300      	movs	r3, #0
 800a650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a654:	e7f7      	b.n	800a646 <_Balloc+0x66>
 800a656:	bf00      	nop
 800a658:	0800b715 	.word	0x0800b715
 800a65c:	0800b7a6 	.word	0x0800b7a6

0800a660 <_Bfree>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	69c6      	ldr	r6, [r0, #28]
 800a664:	4605      	mov	r5, r0
 800a666:	460c      	mov	r4, r1
 800a668:	b976      	cbnz	r6, 800a688 <_Bfree+0x28>
 800a66a:	2010      	movs	r0, #16
 800a66c:	f7ff fe56 	bl	800a31c <malloc>
 800a670:	4602      	mov	r2, r0
 800a672:	61e8      	str	r0, [r5, #28]
 800a674:	b920      	cbnz	r0, 800a680 <_Bfree+0x20>
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <_Bfree+0x3c>)
 800a678:	4809      	ldr	r0, [pc, #36]	; (800a6a0 <_Bfree+0x40>)
 800a67a:	218f      	movs	r1, #143	; 0x8f
 800a67c:	f000 fc0e 	bl	800ae9c <__assert_func>
 800a680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a684:	6006      	str	r6, [r0, #0]
 800a686:	60c6      	str	r6, [r0, #12]
 800a688:	b13c      	cbz	r4, 800a69a <_Bfree+0x3a>
 800a68a:	69eb      	ldr	r3, [r5, #28]
 800a68c:	6862      	ldr	r2, [r4, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a694:	6021      	str	r1, [r4, #0]
 800a696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	0800b715 	.word	0x0800b715
 800a6a0:	0800b7a6 	.word	0x0800b7a6

0800a6a4 <__multadd>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	690d      	ldr	r5, [r1, #16]
 800a6aa:	4607      	mov	r7, r0
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	461e      	mov	r6, r3
 800a6b0:	f101 0c14 	add.w	ip, r1, #20
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a6ba:	b299      	uxth	r1, r3
 800a6bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a6c0:	0c1e      	lsrs	r6, r3, #16
 800a6c2:	0c0b      	lsrs	r3, r1, #16
 800a6c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a6c8:	b289      	uxth	r1, r1
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6d0:	4285      	cmp	r5, r0
 800a6d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a6d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6da:	dcec      	bgt.n	800a6b6 <__multadd+0x12>
 800a6dc:	b30e      	cbz	r6, 800a722 <__multadd+0x7e>
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	42ab      	cmp	r3, r5
 800a6e2:	dc19      	bgt.n	800a718 <__multadd+0x74>
 800a6e4:	6861      	ldr	r1, [r4, #4]
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	3101      	adds	r1, #1
 800a6ea:	f7ff ff79 	bl	800a5e0 <_Balloc>
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	b928      	cbnz	r0, 800a6fe <__multadd+0x5a>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <__multadd+0x84>)
 800a6f6:	480d      	ldr	r0, [pc, #52]	; (800a72c <__multadd+0x88>)
 800a6f8:	21ba      	movs	r1, #186	; 0xba
 800a6fa:	f000 fbcf 	bl	800ae9c <__assert_func>
 800a6fe:	6922      	ldr	r2, [r4, #16]
 800a700:	3202      	adds	r2, #2
 800a702:	f104 010c 	add.w	r1, r4, #12
 800a706:	0092      	lsls	r2, r2, #2
 800a708:	300c      	adds	r0, #12
 800a70a:	f7fe fe25 	bl	8009358 <memcpy>
 800a70e:	4621      	mov	r1, r4
 800a710:	4638      	mov	r0, r7
 800a712:	f7ff ffa5 	bl	800a660 <_Bfree>
 800a716:	4644      	mov	r4, r8
 800a718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a71c:	3501      	adds	r5, #1
 800a71e:	615e      	str	r6, [r3, #20]
 800a720:	6125      	str	r5, [r4, #16]
 800a722:	4620      	mov	r0, r4
 800a724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a728:	0800b784 	.word	0x0800b784
 800a72c:	0800b7a6 	.word	0x0800b7a6

0800a730 <__hi0bits>:
 800a730:	0c03      	lsrs	r3, r0, #16
 800a732:	041b      	lsls	r3, r3, #16
 800a734:	b9d3      	cbnz	r3, 800a76c <__hi0bits+0x3c>
 800a736:	0400      	lsls	r0, r0, #16
 800a738:	2310      	movs	r3, #16
 800a73a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a73e:	bf04      	itt	eq
 800a740:	0200      	lsleq	r0, r0, #8
 800a742:	3308      	addeq	r3, #8
 800a744:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a748:	bf04      	itt	eq
 800a74a:	0100      	lsleq	r0, r0, #4
 800a74c:	3304      	addeq	r3, #4
 800a74e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a752:	bf04      	itt	eq
 800a754:	0080      	lsleq	r0, r0, #2
 800a756:	3302      	addeq	r3, #2
 800a758:	2800      	cmp	r0, #0
 800a75a:	db05      	blt.n	800a768 <__hi0bits+0x38>
 800a75c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a760:	f103 0301 	add.w	r3, r3, #1
 800a764:	bf08      	it	eq
 800a766:	2320      	moveq	r3, #32
 800a768:	4618      	mov	r0, r3
 800a76a:	4770      	bx	lr
 800a76c:	2300      	movs	r3, #0
 800a76e:	e7e4      	b.n	800a73a <__hi0bits+0xa>

0800a770 <__lo0bits>:
 800a770:	6803      	ldr	r3, [r0, #0]
 800a772:	f013 0207 	ands.w	r2, r3, #7
 800a776:	d00c      	beq.n	800a792 <__lo0bits+0x22>
 800a778:	07d9      	lsls	r1, r3, #31
 800a77a:	d422      	bmi.n	800a7c2 <__lo0bits+0x52>
 800a77c:	079a      	lsls	r2, r3, #30
 800a77e:	bf49      	itett	mi
 800a780:	085b      	lsrmi	r3, r3, #1
 800a782:	089b      	lsrpl	r3, r3, #2
 800a784:	6003      	strmi	r3, [r0, #0]
 800a786:	2201      	movmi	r2, #1
 800a788:	bf5c      	itt	pl
 800a78a:	6003      	strpl	r3, [r0, #0]
 800a78c:	2202      	movpl	r2, #2
 800a78e:	4610      	mov	r0, r2
 800a790:	4770      	bx	lr
 800a792:	b299      	uxth	r1, r3
 800a794:	b909      	cbnz	r1, 800a79a <__lo0bits+0x2a>
 800a796:	0c1b      	lsrs	r3, r3, #16
 800a798:	2210      	movs	r2, #16
 800a79a:	b2d9      	uxtb	r1, r3
 800a79c:	b909      	cbnz	r1, 800a7a2 <__lo0bits+0x32>
 800a79e:	3208      	adds	r2, #8
 800a7a0:	0a1b      	lsrs	r3, r3, #8
 800a7a2:	0719      	lsls	r1, r3, #28
 800a7a4:	bf04      	itt	eq
 800a7a6:	091b      	lsreq	r3, r3, #4
 800a7a8:	3204      	addeq	r2, #4
 800a7aa:	0799      	lsls	r1, r3, #30
 800a7ac:	bf04      	itt	eq
 800a7ae:	089b      	lsreq	r3, r3, #2
 800a7b0:	3202      	addeq	r2, #2
 800a7b2:	07d9      	lsls	r1, r3, #31
 800a7b4:	d403      	bmi.n	800a7be <__lo0bits+0x4e>
 800a7b6:	085b      	lsrs	r3, r3, #1
 800a7b8:	f102 0201 	add.w	r2, r2, #1
 800a7bc:	d003      	beq.n	800a7c6 <__lo0bits+0x56>
 800a7be:	6003      	str	r3, [r0, #0]
 800a7c0:	e7e5      	b.n	800a78e <__lo0bits+0x1e>
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	e7e3      	b.n	800a78e <__lo0bits+0x1e>
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	e7e1      	b.n	800a78e <__lo0bits+0x1e>
	...

0800a7cc <__i2b>:
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	f7ff ff05 	bl	800a5e0 <_Balloc>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	b928      	cbnz	r0, 800a7e6 <__i2b+0x1a>
 800a7da:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <__i2b+0x24>)
 800a7dc:	4805      	ldr	r0, [pc, #20]	; (800a7f4 <__i2b+0x28>)
 800a7de:	f240 1145 	movw	r1, #325	; 0x145
 800a7e2:	f000 fb5b 	bl	800ae9c <__assert_func>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	6144      	str	r4, [r0, #20]
 800a7ea:	6103      	str	r3, [r0, #16]
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	bf00      	nop
 800a7f0:	0800b784 	.word	0x0800b784
 800a7f4:	0800b7a6 	.word	0x0800b7a6

0800a7f8 <__multiply>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	4691      	mov	r9, r2
 800a7fe:	690a      	ldr	r2, [r1, #16]
 800a800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a804:	429a      	cmp	r2, r3
 800a806:	bfb8      	it	lt
 800a808:	460b      	movlt	r3, r1
 800a80a:	460c      	mov	r4, r1
 800a80c:	bfbc      	itt	lt
 800a80e:	464c      	movlt	r4, r9
 800a810:	4699      	movlt	r9, r3
 800a812:	6927      	ldr	r7, [r4, #16]
 800a814:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	6861      	ldr	r1, [r4, #4]
 800a81c:	eb07 060a 	add.w	r6, r7, sl
 800a820:	42b3      	cmp	r3, r6
 800a822:	b085      	sub	sp, #20
 800a824:	bfb8      	it	lt
 800a826:	3101      	addlt	r1, #1
 800a828:	f7ff feda 	bl	800a5e0 <_Balloc>
 800a82c:	b930      	cbnz	r0, 800a83c <__multiply+0x44>
 800a82e:	4602      	mov	r2, r0
 800a830:	4b44      	ldr	r3, [pc, #272]	; (800a944 <__multiply+0x14c>)
 800a832:	4845      	ldr	r0, [pc, #276]	; (800a948 <__multiply+0x150>)
 800a834:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a838:	f000 fb30 	bl	800ae9c <__assert_func>
 800a83c:	f100 0514 	add.w	r5, r0, #20
 800a840:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a844:	462b      	mov	r3, r5
 800a846:	2200      	movs	r2, #0
 800a848:	4543      	cmp	r3, r8
 800a84a:	d321      	bcc.n	800a890 <__multiply+0x98>
 800a84c:	f104 0314 	add.w	r3, r4, #20
 800a850:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a854:	f109 0314 	add.w	r3, r9, #20
 800a858:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a85c:	9202      	str	r2, [sp, #8]
 800a85e:	1b3a      	subs	r2, r7, r4
 800a860:	3a15      	subs	r2, #21
 800a862:	f022 0203 	bic.w	r2, r2, #3
 800a866:	3204      	adds	r2, #4
 800a868:	f104 0115 	add.w	r1, r4, #21
 800a86c:	428f      	cmp	r7, r1
 800a86e:	bf38      	it	cc
 800a870:	2204      	movcc	r2, #4
 800a872:	9201      	str	r2, [sp, #4]
 800a874:	9a02      	ldr	r2, [sp, #8]
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d80c      	bhi.n	800a896 <__multiply+0x9e>
 800a87c:	2e00      	cmp	r6, #0
 800a87e:	dd03      	ble.n	800a888 <__multiply+0x90>
 800a880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a884:	2b00      	cmp	r3, #0
 800a886:	d05b      	beq.n	800a940 <__multiply+0x148>
 800a888:	6106      	str	r6, [r0, #16]
 800a88a:	b005      	add	sp, #20
 800a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a890:	f843 2b04 	str.w	r2, [r3], #4
 800a894:	e7d8      	b.n	800a848 <__multiply+0x50>
 800a896:	f8b3 a000 	ldrh.w	sl, [r3]
 800a89a:	f1ba 0f00 	cmp.w	sl, #0
 800a89e:	d024      	beq.n	800a8ea <__multiply+0xf2>
 800a8a0:	f104 0e14 	add.w	lr, r4, #20
 800a8a4:	46a9      	mov	r9, r5
 800a8a6:	f04f 0c00 	mov.w	ip, #0
 800a8aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8ae:	f8d9 1000 	ldr.w	r1, [r9]
 800a8b2:	fa1f fb82 	uxth.w	fp, r2
 800a8b6:	b289      	uxth	r1, r1
 800a8b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a8c4:	4461      	add	r1, ip
 800a8c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800a8ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8d2:	b289      	uxth	r1, r1
 800a8d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8d8:	4577      	cmp	r7, lr
 800a8da:	f849 1b04 	str.w	r1, [r9], #4
 800a8de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8e2:	d8e2      	bhi.n	800a8aa <__multiply+0xb2>
 800a8e4:	9a01      	ldr	r2, [sp, #4]
 800a8e6:	f845 c002 	str.w	ip, [r5, r2]
 800a8ea:	9a03      	ldr	r2, [sp, #12]
 800a8ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	f1b9 0f00 	cmp.w	r9, #0
 800a8f6:	d021      	beq.n	800a93c <__multiply+0x144>
 800a8f8:	6829      	ldr	r1, [r5, #0]
 800a8fa:	f104 0c14 	add.w	ip, r4, #20
 800a8fe:	46ae      	mov	lr, r5
 800a900:	f04f 0a00 	mov.w	sl, #0
 800a904:	f8bc b000 	ldrh.w	fp, [ip]
 800a908:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a90c:	fb09 220b 	mla	r2, r9, fp, r2
 800a910:	4452      	add	r2, sl
 800a912:	b289      	uxth	r1, r1
 800a914:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a918:	f84e 1b04 	str.w	r1, [lr], #4
 800a91c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a920:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a924:	f8be 1000 	ldrh.w	r1, [lr]
 800a928:	fb09 110a 	mla	r1, r9, sl, r1
 800a92c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a930:	4567      	cmp	r7, ip
 800a932:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a936:	d8e5      	bhi.n	800a904 <__multiply+0x10c>
 800a938:	9a01      	ldr	r2, [sp, #4]
 800a93a:	50a9      	str	r1, [r5, r2]
 800a93c:	3504      	adds	r5, #4
 800a93e:	e799      	b.n	800a874 <__multiply+0x7c>
 800a940:	3e01      	subs	r6, #1
 800a942:	e79b      	b.n	800a87c <__multiply+0x84>
 800a944:	0800b784 	.word	0x0800b784
 800a948:	0800b7a6 	.word	0x0800b7a6

0800a94c <__pow5mult>:
 800a94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a950:	4615      	mov	r5, r2
 800a952:	f012 0203 	ands.w	r2, r2, #3
 800a956:	4606      	mov	r6, r0
 800a958:	460f      	mov	r7, r1
 800a95a:	d007      	beq.n	800a96c <__pow5mult+0x20>
 800a95c:	4c25      	ldr	r4, [pc, #148]	; (800a9f4 <__pow5mult+0xa8>)
 800a95e:	3a01      	subs	r2, #1
 800a960:	2300      	movs	r3, #0
 800a962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a966:	f7ff fe9d 	bl	800a6a4 <__multadd>
 800a96a:	4607      	mov	r7, r0
 800a96c:	10ad      	asrs	r5, r5, #2
 800a96e:	d03d      	beq.n	800a9ec <__pow5mult+0xa0>
 800a970:	69f4      	ldr	r4, [r6, #28]
 800a972:	b97c      	cbnz	r4, 800a994 <__pow5mult+0x48>
 800a974:	2010      	movs	r0, #16
 800a976:	f7ff fcd1 	bl	800a31c <malloc>
 800a97a:	4602      	mov	r2, r0
 800a97c:	61f0      	str	r0, [r6, #28]
 800a97e:	b928      	cbnz	r0, 800a98c <__pow5mult+0x40>
 800a980:	4b1d      	ldr	r3, [pc, #116]	; (800a9f8 <__pow5mult+0xac>)
 800a982:	481e      	ldr	r0, [pc, #120]	; (800a9fc <__pow5mult+0xb0>)
 800a984:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a988:	f000 fa88 	bl	800ae9c <__assert_func>
 800a98c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a990:	6004      	str	r4, [r0, #0]
 800a992:	60c4      	str	r4, [r0, #12]
 800a994:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a99c:	b94c      	cbnz	r4, 800a9b2 <__pow5mult+0x66>
 800a99e:	f240 2171 	movw	r1, #625	; 0x271
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ff12 	bl	800a7cc <__i2b>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	6003      	str	r3, [r0, #0]
 800a9b2:	f04f 0900 	mov.w	r9, #0
 800a9b6:	07eb      	lsls	r3, r5, #31
 800a9b8:	d50a      	bpl.n	800a9d0 <__pow5mult+0x84>
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	4622      	mov	r2, r4
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f7ff ff1a 	bl	800a7f8 <__multiply>
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	4680      	mov	r8, r0
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff fe49 	bl	800a660 <_Bfree>
 800a9ce:	4647      	mov	r7, r8
 800a9d0:	106d      	asrs	r5, r5, #1
 800a9d2:	d00b      	beq.n	800a9ec <__pow5mult+0xa0>
 800a9d4:	6820      	ldr	r0, [r4, #0]
 800a9d6:	b938      	cbnz	r0, 800a9e8 <__pow5mult+0x9c>
 800a9d8:	4622      	mov	r2, r4
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f7ff ff0b 	bl	800a7f8 <__multiply>
 800a9e2:	6020      	str	r0, [r4, #0]
 800a9e4:	f8c0 9000 	str.w	r9, [r0]
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	e7e4      	b.n	800a9b6 <__pow5mult+0x6a>
 800a9ec:	4638      	mov	r0, r7
 800a9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f2:	bf00      	nop
 800a9f4:	0800b8f0 	.word	0x0800b8f0
 800a9f8:	0800b715 	.word	0x0800b715
 800a9fc:	0800b7a6 	.word	0x0800b7a6

0800aa00 <__lshift>:
 800aa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa04:	460c      	mov	r4, r1
 800aa06:	6849      	ldr	r1, [r1, #4]
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa0e:	68a3      	ldr	r3, [r4, #8]
 800aa10:	4607      	mov	r7, r0
 800aa12:	4691      	mov	r9, r2
 800aa14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa18:	f108 0601 	add.w	r6, r8, #1
 800aa1c:	42b3      	cmp	r3, r6
 800aa1e:	db0b      	blt.n	800aa38 <__lshift+0x38>
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff fddd 	bl	800a5e0 <_Balloc>
 800aa26:	4605      	mov	r5, r0
 800aa28:	b948      	cbnz	r0, 800aa3e <__lshift+0x3e>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b28      	ldr	r3, [pc, #160]	; (800aad0 <__lshift+0xd0>)
 800aa2e:	4829      	ldr	r0, [pc, #164]	; (800aad4 <__lshift+0xd4>)
 800aa30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aa34:	f000 fa32 	bl	800ae9c <__assert_func>
 800aa38:	3101      	adds	r1, #1
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	e7ee      	b.n	800aa1c <__lshift+0x1c>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f100 0114 	add.w	r1, r0, #20
 800aa44:	f100 0210 	add.w	r2, r0, #16
 800aa48:	4618      	mov	r0, r3
 800aa4a:	4553      	cmp	r3, sl
 800aa4c:	db33      	blt.n	800aab6 <__lshift+0xb6>
 800aa4e:	6920      	ldr	r0, [r4, #16]
 800aa50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa54:	f104 0314 	add.w	r3, r4, #20
 800aa58:	f019 091f 	ands.w	r9, r9, #31
 800aa5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa64:	d02b      	beq.n	800aabe <__lshift+0xbe>
 800aa66:	f1c9 0e20 	rsb	lr, r9, #32
 800aa6a:	468a      	mov	sl, r1
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	fa00 f009 	lsl.w	r0, r0, r9
 800aa74:	4310      	orrs	r0, r2
 800aa76:	f84a 0b04 	str.w	r0, [sl], #4
 800aa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7e:	459c      	cmp	ip, r3
 800aa80:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa84:	d8f3      	bhi.n	800aa6e <__lshift+0x6e>
 800aa86:	ebac 0304 	sub.w	r3, ip, r4
 800aa8a:	3b15      	subs	r3, #21
 800aa8c:	f023 0303 	bic.w	r3, r3, #3
 800aa90:	3304      	adds	r3, #4
 800aa92:	f104 0015 	add.w	r0, r4, #21
 800aa96:	4584      	cmp	ip, r0
 800aa98:	bf38      	it	cc
 800aa9a:	2304      	movcc	r3, #4
 800aa9c:	50ca      	str	r2, [r1, r3]
 800aa9e:	b10a      	cbz	r2, 800aaa4 <__lshift+0xa4>
 800aaa0:	f108 0602 	add.w	r6, r8, #2
 800aaa4:	3e01      	subs	r6, #1
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	612e      	str	r6, [r5, #16]
 800aaaa:	4621      	mov	r1, r4
 800aaac:	f7ff fdd8 	bl	800a660 <_Bfree>
 800aab0:	4628      	mov	r0, r5
 800aab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab6:	f842 0f04 	str.w	r0, [r2, #4]!
 800aaba:	3301      	adds	r3, #1
 800aabc:	e7c5      	b.n	800aa4a <__lshift+0x4a>
 800aabe:	3904      	subs	r1, #4
 800aac0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aac8:	459c      	cmp	ip, r3
 800aaca:	d8f9      	bhi.n	800aac0 <__lshift+0xc0>
 800aacc:	e7ea      	b.n	800aaa4 <__lshift+0xa4>
 800aace:	bf00      	nop
 800aad0:	0800b784 	.word	0x0800b784
 800aad4:	0800b7a6 	.word	0x0800b7a6

0800aad8 <__mcmp>:
 800aad8:	b530      	push	{r4, r5, lr}
 800aada:	6902      	ldr	r2, [r0, #16]
 800aadc:	690c      	ldr	r4, [r1, #16]
 800aade:	1b12      	subs	r2, r2, r4
 800aae0:	d10e      	bne.n	800ab00 <__mcmp+0x28>
 800aae2:	f100 0314 	add.w	r3, r0, #20
 800aae6:	3114      	adds	r1, #20
 800aae8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aaec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aaf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aaf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aaf8:	42a5      	cmp	r5, r4
 800aafa:	d003      	beq.n	800ab04 <__mcmp+0x2c>
 800aafc:	d305      	bcc.n	800ab0a <__mcmp+0x32>
 800aafe:	2201      	movs	r2, #1
 800ab00:	4610      	mov	r0, r2
 800ab02:	bd30      	pop	{r4, r5, pc}
 800ab04:	4283      	cmp	r3, r0
 800ab06:	d3f3      	bcc.n	800aaf0 <__mcmp+0x18>
 800ab08:	e7fa      	b.n	800ab00 <__mcmp+0x28>
 800ab0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab0e:	e7f7      	b.n	800ab00 <__mcmp+0x28>

0800ab10 <__mdiff>:
 800ab10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	460c      	mov	r4, r1
 800ab16:	4606      	mov	r6, r0
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	4690      	mov	r8, r2
 800ab1e:	f7ff ffdb 	bl	800aad8 <__mcmp>
 800ab22:	1e05      	subs	r5, r0, #0
 800ab24:	d110      	bne.n	800ab48 <__mdiff+0x38>
 800ab26:	4629      	mov	r1, r5
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff fd59 	bl	800a5e0 <_Balloc>
 800ab2e:	b930      	cbnz	r0, 800ab3e <__mdiff+0x2e>
 800ab30:	4b3a      	ldr	r3, [pc, #232]	; (800ac1c <__mdiff+0x10c>)
 800ab32:	4602      	mov	r2, r0
 800ab34:	f240 2137 	movw	r1, #567	; 0x237
 800ab38:	4839      	ldr	r0, [pc, #228]	; (800ac20 <__mdiff+0x110>)
 800ab3a:	f000 f9af 	bl	800ae9c <__assert_func>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab48:	bfa4      	itt	ge
 800ab4a:	4643      	movge	r3, r8
 800ab4c:	46a0      	movge	r8, r4
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab54:	bfa6      	itte	ge
 800ab56:	461c      	movge	r4, r3
 800ab58:	2500      	movge	r5, #0
 800ab5a:	2501      	movlt	r5, #1
 800ab5c:	f7ff fd40 	bl	800a5e0 <_Balloc>
 800ab60:	b920      	cbnz	r0, 800ab6c <__mdiff+0x5c>
 800ab62:	4b2e      	ldr	r3, [pc, #184]	; (800ac1c <__mdiff+0x10c>)
 800ab64:	4602      	mov	r2, r0
 800ab66:	f240 2145 	movw	r1, #581	; 0x245
 800ab6a:	e7e5      	b.n	800ab38 <__mdiff+0x28>
 800ab6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab70:	6926      	ldr	r6, [r4, #16]
 800ab72:	60c5      	str	r5, [r0, #12]
 800ab74:	f104 0914 	add.w	r9, r4, #20
 800ab78:	f108 0514 	add.w	r5, r8, #20
 800ab7c:	f100 0e14 	add.w	lr, r0, #20
 800ab80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab88:	f108 0210 	add.w	r2, r8, #16
 800ab8c:	46f2      	mov	sl, lr
 800ab8e:	2100      	movs	r1, #0
 800ab90:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab98:	fa11 f88b 	uxtah	r8, r1, fp
 800ab9c:	b299      	uxth	r1, r3
 800ab9e:	0c1b      	lsrs	r3, r3, #16
 800aba0:	eba8 0801 	sub.w	r8, r8, r1
 800aba4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aba8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abac:	fa1f f888 	uxth.w	r8, r8
 800abb0:	1419      	asrs	r1, r3, #16
 800abb2:	454e      	cmp	r6, r9
 800abb4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abb8:	f84a 3b04 	str.w	r3, [sl], #4
 800abbc:	d8e8      	bhi.n	800ab90 <__mdiff+0x80>
 800abbe:	1b33      	subs	r3, r6, r4
 800abc0:	3b15      	subs	r3, #21
 800abc2:	f023 0303 	bic.w	r3, r3, #3
 800abc6:	3304      	adds	r3, #4
 800abc8:	3415      	adds	r4, #21
 800abca:	42a6      	cmp	r6, r4
 800abcc:	bf38      	it	cc
 800abce:	2304      	movcc	r3, #4
 800abd0:	441d      	add	r5, r3
 800abd2:	4473      	add	r3, lr
 800abd4:	469e      	mov	lr, r3
 800abd6:	462e      	mov	r6, r5
 800abd8:	4566      	cmp	r6, ip
 800abda:	d30e      	bcc.n	800abfa <__mdiff+0xea>
 800abdc:	f10c 0203 	add.w	r2, ip, #3
 800abe0:	1b52      	subs	r2, r2, r5
 800abe2:	f022 0203 	bic.w	r2, r2, #3
 800abe6:	3d03      	subs	r5, #3
 800abe8:	45ac      	cmp	ip, r5
 800abea:	bf38      	it	cc
 800abec:	2200      	movcc	r2, #0
 800abee:	4413      	add	r3, r2
 800abf0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800abf4:	b17a      	cbz	r2, 800ac16 <__mdiff+0x106>
 800abf6:	6107      	str	r7, [r0, #16]
 800abf8:	e7a4      	b.n	800ab44 <__mdiff+0x34>
 800abfa:	f856 8b04 	ldr.w	r8, [r6], #4
 800abfe:	fa11 f288 	uxtah	r2, r1, r8
 800ac02:	1414      	asrs	r4, r2, #16
 800ac04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac08:	b292      	uxth	r2, r2
 800ac0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac0e:	f84e 2b04 	str.w	r2, [lr], #4
 800ac12:	1421      	asrs	r1, r4, #16
 800ac14:	e7e0      	b.n	800abd8 <__mdiff+0xc8>
 800ac16:	3f01      	subs	r7, #1
 800ac18:	e7ea      	b.n	800abf0 <__mdiff+0xe0>
 800ac1a:	bf00      	nop
 800ac1c:	0800b784 	.word	0x0800b784
 800ac20:	0800b7a6 	.word	0x0800b7a6

0800ac24 <__d2b>:
 800ac24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac28:	460f      	mov	r7, r1
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	ec59 8b10 	vmov	r8, r9, d0
 800ac30:	4616      	mov	r6, r2
 800ac32:	f7ff fcd5 	bl	800a5e0 <_Balloc>
 800ac36:	4604      	mov	r4, r0
 800ac38:	b930      	cbnz	r0, 800ac48 <__d2b+0x24>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	4b24      	ldr	r3, [pc, #144]	; (800acd0 <__d2b+0xac>)
 800ac3e:	4825      	ldr	r0, [pc, #148]	; (800acd4 <__d2b+0xb0>)
 800ac40:	f240 310f 	movw	r1, #783	; 0x30f
 800ac44:	f000 f92a 	bl	800ae9c <__assert_func>
 800ac48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac50:	bb2d      	cbnz	r5, 800ac9e <__d2b+0x7a>
 800ac52:	9301      	str	r3, [sp, #4]
 800ac54:	f1b8 0300 	subs.w	r3, r8, #0
 800ac58:	d026      	beq.n	800aca8 <__d2b+0x84>
 800ac5a:	4668      	mov	r0, sp
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	f7ff fd87 	bl	800a770 <__lo0bits>
 800ac62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac66:	b1e8      	cbz	r0, 800aca4 <__d2b+0x80>
 800ac68:	f1c0 0320 	rsb	r3, r0, #32
 800ac6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac70:	430b      	orrs	r3, r1
 800ac72:	40c2      	lsrs	r2, r0
 800ac74:	6163      	str	r3, [r4, #20]
 800ac76:	9201      	str	r2, [sp, #4]
 800ac78:	9b01      	ldr	r3, [sp, #4]
 800ac7a:	61a3      	str	r3, [r4, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	bf14      	ite	ne
 800ac80:	2202      	movne	r2, #2
 800ac82:	2201      	moveq	r2, #1
 800ac84:	6122      	str	r2, [r4, #16]
 800ac86:	b1bd      	cbz	r5, 800acb8 <__d2b+0x94>
 800ac88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac8c:	4405      	add	r5, r0
 800ac8e:	603d      	str	r5, [r7, #0]
 800ac90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac94:	6030      	str	r0, [r6, #0]
 800ac96:	4620      	mov	r0, r4
 800ac98:	b003      	add	sp, #12
 800ac9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aca2:	e7d6      	b.n	800ac52 <__d2b+0x2e>
 800aca4:	6161      	str	r1, [r4, #20]
 800aca6:	e7e7      	b.n	800ac78 <__d2b+0x54>
 800aca8:	a801      	add	r0, sp, #4
 800acaa:	f7ff fd61 	bl	800a770 <__lo0bits>
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	6163      	str	r3, [r4, #20]
 800acb2:	3020      	adds	r0, #32
 800acb4:	2201      	movs	r2, #1
 800acb6:	e7e5      	b.n	800ac84 <__d2b+0x60>
 800acb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acc0:	6038      	str	r0, [r7, #0]
 800acc2:	6918      	ldr	r0, [r3, #16]
 800acc4:	f7ff fd34 	bl	800a730 <__hi0bits>
 800acc8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800accc:	e7e2      	b.n	800ac94 <__d2b+0x70>
 800acce:	bf00      	nop
 800acd0:	0800b784 	.word	0x0800b784
 800acd4:	0800b7a6 	.word	0x0800b7a6

0800acd8 <__sread>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	460c      	mov	r4, r1
 800acdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace0:	f000 f8a8 	bl	800ae34 <_read_r>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	bfab      	itete	ge
 800ace8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acea:	89a3      	ldrhlt	r3, [r4, #12]
 800acec:	181b      	addge	r3, r3, r0
 800acee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acf2:	bfac      	ite	ge
 800acf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800acf6:	81a3      	strhlt	r3, [r4, #12]
 800acf8:	bd10      	pop	{r4, pc}

0800acfa <__swrite>:
 800acfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfe:	461f      	mov	r7, r3
 800ad00:	898b      	ldrh	r3, [r1, #12]
 800ad02:	05db      	lsls	r3, r3, #23
 800ad04:	4605      	mov	r5, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	4616      	mov	r6, r2
 800ad0a:	d505      	bpl.n	800ad18 <__swrite+0x1e>
 800ad0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad10:	2302      	movs	r3, #2
 800ad12:	2200      	movs	r2, #0
 800ad14:	f000 f87c 	bl	800ae10 <_lseek_r>
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad22:	81a3      	strh	r3, [r4, #12]
 800ad24:	4632      	mov	r2, r6
 800ad26:	463b      	mov	r3, r7
 800ad28:	4628      	mov	r0, r5
 800ad2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2e:	f000 b8a3 	b.w	800ae78 <_write_r>

0800ad32 <__sseek>:
 800ad32:	b510      	push	{r4, lr}
 800ad34:	460c      	mov	r4, r1
 800ad36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3a:	f000 f869 	bl	800ae10 <_lseek_r>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	bf15      	itete	ne
 800ad44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad4e:	81a3      	strheq	r3, [r4, #12]
 800ad50:	bf18      	it	ne
 800ad52:	81a3      	strhne	r3, [r4, #12]
 800ad54:	bd10      	pop	{r4, pc}

0800ad56 <__sclose>:
 800ad56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5a:	f000 b849 	b.w	800adf0 <_close_r>

0800ad5e <_realloc_r>:
 800ad5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad62:	4680      	mov	r8, r0
 800ad64:	4614      	mov	r4, r2
 800ad66:	460e      	mov	r6, r1
 800ad68:	b921      	cbnz	r1, 800ad74 <_realloc_r+0x16>
 800ad6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6e:	4611      	mov	r1, r2
 800ad70:	f7ff bafc 	b.w	800a36c <_malloc_r>
 800ad74:	b92a      	cbnz	r2, 800ad82 <_realloc_r+0x24>
 800ad76:	f000 f8c5 	bl	800af04 <_free_r>
 800ad7a:	4625      	mov	r5, r4
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad82:	f000 f91d 	bl	800afc0 <_malloc_usable_size_r>
 800ad86:	4284      	cmp	r4, r0
 800ad88:	4607      	mov	r7, r0
 800ad8a:	d802      	bhi.n	800ad92 <_realloc_r+0x34>
 800ad8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad90:	d812      	bhi.n	800adb8 <_realloc_r+0x5a>
 800ad92:	4621      	mov	r1, r4
 800ad94:	4640      	mov	r0, r8
 800ad96:	f7ff fae9 	bl	800a36c <_malloc_r>
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d0ed      	beq.n	800ad7c <_realloc_r+0x1e>
 800ada0:	42bc      	cmp	r4, r7
 800ada2:	4622      	mov	r2, r4
 800ada4:	4631      	mov	r1, r6
 800ada6:	bf28      	it	cs
 800ada8:	463a      	movcs	r2, r7
 800adaa:	f7fe fad5 	bl	8009358 <memcpy>
 800adae:	4631      	mov	r1, r6
 800adb0:	4640      	mov	r0, r8
 800adb2:	f000 f8a7 	bl	800af04 <_free_r>
 800adb6:	e7e1      	b.n	800ad7c <_realloc_r+0x1e>
 800adb8:	4635      	mov	r5, r6
 800adba:	e7df      	b.n	800ad7c <_realloc_r+0x1e>

0800adbc <memmove>:
 800adbc:	4288      	cmp	r0, r1
 800adbe:	b510      	push	{r4, lr}
 800adc0:	eb01 0402 	add.w	r4, r1, r2
 800adc4:	d902      	bls.n	800adcc <memmove+0x10>
 800adc6:	4284      	cmp	r4, r0
 800adc8:	4623      	mov	r3, r4
 800adca:	d807      	bhi.n	800addc <memmove+0x20>
 800adcc:	1e43      	subs	r3, r0, #1
 800adce:	42a1      	cmp	r1, r4
 800add0:	d008      	beq.n	800ade4 <memmove+0x28>
 800add2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800add6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adda:	e7f8      	b.n	800adce <memmove+0x12>
 800addc:	4402      	add	r2, r0
 800adde:	4601      	mov	r1, r0
 800ade0:	428a      	cmp	r2, r1
 800ade2:	d100      	bne.n	800ade6 <memmove+0x2a>
 800ade4:	bd10      	pop	{r4, pc}
 800ade6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adee:	e7f7      	b.n	800ade0 <memmove+0x24>

0800adf0 <_close_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d06      	ldr	r5, [pc, #24]	; (800ae0c <_close_r+0x1c>)
 800adf4:	2300      	movs	r3, #0
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	602b      	str	r3, [r5, #0]
 800adfc:	f7f7 ff21 	bl	8002c42 <_close>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_close_r+0x1a>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_close_r+0x1a>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	20001590 	.word	0x20001590

0800ae10 <_lseek_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4d07      	ldr	r5, [pc, #28]	; (800ae30 <_lseek_r+0x20>)
 800ae14:	4604      	mov	r4, r0
 800ae16:	4608      	mov	r0, r1
 800ae18:	4611      	mov	r1, r2
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	602a      	str	r2, [r5, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f7f7 ff36 	bl	8002c90 <_lseek>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_lseek_r+0x1e>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_lseek_r+0x1e>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	20001590 	.word	0x20001590

0800ae34 <_read_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4d07      	ldr	r5, [pc, #28]	; (800ae54 <_read_r+0x20>)
 800ae38:	4604      	mov	r4, r0
 800ae3a:	4608      	mov	r0, r1
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	2200      	movs	r2, #0
 800ae40:	602a      	str	r2, [r5, #0]
 800ae42:	461a      	mov	r2, r3
 800ae44:	f7f7 fec4 	bl	8002bd0 <_read>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_read_r+0x1e>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_read_r+0x1e>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20001590 	.word	0x20001590

0800ae58 <_sbrk_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d06      	ldr	r5, [pc, #24]	; (800ae74 <_sbrk_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f7 ff22 	bl	8002cac <_sbrk>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_sbrk_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_sbrk_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	20001590 	.word	0x20001590

0800ae78 <_write_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d07      	ldr	r5, [pc, #28]	; (800ae98 <_write_r+0x20>)
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	4608      	mov	r0, r1
 800ae80:	4611      	mov	r1, r2
 800ae82:	2200      	movs	r2, #0
 800ae84:	602a      	str	r2, [r5, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	f7f7 febf 	bl	8002c0a <_write>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_write_r+0x1e>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_write_r+0x1e>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	20001590 	.word	0x20001590

0800ae9c <__assert_func>:
 800ae9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae9e:	4614      	mov	r4, r2
 800aea0:	461a      	mov	r2, r3
 800aea2:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <__assert_func+0x2c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4605      	mov	r5, r0
 800aea8:	68d8      	ldr	r0, [r3, #12]
 800aeaa:	b14c      	cbz	r4, 800aec0 <__assert_func+0x24>
 800aeac:	4b07      	ldr	r3, [pc, #28]	; (800aecc <__assert_func+0x30>)
 800aeae:	9100      	str	r1, [sp, #0]
 800aeb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aeb4:	4906      	ldr	r1, [pc, #24]	; (800aed0 <__assert_func+0x34>)
 800aeb6:	462b      	mov	r3, r5
 800aeb8:	f000 f88a 	bl	800afd0 <fiprintf>
 800aebc:	f000 f8a7 	bl	800b00e <abort>
 800aec0:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <__assert_func+0x38>)
 800aec2:	461c      	mov	r4, r3
 800aec4:	e7f3      	b.n	800aeae <__assert_func+0x12>
 800aec6:	bf00      	nop
 800aec8:	200000e8 	.word	0x200000e8
 800aecc:	0800ba07 	.word	0x0800ba07
 800aed0:	0800ba14 	.word	0x0800ba14
 800aed4:	0800ba42 	.word	0x0800ba42

0800aed8 <_calloc_r>:
 800aed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeda:	fba1 2402 	umull	r2, r4, r1, r2
 800aede:	b94c      	cbnz	r4, 800aef4 <_calloc_r+0x1c>
 800aee0:	4611      	mov	r1, r2
 800aee2:	9201      	str	r2, [sp, #4]
 800aee4:	f7ff fa42 	bl	800a36c <_malloc_r>
 800aee8:	9a01      	ldr	r2, [sp, #4]
 800aeea:	4605      	mov	r5, r0
 800aeec:	b930      	cbnz	r0, 800aefc <_calloc_r+0x24>
 800aeee:	4628      	mov	r0, r5
 800aef0:	b003      	add	sp, #12
 800aef2:	bd30      	pop	{r4, r5, pc}
 800aef4:	220c      	movs	r2, #12
 800aef6:	6002      	str	r2, [r0, #0]
 800aef8:	2500      	movs	r5, #0
 800aefa:	e7f8      	b.n	800aeee <_calloc_r+0x16>
 800aefc:	4621      	mov	r1, r4
 800aefe:	f7fe f9f3 	bl	80092e8 <memset>
 800af02:	e7f4      	b.n	800aeee <_calloc_r+0x16>

0800af04 <_free_r>:
 800af04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af06:	2900      	cmp	r1, #0
 800af08:	d044      	beq.n	800af94 <_free_r+0x90>
 800af0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0e:	9001      	str	r0, [sp, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	f1a1 0404 	sub.w	r4, r1, #4
 800af16:	bfb8      	it	lt
 800af18:	18e4      	addlt	r4, r4, r3
 800af1a:	f7ff fb55 	bl	800a5c8 <__malloc_lock>
 800af1e:	4a1e      	ldr	r2, [pc, #120]	; (800af98 <_free_r+0x94>)
 800af20:	9801      	ldr	r0, [sp, #4]
 800af22:	6813      	ldr	r3, [r2, #0]
 800af24:	b933      	cbnz	r3, 800af34 <_free_r+0x30>
 800af26:	6063      	str	r3, [r4, #4]
 800af28:	6014      	str	r4, [r2, #0]
 800af2a:	b003      	add	sp, #12
 800af2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af30:	f7ff bb50 	b.w	800a5d4 <__malloc_unlock>
 800af34:	42a3      	cmp	r3, r4
 800af36:	d908      	bls.n	800af4a <_free_r+0x46>
 800af38:	6825      	ldr	r5, [r4, #0]
 800af3a:	1961      	adds	r1, r4, r5
 800af3c:	428b      	cmp	r3, r1
 800af3e:	bf01      	itttt	eq
 800af40:	6819      	ldreq	r1, [r3, #0]
 800af42:	685b      	ldreq	r3, [r3, #4]
 800af44:	1949      	addeq	r1, r1, r5
 800af46:	6021      	streq	r1, [r4, #0]
 800af48:	e7ed      	b.n	800af26 <_free_r+0x22>
 800af4a:	461a      	mov	r2, r3
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	b10b      	cbz	r3, 800af54 <_free_r+0x50>
 800af50:	42a3      	cmp	r3, r4
 800af52:	d9fa      	bls.n	800af4a <_free_r+0x46>
 800af54:	6811      	ldr	r1, [r2, #0]
 800af56:	1855      	adds	r5, r2, r1
 800af58:	42a5      	cmp	r5, r4
 800af5a:	d10b      	bne.n	800af74 <_free_r+0x70>
 800af5c:	6824      	ldr	r4, [r4, #0]
 800af5e:	4421      	add	r1, r4
 800af60:	1854      	adds	r4, r2, r1
 800af62:	42a3      	cmp	r3, r4
 800af64:	6011      	str	r1, [r2, #0]
 800af66:	d1e0      	bne.n	800af2a <_free_r+0x26>
 800af68:	681c      	ldr	r4, [r3, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	6053      	str	r3, [r2, #4]
 800af6e:	440c      	add	r4, r1
 800af70:	6014      	str	r4, [r2, #0]
 800af72:	e7da      	b.n	800af2a <_free_r+0x26>
 800af74:	d902      	bls.n	800af7c <_free_r+0x78>
 800af76:	230c      	movs	r3, #12
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	e7d6      	b.n	800af2a <_free_r+0x26>
 800af7c:	6825      	ldr	r5, [r4, #0]
 800af7e:	1961      	adds	r1, r4, r5
 800af80:	428b      	cmp	r3, r1
 800af82:	bf04      	itt	eq
 800af84:	6819      	ldreq	r1, [r3, #0]
 800af86:	685b      	ldreq	r3, [r3, #4]
 800af88:	6063      	str	r3, [r4, #4]
 800af8a:	bf04      	itt	eq
 800af8c:	1949      	addeq	r1, r1, r5
 800af8e:	6021      	streq	r1, [r4, #0]
 800af90:	6054      	str	r4, [r2, #4]
 800af92:	e7ca      	b.n	800af2a <_free_r+0x26>
 800af94:	b003      	add	sp, #12
 800af96:	bd30      	pop	{r4, r5, pc}
 800af98:	20001588 	.word	0x20001588

0800af9c <__ascii_mbtowc>:
 800af9c:	b082      	sub	sp, #8
 800af9e:	b901      	cbnz	r1, 800afa2 <__ascii_mbtowc+0x6>
 800afa0:	a901      	add	r1, sp, #4
 800afa2:	b142      	cbz	r2, 800afb6 <__ascii_mbtowc+0x1a>
 800afa4:	b14b      	cbz	r3, 800afba <__ascii_mbtowc+0x1e>
 800afa6:	7813      	ldrb	r3, [r2, #0]
 800afa8:	600b      	str	r3, [r1, #0]
 800afaa:	7812      	ldrb	r2, [r2, #0]
 800afac:	1e10      	subs	r0, r2, #0
 800afae:	bf18      	it	ne
 800afb0:	2001      	movne	r0, #1
 800afb2:	b002      	add	sp, #8
 800afb4:	4770      	bx	lr
 800afb6:	4610      	mov	r0, r2
 800afb8:	e7fb      	b.n	800afb2 <__ascii_mbtowc+0x16>
 800afba:	f06f 0001 	mvn.w	r0, #1
 800afbe:	e7f8      	b.n	800afb2 <__ascii_mbtowc+0x16>

0800afc0 <_malloc_usable_size_r>:
 800afc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afc4:	1f18      	subs	r0, r3, #4
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bfbc      	itt	lt
 800afca:	580b      	ldrlt	r3, [r1, r0]
 800afcc:	18c0      	addlt	r0, r0, r3
 800afce:	4770      	bx	lr

0800afd0 <fiprintf>:
 800afd0:	b40e      	push	{r1, r2, r3}
 800afd2:	b503      	push	{r0, r1, lr}
 800afd4:	4601      	mov	r1, r0
 800afd6:	ab03      	add	r3, sp, #12
 800afd8:	4805      	ldr	r0, [pc, #20]	; (800aff0 <fiprintf+0x20>)
 800afda:	f853 2b04 	ldr.w	r2, [r3], #4
 800afde:	6800      	ldr	r0, [r0, #0]
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	f000 f845 	bl	800b070 <_vfiprintf_r>
 800afe6:	b002      	add	sp, #8
 800afe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afec:	b003      	add	sp, #12
 800afee:	4770      	bx	lr
 800aff0:	200000e8 	.word	0x200000e8

0800aff4 <__ascii_wctomb>:
 800aff4:	b149      	cbz	r1, 800b00a <__ascii_wctomb+0x16>
 800aff6:	2aff      	cmp	r2, #255	; 0xff
 800aff8:	bf85      	ittet	hi
 800affa:	238a      	movhi	r3, #138	; 0x8a
 800affc:	6003      	strhi	r3, [r0, #0]
 800affe:	700a      	strbls	r2, [r1, #0]
 800b000:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b004:	bf98      	it	ls
 800b006:	2001      	movls	r0, #1
 800b008:	4770      	bx	lr
 800b00a:	4608      	mov	r0, r1
 800b00c:	4770      	bx	lr

0800b00e <abort>:
 800b00e:	b508      	push	{r3, lr}
 800b010:	2006      	movs	r0, #6
 800b012:	f000 fa89 	bl	800b528 <raise>
 800b016:	2001      	movs	r0, #1
 800b018:	f7f7 fdd0 	bl	8002bbc <_exit>

0800b01c <__sfputc_r>:
 800b01c:	6893      	ldr	r3, [r2, #8]
 800b01e:	3b01      	subs	r3, #1
 800b020:	2b00      	cmp	r3, #0
 800b022:	b410      	push	{r4}
 800b024:	6093      	str	r3, [r2, #8]
 800b026:	da08      	bge.n	800b03a <__sfputc_r+0x1e>
 800b028:	6994      	ldr	r4, [r2, #24]
 800b02a:	42a3      	cmp	r3, r4
 800b02c:	db01      	blt.n	800b032 <__sfputc_r+0x16>
 800b02e:	290a      	cmp	r1, #10
 800b030:	d103      	bne.n	800b03a <__sfputc_r+0x1e>
 800b032:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b036:	f000 b935 	b.w	800b2a4 <__swbuf_r>
 800b03a:	6813      	ldr	r3, [r2, #0]
 800b03c:	1c58      	adds	r0, r3, #1
 800b03e:	6010      	str	r0, [r2, #0]
 800b040:	7019      	strb	r1, [r3, #0]
 800b042:	4608      	mov	r0, r1
 800b044:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <__sfputs_r>:
 800b04a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04c:	4606      	mov	r6, r0
 800b04e:	460f      	mov	r7, r1
 800b050:	4614      	mov	r4, r2
 800b052:	18d5      	adds	r5, r2, r3
 800b054:	42ac      	cmp	r4, r5
 800b056:	d101      	bne.n	800b05c <__sfputs_r+0x12>
 800b058:	2000      	movs	r0, #0
 800b05a:	e007      	b.n	800b06c <__sfputs_r+0x22>
 800b05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b060:	463a      	mov	r2, r7
 800b062:	4630      	mov	r0, r6
 800b064:	f7ff ffda 	bl	800b01c <__sfputc_r>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d1f3      	bne.n	800b054 <__sfputs_r+0xa>
 800b06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b070 <_vfiprintf_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	460d      	mov	r5, r1
 800b076:	b09d      	sub	sp, #116	; 0x74
 800b078:	4614      	mov	r4, r2
 800b07a:	4698      	mov	r8, r3
 800b07c:	4606      	mov	r6, r0
 800b07e:	b118      	cbz	r0, 800b088 <_vfiprintf_r+0x18>
 800b080:	6a03      	ldr	r3, [r0, #32]
 800b082:	b90b      	cbnz	r3, 800b088 <_vfiprintf_r+0x18>
 800b084:	f7fe f8fa 	bl	800927c <__sinit>
 800b088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b08a:	07d9      	lsls	r1, r3, #31
 800b08c:	d405      	bmi.n	800b09a <_vfiprintf_r+0x2a>
 800b08e:	89ab      	ldrh	r3, [r5, #12]
 800b090:	059a      	lsls	r2, r3, #22
 800b092:	d402      	bmi.n	800b09a <_vfiprintf_r+0x2a>
 800b094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b096:	f7fe f95d 	bl	8009354 <__retarget_lock_acquire_recursive>
 800b09a:	89ab      	ldrh	r3, [r5, #12]
 800b09c:	071b      	lsls	r3, r3, #28
 800b09e:	d501      	bpl.n	800b0a4 <_vfiprintf_r+0x34>
 800b0a0:	692b      	ldr	r3, [r5, #16]
 800b0a2:	b99b      	cbnz	r3, 800b0cc <_vfiprintf_r+0x5c>
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f000 f93a 	bl	800b320 <__swsetup_r>
 800b0ac:	b170      	cbz	r0, 800b0cc <_vfiprintf_r+0x5c>
 800b0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0b0:	07dc      	lsls	r4, r3, #31
 800b0b2:	d504      	bpl.n	800b0be <_vfiprintf_r+0x4e>
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0b8:	b01d      	add	sp, #116	; 0x74
 800b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	0598      	lsls	r0, r3, #22
 800b0c2:	d4f7      	bmi.n	800b0b4 <_vfiprintf_r+0x44>
 800b0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0c6:	f7fe f946 	bl	8009356 <__retarget_lock_release_recursive>
 800b0ca:	e7f3      	b.n	800b0b4 <_vfiprintf_r+0x44>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d0:	2320      	movs	r3, #32
 800b0d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0da:	2330      	movs	r3, #48	; 0x30
 800b0dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b290 <_vfiprintf_r+0x220>
 800b0e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0e4:	f04f 0901 	mov.w	r9, #1
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	469a      	mov	sl, r3
 800b0ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0f0:	b10a      	cbz	r2, 800b0f6 <_vfiprintf_r+0x86>
 800b0f2:	2a25      	cmp	r2, #37	; 0x25
 800b0f4:	d1f9      	bne.n	800b0ea <_vfiprintf_r+0x7a>
 800b0f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0fa:	d00b      	beq.n	800b114 <_vfiprintf_r+0xa4>
 800b0fc:	465b      	mov	r3, fp
 800b0fe:	4622      	mov	r2, r4
 800b100:	4629      	mov	r1, r5
 800b102:	4630      	mov	r0, r6
 800b104:	f7ff ffa1 	bl	800b04a <__sfputs_r>
 800b108:	3001      	adds	r0, #1
 800b10a:	f000 80a9 	beq.w	800b260 <_vfiprintf_r+0x1f0>
 800b10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b110:	445a      	add	r2, fp
 800b112:	9209      	str	r2, [sp, #36]	; 0x24
 800b114:	f89a 3000 	ldrb.w	r3, [sl]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 80a1 	beq.w	800b260 <_vfiprintf_r+0x1f0>
 800b11e:	2300      	movs	r3, #0
 800b120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b128:	f10a 0a01 	add.w	sl, sl, #1
 800b12c:	9304      	str	r3, [sp, #16]
 800b12e:	9307      	str	r3, [sp, #28]
 800b130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b134:	931a      	str	r3, [sp, #104]	; 0x68
 800b136:	4654      	mov	r4, sl
 800b138:	2205      	movs	r2, #5
 800b13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13e:	4854      	ldr	r0, [pc, #336]	; (800b290 <_vfiprintf_r+0x220>)
 800b140:	f7f5 f846 	bl	80001d0 <memchr>
 800b144:	9a04      	ldr	r2, [sp, #16]
 800b146:	b9d8      	cbnz	r0, 800b180 <_vfiprintf_r+0x110>
 800b148:	06d1      	lsls	r1, r2, #27
 800b14a:	bf44      	itt	mi
 800b14c:	2320      	movmi	r3, #32
 800b14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b152:	0713      	lsls	r3, r2, #28
 800b154:	bf44      	itt	mi
 800b156:	232b      	movmi	r3, #43	; 0x2b
 800b158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b15c:	f89a 3000 	ldrb.w	r3, [sl]
 800b160:	2b2a      	cmp	r3, #42	; 0x2a
 800b162:	d015      	beq.n	800b190 <_vfiprintf_r+0x120>
 800b164:	9a07      	ldr	r2, [sp, #28]
 800b166:	4654      	mov	r4, sl
 800b168:	2000      	movs	r0, #0
 800b16a:	f04f 0c0a 	mov.w	ip, #10
 800b16e:	4621      	mov	r1, r4
 800b170:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b174:	3b30      	subs	r3, #48	; 0x30
 800b176:	2b09      	cmp	r3, #9
 800b178:	d94d      	bls.n	800b216 <_vfiprintf_r+0x1a6>
 800b17a:	b1b0      	cbz	r0, 800b1aa <_vfiprintf_r+0x13a>
 800b17c:	9207      	str	r2, [sp, #28]
 800b17e:	e014      	b.n	800b1aa <_vfiprintf_r+0x13a>
 800b180:	eba0 0308 	sub.w	r3, r0, r8
 800b184:	fa09 f303 	lsl.w	r3, r9, r3
 800b188:	4313      	orrs	r3, r2
 800b18a:	9304      	str	r3, [sp, #16]
 800b18c:	46a2      	mov	sl, r4
 800b18e:	e7d2      	b.n	800b136 <_vfiprintf_r+0xc6>
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	1d19      	adds	r1, r3, #4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	9103      	str	r1, [sp, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	bfbb      	ittet	lt
 800b19c:	425b      	neglt	r3, r3
 800b19e:	f042 0202 	orrlt.w	r2, r2, #2
 800b1a2:	9307      	strge	r3, [sp, #28]
 800b1a4:	9307      	strlt	r3, [sp, #28]
 800b1a6:	bfb8      	it	lt
 800b1a8:	9204      	strlt	r2, [sp, #16]
 800b1aa:	7823      	ldrb	r3, [r4, #0]
 800b1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ae:	d10c      	bne.n	800b1ca <_vfiprintf_r+0x15a>
 800b1b0:	7863      	ldrb	r3, [r4, #1]
 800b1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1b4:	d134      	bne.n	800b220 <_vfiprintf_r+0x1b0>
 800b1b6:	9b03      	ldr	r3, [sp, #12]
 800b1b8:	1d1a      	adds	r2, r3, #4
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	9203      	str	r2, [sp, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfb8      	it	lt
 800b1c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b1c6:	3402      	adds	r4, #2
 800b1c8:	9305      	str	r3, [sp, #20]
 800b1ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b2a0 <_vfiprintf_r+0x230>
 800b1ce:	7821      	ldrb	r1, [r4, #0]
 800b1d0:	2203      	movs	r2, #3
 800b1d2:	4650      	mov	r0, sl
 800b1d4:	f7f4 fffc 	bl	80001d0 <memchr>
 800b1d8:	b138      	cbz	r0, 800b1ea <_vfiprintf_r+0x17a>
 800b1da:	9b04      	ldr	r3, [sp, #16]
 800b1dc:	eba0 000a 	sub.w	r0, r0, sl
 800b1e0:	2240      	movs	r2, #64	; 0x40
 800b1e2:	4082      	lsls	r2, r0
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	3401      	adds	r4, #1
 800b1e8:	9304      	str	r3, [sp, #16]
 800b1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ee:	4829      	ldr	r0, [pc, #164]	; (800b294 <_vfiprintf_r+0x224>)
 800b1f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1f4:	2206      	movs	r2, #6
 800b1f6:	f7f4 ffeb 	bl	80001d0 <memchr>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d03f      	beq.n	800b27e <_vfiprintf_r+0x20e>
 800b1fe:	4b26      	ldr	r3, [pc, #152]	; (800b298 <_vfiprintf_r+0x228>)
 800b200:	bb1b      	cbnz	r3, 800b24a <_vfiprintf_r+0x1da>
 800b202:	9b03      	ldr	r3, [sp, #12]
 800b204:	3307      	adds	r3, #7
 800b206:	f023 0307 	bic.w	r3, r3, #7
 800b20a:	3308      	adds	r3, #8
 800b20c:	9303      	str	r3, [sp, #12]
 800b20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b210:	443b      	add	r3, r7
 800b212:	9309      	str	r3, [sp, #36]	; 0x24
 800b214:	e768      	b.n	800b0e8 <_vfiprintf_r+0x78>
 800b216:	fb0c 3202 	mla	r2, ip, r2, r3
 800b21a:	460c      	mov	r4, r1
 800b21c:	2001      	movs	r0, #1
 800b21e:	e7a6      	b.n	800b16e <_vfiprintf_r+0xfe>
 800b220:	2300      	movs	r3, #0
 800b222:	3401      	adds	r4, #1
 800b224:	9305      	str	r3, [sp, #20]
 800b226:	4619      	mov	r1, r3
 800b228:	f04f 0c0a 	mov.w	ip, #10
 800b22c:	4620      	mov	r0, r4
 800b22e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b232:	3a30      	subs	r2, #48	; 0x30
 800b234:	2a09      	cmp	r2, #9
 800b236:	d903      	bls.n	800b240 <_vfiprintf_r+0x1d0>
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d0c6      	beq.n	800b1ca <_vfiprintf_r+0x15a>
 800b23c:	9105      	str	r1, [sp, #20]
 800b23e:	e7c4      	b.n	800b1ca <_vfiprintf_r+0x15a>
 800b240:	fb0c 2101 	mla	r1, ip, r1, r2
 800b244:	4604      	mov	r4, r0
 800b246:	2301      	movs	r3, #1
 800b248:	e7f0      	b.n	800b22c <_vfiprintf_r+0x1bc>
 800b24a:	ab03      	add	r3, sp, #12
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	462a      	mov	r2, r5
 800b250:	4b12      	ldr	r3, [pc, #72]	; (800b29c <_vfiprintf_r+0x22c>)
 800b252:	a904      	add	r1, sp, #16
 800b254:	4630      	mov	r0, r6
 800b256:	f7fd fbb1 	bl	80089bc <_printf_float>
 800b25a:	4607      	mov	r7, r0
 800b25c:	1c78      	adds	r0, r7, #1
 800b25e:	d1d6      	bne.n	800b20e <_vfiprintf_r+0x19e>
 800b260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b262:	07d9      	lsls	r1, r3, #31
 800b264:	d405      	bmi.n	800b272 <_vfiprintf_r+0x202>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	059a      	lsls	r2, r3, #22
 800b26a:	d402      	bmi.n	800b272 <_vfiprintf_r+0x202>
 800b26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b26e:	f7fe f872 	bl	8009356 <__retarget_lock_release_recursive>
 800b272:	89ab      	ldrh	r3, [r5, #12]
 800b274:	065b      	lsls	r3, r3, #25
 800b276:	f53f af1d 	bmi.w	800b0b4 <_vfiprintf_r+0x44>
 800b27a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b27c:	e71c      	b.n	800b0b8 <_vfiprintf_r+0x48>
 800b27e:	ab03      	add	r3, sp, #12
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	462a      	mov	r2, r5
 800b284:	4b05      	ldr	r3, [pc, #20]	; (800b29c <_vfiprintf_r+0x22c>)
 800b286:	a904      	add	r1, sp, #16
 800b288:	4630      	mov	r0, r6
 800b28a:	f7fd fe3b 	bl	8008f04 <_printf_i>
 800b28e:	e7e4      	b.n	800b25a <_vfiprintf_r+0x1ea>
 800b290:	0800b795 	.word	0x0800b795
 800b294:	0800b79f 	.word	0x0800b79f
 800b298:	080089bd 	.word	0x080089bd
 800b29c:	0800b04b 	.word	0x0800b04b
 800b2a0:	0800b79b 	.word	0x0800b79b

0800b2a4 <__swbuf_r>:
 800b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a6:	460e      	mov	r6, r1
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	b118      	cbz	r0, 800b2b6 <__swbuf_r+0x12>
 800b2ae:	6a03      	ldr	r3, [r0, #32]
 800b2b0:	b90b      	cbnz	r3, 800b2b6 <__swbuf_r+0x12>
 800b2b2:	f7fd ffe3 	bl	800927c <__sinit>
 800b2b6:	69a3      	ldr	r3, [r4, #24]
 800b2b8:	60a3      	str	r3, [r4, #8]
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	071a      	lsls	r2, r3, #28
 800b2be:	d525      	bpl.n	800b30c <__swbuf_r+0x68>
 800b2c0:	6923      	ldr	r3, [r4, #16]
 800b2c2:	b31b      	cbz	r3, 800b30c <__swbuf_r+0x68>
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	6922      	ldr	r2, [r4, #16]
 800b2c8:	1a98      	subs	r0, r3, r2
 800b2ca:	6963      	ldr	r3, [r4, #20]
 800b2cc:	b2f6      	uxtb	r6, r6
 800b2ce:	4283      	cmp	r3, r0
 800b2d0:	4637      	mov	r7, r6
 800b2d2:	dc04      	bgt.n	800b2de <__swbuf_r+0x3a>
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f7ff f94e 	bl	800a578 <_fflush_r>
 800b2dc:	b9e0      	cbnz	r0, 800b318 <__swbuf_r+0x74>
 800b2de:	68a3      	ldr	r3, [r4, #8]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	60a3      	str	r3, [r4, #8]
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	6022      	str	r2, [r4, #0]
 800b2ea:	701e      	strb	r6, [r3, #0]
 800b2ec:	6962      	ldr	r2, [r4, #20]
 800b2ee:	1c43      	adds	r3, r0, #1
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d004      	beq.n	800b2fe <__swbuf_r+0x5a>
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	07db      	lsls	r3, r3, #31
 800b2f8:	d506      	bpl.n	800b308 <__swbuf_r+0x64>
 800b2fa:	2e0a      	cmp	r6, #10
 800b2fc:	d104      	bne.n	800b308 <__swbuf_r+0x64>
 800b2fe:	4621      	mov	r1, r4
 800b300:	4628      	mov	r0, r5
 800b302:	f7ff f939 	bl	800a578 <_fflush_r>
 800b306:	b938      	cbnz	r0, 800b318 <__swbuf_r+0x74>
 800b308:	4638      	mov	r0, r7
 800b30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b30c:	4621      	mov	r1, r4
 800b30e:	4628      	mov	r0, r5
 800b310:	f000 f806 	bl	800b320 <__swsetup_r>
 800b314:	2800      	cmp	r0, #0
 800b316:	d0d5      	beq.n	800b2c4 <__swbuf_r+0x20>
 800b318:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b31c:	e7f4      	b.n	800b308 <__swbuf_r+0x64>
	...

0800b320 <__swsetup_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4b2a      	ldr	r3, [pc, #168]	; (800b3cc <__swsetup_r+0xac>)
 800b324:	4605      	mov	r5, r0
 800b326:	6818      	ldr	r0, [r3, #0]
 800b328:	460c      	mov	r4, r1
 800b32a:	b118      	cbz	r0, 800b334 <__swsetup_r+0x14>
 800b32c:	6a03      	ldr	r3, [r0, #32]
 800b32e:	b90b      	cbnz	r3, 800b334 <__swsetup_r+0x14>
 800b330:	f7fd ffa4 	bl	800927c <__sinit>
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b33a:	0718      	lsls	r0, r3, #28
 800b33c:	d422      	bmi.n	800b384 <__swsetup_r+0x64>
 800b33e:	06d9      	lsls	r1, r3, #27
 800b340:	d407      	bmi.n	800b352 <__swsetup_r+0x32>
 800b342:	2309      	movs	r3, #9
 800b344:	602b      	str	r3, [r5, #0]
 800b346:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b34a:	81a3      	strh	r3, [r4, #12]
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b350:	e034      	b.n	800b3bc <__swsetup_r+0x9c>
 800b352:	0758      	lsls	r0, r3, #29
 800b354:	d512      	bpl.n	800b37c <__swsetup_r+0x5c>
 800b356:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b358:	b141      	cbz	r1, 800b36c <__swsetup_r+0x4c>
 800b35a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b35e:	4299      	cmp	r1, r3
 800b360:	d002      	beq.n	800b368 <__swsetup_r+0x48>
 800b362:	4628      	mov	r0, r5
 800b364:	f7ff fdce 	bl	800af04 <_free_r>
 800b368:	2300      	movs	r3, #0
 800b36a:	6363      	str	r3, [r4, #52]	; 0x34
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	2300      	movs	r3, #0
 800b376:	6063      	str	r3, [r4, #4]
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	f043 0308 	orr.w	r3, r3, #8
 800b382:	81a3      	strh	r3, [r4, #12]
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	b94b      	cbnz	r3, 800b39c <__swsetup_r+0x7c>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b38e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b392:	d003      	beq.n	800b39c <__swsetup_r+0x7c>
 800b394:	4621      	mov	r1, r4
 800b396:	4628      	mov	r0, r5
 800b398:	f000 f840 	bl	800b41c <__smakebuf_r>
 800b39c:	89a0      	ldrh	r0, [r4, #12]
 800b39e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3a2:	f010 0301 	ands.w	r3, r0, #1
 800b3a6:	d00a      	beq.n	800b3be <__swsetup_r+0x9e>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60a3      	str	r3, [r4, #8]
 800b3ac:	6963      	ldr	r3, [r4, #20]
 800b3ae:	425b      	negs	r3, r3
 800b3b0:	61a3      	str	r3, [r4, #24]
 800b3b2:	6923      	ldr	r3, [r4, #16]
 800b3b4:	b943      	cbnz	r3, 800b3c8 <__swsetup_r+0xa8>
 800b3b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3ba:	d1c4      	bne.n	800b346 <__swsetup_r+0x26>
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}
 800b3be:	0781      	lsls	r1, r0, #30
 800b3c0:	bf58      	it	pl
 800b3c2:	6963      	ldrpl	r3, [r4, #20]
 800b3c4:	60a3      	str	r3, [r4, #8]
 800b3c6:	e7f4      	b.n	800b3b2 <__swsetup_r+0x92>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e7f7      	b.n	800b3bc <__swsetup_r+0x9c>
 800b3cc:	200000e8 	.word	0x200000e8

0800b3d0 <__swhatbuf_r>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d8:	2900      	cmp	r1, #0
 800b3da:	b096      	sub	sp, #88	; 0x58
 800b3dc:	4615      	mov	r5, r2
 800b3de:	461e      	mov	r6, r3
 800b3e0:	da0d      	bge.n	800b3fe <__swhatbuf_r+0x2e>
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b3e8:	f04f 0100 	mov.w	r1, #0
 800b3ec:	bf0c      	ite	eq
 800b3ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b3f2:	2340      	movne	r3, #64	; 0x40
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	6031      	str	r1, [r6, #0]
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	b016      	add	sp, #88	; 0x58
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	466a      	mov	r2, sp
 800b400:	f000 f848 	bl	800b494 <_fstat_r>
 800b404:	2800      	cmp	r0, #0
 800b406:	dbec      	blt.n	800b3e2 <__swhatbuf_r+0x12>
 800b408:	9901      	ldr	r1, [sp, #4]
 800b40a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b40e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b412:	4259      	negs	r1, r3
 800b414:	4159      	adcs	r1, r3
 800b416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b41a:	e7eb      	b.n	800b3f4 <__swhatbuf_r+0x24>

0800b41c <__smakebuf_r>:
 800b41c:	898b      	ldrh	r3, [r1, #12]
 800b41e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b420:	079d      	lsls	r5, r3, #30
 800b422:	4606      	mov	r6, r0
 800b424:	460c      	mov	r4, r1
 800b426:	d507      	bpl.n	800b438 <__smakebuf_r+0x1c>
 800b428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	6123      	str	r3, [r4, #16]
 800b430:	2301      	movs	r3, #1
 800b432:	6163      	str	r3, [r4, #20]
 800b434:	b002      	add	sp, #8
 800b436:	bd70      	pop	{r4, r5, r6, pc}
 800b438:	ab01      	add	r3, sp, #4
 800b43a:	466a      	mov	r2, sp
 800b43c:	f7ff ffc8 	bl	800b3d0 <__swhatbuf_r>
 800b440:	9900      	ldr	r1, [sp, #0]
 800b442:	4605      	mov	r5, r0
 800b444:	4630      	mov	r0, r6
 800b446:	f7fe ff91 	bl	800a36c <_malloc_r>
 800b44a:	b948      	cbnz	r0, 800b460 <__smakebuf_r+0x44>
 800b44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b450:	059a      	lsls	r2, r3, #22
 800b452:	d4ef      	bmi.n	800b434 <__smakebuf_r+0x18>
 800b454:	f023 0303 	bic.w	r3, r3, #3
 800b458:	f043 0302 	orr.w	r3, r3, #2
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	e7e3      	b.n	800b428 <__smakebuf_r+0xc>
 800b460:	89a3      	ldrh	r3, [r4, #12]
 800b462:	6020      	str	r0, [r4, #0]
 800b464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b468:	81a3      	strh	r3, [r4, #12]
 800b46a:	9b00      	ldr	r3, [sp, #0]
 800b46c:	6163      	str	r3, [r4, #20]
 800b46e:	9b01      	ldr	r3, [sp, #4]
 800b470:	6120      	str	r0, [r4, #16]
 800b472:	b15b      	cbz	r3, 800b48c <__smakebuf_r+0x70>
 800b474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b478:	4630      	mov	r0, r6
 800b47a:	f000 f81d 	bl	800b4b8 <_isatty_r>
 800b47e:	b128      	cbz	r0, 800b48c <__smakebuf_r+0x70>
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	f023 0303 	bic.w	r3, r3, #3
 800b486:	f043 0301 	orr.w	r3, r3, #1
 800b48a:	81a3      	strh	r3, [r4, #12]
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	431d      	orrs	r5, r3
 800b490:	81a5      	strh	r5, [r4, #12]
 800b492:	e7cf      	b.n	800b434 <__smakebuf_r+0x18>

0800b494 <_fstat_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4d07      	ldr	r5, [pc, #28]	; (800b4b4 <_fstat_r+0x20>)
 800b498:	2300      	movs	r3, #0
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	4611      	mov	r1, r2
 800b4a0:	602b      	str	r3, [r5, #0]
 800b4a2:	f7f7 fbda 	bl	8002c5a <_fstat>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	d102      	bne.n	800b4b0 <_fstat_r+0x1c>
 800b4aa:	682b      	ldr	r3, [r5, #0]
 800b4ac:	b103      	cbz	r3, 800b4b0 <_fstat_r+0x1c>
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	bd38      	pop	{r3, r4, r5, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20001590 	.word	0x20001590

0800b4b8 <_isatty_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4d06      	ldr	r5, [pc, #24]	; (800b4d4 <_isatty_r+0x1c>)
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4604      	mov	r4, r0
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	602b      	str	r3, [r5, #0]
 800b4c4:	f7f7 fbd9 	bl	8002c7a <_isatty>
 800b4c8:	1c43      	adds	r3, r0, #1
 800b4ca:	d102      	bne.n	800b4d2 <_isatty_r+0x1a>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	b103      	cbz	r3, 800b4d2 <_isatty_r+0x1a>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	20001590 	.word	0x20001590

0800b4d8 <_raise_r>:
 800b4d8:	291f      	cmp	r1, #31
 800b4da:	b538      	push	{r3, r4, r5, lr}
 800b4dc:	4604      	mov	r4, r0
 800b4de:	460d      	mov	r5, r1
 800b4e0:	d904      	bls.n	800b4ec <_raise_r+0x14>
 800b4e2:	2316      	movs	r3, #22
 800b4e4:	6003      	str	r3, [r0, #0]
 800b4e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ea:	bd38      	pop	{r3, r4, r5, pc}
 800b4ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b4ee:	b112      	cbz	r2, 800b4f6 <_raise_r+0x1e>
 800b4f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4f4:	b94b      	cbnz	r3, 800b50a <_raise_r+0x32>
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 f830 	bl	800b55c <_getpid_r>
 800b4fc:	462a      	mov	r2, r5
 800b4fe:	4601      	mov	r1, r0
 800b500:	4620      	mov	r0, r4
 800b502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b506:	f000 b817 	b.w	800b538 <_kill_r>
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d00a      	beq.n	800b524 <_raise_r+0x4c>
 800b50e:	1c59      	adds	r1, r3, #1
 800b510:	d103      	bne.n	800b51a <_raise_r+0x42>
 800b512:	2316      	movs	r3, #22
 800b514:	6003      	str	r3, [r0, #0]
 800b516:	2001      	movs	r0, #1
 800b518:	e7e7      	b.n	800b4ea <_raise_r+0x12>
 800b51a:	2400      	movs	r4, #0
 800b51c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b520:	4628      	mov	r0, r5
 800b522:	4798      	blx	r3
 800b524:	2000      	movs	r0, #0
 800b526:	e7e0      	b.n	800b4ea <_raise_r+0x12>

0800b528 <raise>:
 800b528:	4b02      	ldr	r3, [pc, #8]	; (800b534 <raise+0xc>)
 800b52a:	4601      	mov	r1, r0
 800b52c:	6818      	ldr	r0, [r3, #0]
 800b52e:	f7ff bfd3 	b.w	800b4d8 <_raise_r>
 800b532:	bf00      	nop
 800b534:	200000e8 	.word	0x200000e8

0800b538 <_kill_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d07      	ldr	r5, [pc, #28]	; (800b558 <_kill_r+0x20>)
 800b53c:	2300      	movs	r3, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	4611      	mov	r1, r2
 800b544:	602b      	str	r3, [r5, #0]
 800b546:	f7f7 fb29 	bl	8002b9c <_kill>
 800b54a:	1c43      	adds	r3, r0, #1
 800b54c:	d102      	bne.n	800b554 <_kill_r+0x1c>
 800b54e:	682b      	ldr	r3, [r5, #0]
 800b550:	b103      	cbz	r3, 800b554 <_kill_r+0x1c>
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	bd38      	pop	{r3, r4, r5, pc}
 800b556:	bf00      	nop
 800b558:	20001590 	.word	0x20001590

0800b55c <_getpid_r>:
 800b55c:	f7f7 bb16 	b.w	8002b8c <_getpid>

0800b560 <_init>:
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	bf00      	nop
 800b564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b566:	bc08      	pop	{r3}
 800b568:	469e      	mov	lr, r3
 800b56a:	4770      	bx	lr

0800b56c <_fini>:
 800b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56e:	bf00      	nop
 800b570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b572:	bc08      	pop	{r3}
 800b574:	469e      	mov	lr, r3
 800b576:	4770      	bx	lr
