
Lab4VictorMicha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be4  08004be4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bec  08004bec  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000008c  08004c80  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004c80  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107ec  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ce  00000000  00000000  000308eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  000332c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3b  00000000  00000000  00034178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a40  00000000  00000000  00034cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001271e  00000000  00000000  0005b6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea2ab  00000000  00000000  0006de11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a68  00000000  00000000  001580bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015bb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b84 	.word	0x08004b84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08004b84 	.word	0x08004b84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	2120      	movs	r1, #32
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fdc1 	bl	800105c <SENSOR_IO_Read>
 80004da:	4603      	mov	r3, r0
 80004dc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	f023 0304 	bic.w	r3, r3, #4
 80004e4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f023 0303 	bic.w	r3, r3, #3
 80004f4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000504:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	7bfa      	ldrb	r2, [r7, #15]
 800050c:	2120      	movs	r1, #32
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fd8a 	bl	8001028 <SENSOR_IO_Write>
}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init();
 800052a:	f000 fd73 	bl	8001014 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	210f      	movs	r1, #15
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fd91 	bl	800105c <SENSOR_IO_Read>
 800053a:	4603      	mov	r3, r0
 800053c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800053e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	b2d8      	uxtb	r0, r3
 8000556:	f107 020c 	add.w	r2, r7, #12
 800055a:	2302      	movs	r3, #2
 800055c:	21b0      	movs	r1, #176	; 0xb0
 800055e:	f000 fd9b 	bl	8001098 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	085b      	lsrs	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800056a:	7b7b      	ldrb	r3, [r7, #13]
 800056c:	085b      	lsrs	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	b2d8      	uxtb	r0, r3
 8000576:	f107 020c 	add.w	r2, r7, #12
 800057a:	2302      	movs	r3, #2
 800057c:	21b6      	movs	r1, #182	; 0xb6
 800057e:	f000 fd8b 	bl	8001098 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000582:	7b7b      	ldrb	r3, [r7, #13]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	b21a      	sxth	r2, r3
 8000588:	7b3b      	ldrb	r3, [r7, #12]
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	b2d8      	uxtb	r0, r3
 8000594:	f107 020c 	add.w	r2, r7, #12
 8000598:	2302      	movs	r3, #2
 800059a:	21ba      	movs	r1, #186	; 0xba
 800059c:	f000 fd7c 	bl	8001098 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80005a0:	7b7b      	ldrb	r3, [r7, #13]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b21a      	sxth	r2, r3
 80005a6:	7b3b      	ldrb	r3, [r7, #12]
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	b2d8      	uxtb	r0, r3
 80005b2:	f107 020c 	add.w	r2, r7, #12
 80005b6:	2302      	movs	r3, #2
 80005b8:	21a8      	movs	r1, #168	; 0xa8
 80005ba:	f000 fd6d 	bl	8001098 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	7b3b      	ldrb	r3, [r7, #12]
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80005cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80005d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	ee07 3a90 	vmov	s15, r3
 80005da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005de:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80005e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005f4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80005f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	ee07 3a90 	vmov	s15, r3
 8000602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800060a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800060e:	ee07 3a90 	vmov	s15, r3
 8000612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800061a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800061e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000622:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800062a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800062e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000632:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000678 <HTS221_H_ReadHumidity+0x130>
 8000636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	dd01      	ble.n	8000644 <HTS221_H_ReadHumidity+0xfc>
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HTS221_H_ReadHumidity+0x134>)
 8000642:	e00a      	b.n	800065a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000644:	edd7 7a04 	vldr	s15, [r7, #16]
 8000648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000650:	d502      	bpl.n	8000658 <HTS221_H_ReadHumidity+0x110>
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	e000      	b.n	800065a <HTS221_H_ReadHumidity+0x112>
 8000658:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800065a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800065c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000660:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000664:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000668:	eef0 7a66 	vmov.f32	s15, s13
}
 800066c:	eeb0 0a67 	vmov.f32	s0, s15
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	447a0000 	.word	0x447a0000
 800067c:	447a0000 	.word	0x447a0000

08000680 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	463b      	mov	r3, r7
 8000688:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800068c:	783b      	ldrb	r3, [r7, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	2120      	movs	r1, #32
 8000692:	203c      	movs	r0, #60	; 0x3c
 8000694:	f000 fcc8 	bl	8001028 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8000698:	787b      	ldrb	r3, [r7, #1]
 800069a:	461a      	mov	r2, r3
 800069c:	2121      	movs	r1, #33	; 0x21
 800069e:	203c      	movs	r0, #60	; 0x3c
 80006a0:	f000 fcc2 	bl	8001028 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80006a4:	78bb      	ldrb	r3, [r7, #2]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2122      	movs	r1, #34	; 0x22
 80006aa:	203c      	movs	r0, #60	; 0x3c
 80006ac:	f000 fcbc 	bl	8001028 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	461a      	mov	r2, r3
 80006b4:	2123      	movs	r1, #35	; 0x23
 80006b6:	203c      	movs	r0, #60	; 0x3c
 80006b8:	f000 fcb6 	bl	8001028 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80006bc:	793b      	ldrb	r3, [r7, #4]
 80006be:	461a      	mov	r2, r3
 80006c0:	2124      	movs	r1, #36	; 0x24
 80006c2:	203c      	movs	r0, #60	; 0x3c
 80006c4:	f000 fcb0 	bl	8001028 <SENSOR_IO_Write>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80006da:	2122      	movs	r1, #34	; 0x22
 80006dc:	203c      	movs	r0, #60	; 0x3c
 80006de:	f000 fcbd 	bl	800105c <SENSOR_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f023 0303 	bic.w	r3, r3, #3
 80006ec:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	461a      	mov	r2, r3
 80006fa:	2122      	movs	r1, #34	; 0x22
 80006fc:	203c      	movs	r0, #60	; 0x3c
 80006fe:	f000 fc93 	bl	8001028 <SENSOR_IO_Write>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800070e:	f000 fc81 	bl	8001014 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8000712:	210f      	movs	r1, #15
 8000714:	203c      	movs	r0, #60	; 0x3c
 8000716:	f000 fca1 	bl	800105c <SENSOR_IO_Read>
 800071a:	4603      	mov	r3, r0
}
 800071c:	4618      	mov	r0, r3
 800071e:	bd80      	pop	{r7, pc}

08000720 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800072e:	2122      	movs	r1, #34	; 0x22
 8000730:	203c      	movs	r0, #60	; 0x3c
 8000732:	f000 fc93 	bl	800105c <SENSOR_IO_Read>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	f023 0320 	bic.w	r3, r3, #32
 8000740:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	461a      	mov	r2, r3
 8000754:	2122      	movs	r1, #34	; 0x22
 8000756:	203c      	movs	r0, #60	; 0x3c
 8000758:	f000 fc66 	bl	8001028 <SENSOR_IO_Write>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 800076c:	2300      	movs	r3, #0
 800076e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000774:	f04f 0300 	mov.w	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800077a:	2121      	movs	r1, #33	; 0x21
 800077c:	203c      	movs	r0, #60	; 0x3c
 800077e:	f000 fc6d 	bl	800105c <SENSOR_IO_Read>
 8000782:	4603      	mov	r3, r0
 8000784:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	2306      	movs	r3, #6
 800078c:	21a8      	movs	r1, #168	; 0xa8
 800078e:	203c      	movs	r0, #60	; 0x3c
 8000790:	f000 fc82 	bl	8001098 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	77fb      	strb	r3, [r7, #31]
 8000798:	e01c      	b.n	80007d4 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800079a:	7ffb      	ldrb	r3, [r7, #31]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	3301      	adds	r3, #1
 80007a0:	3320      	adds	r3, #32
 80007a2:	443b      	add	r3, r7
 80007a4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	7ffb      	ldrb	r3, [r7, #31]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	3320      	adds	r3, #32
 80007b4:	443b      	add	r3, r7
 80007b6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4413      	add	r3, r2
 80007be:	b29a      	uxth	r2, r3
 80007c0:	7ffb      	ldrb	r3, [r7, #31]
 80007c2:	b212      	sxth	r2, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	3320      	adds	r3, #32
 80007c8:	443b      	add	r3, r7
 80007ca:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80007ce:	7ffb      	ldrb	r3, [r7, #31]
 80007d0:	3301      	adds	r3, #1
 80007d2:	77fb      	strb	r3, [r7, #31]
 80007d4:	7ffb      	ldrb	r3, [r7, #31]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d9df      	bls.n	800079a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80007da:	7dfb      	ldrb	r3, [r7, #23]
 80007dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80007e0:	2b60      	cmp	r3, #96	; 0x60
 80007e2:	d013      	beq.n	800080c <LIS3MDL_MagReadXYZ+0xa8>
 80007e4:	2b60      	cmp	r3, #96	; 0x60
 80007e6:	dc14      	bgt.n	8000812 <LIS3MDL_MagReadXYZ+0xae>
 80007e8:	2b40      	cmp	r3, #64	; 0x40
 80007ea:	d00c      	beq.n	8000806 <LIS3MDL_MagReadXYZ+0xa2>
 80007ec:	2b40      	cmp	r3, #64	; 0x40
 80007ee:	dc10      	bgt.n	8000812 <LIS3MDL_MagReadXYZ+0xae>
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <LIS3MDL_MagReadXYZ+0x96>
 80007f4:	2b20      	cmp	r3, #32
 80007f6:	d003      	beq.n	8000800 <LIS3MDL_MagReadXYZ+0x9c>
 80007f8:	e00b      	b.n	8000812 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <LIS3MDL_MagReadXYZ+0xfc>)
 80007fc:	61bb      	str	r3, [r7, #24]
    break;
 80007fe:	e008      	b.n	8000812 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <LIS3MDL_MagReadXYZ+0x100>)
 8000802:	61bb      	str	r3, [r7, #24]
    break;
 8000804:	e005      	b.n	8000812 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <LIS3MDL_MagReadXYZ+0x104>)
 8000808:	61bb      	str	r3, [r7, #24]
    break;
 800080a:	e002      	b.n	8000812 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <LIS3MDL_MagReadXYZ+0x108>)
 800080e:	61bb      	str	r3, [r7, #24]
    break;    
 8000810:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8000812:	2300      	movs	r3, #0
 8000814:	77fb      	strb	r3, [r7, #31]
 8000816:	e01a      	b.n	800084e <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000818:	7ffb      	ldrb	r3, [r7, #31]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	3320      	adds	r3, #32
 800081e:	443b      	add	r3, r7
 8000820:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000824:	ee07 3a90 	vmov	s15, r3
 8000828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800082c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000834:	7ffb      	ldrb	r3, [r7, #31]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000840:	ee17 2a90 	vmov	r2, s15
 8000844:	b212      	sxth	r2, r2
 8000846:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000848:	7ffb      	ldrb	r3, [r7, #31]
 800084a:	3301      	adds	r3, #1
 800084c:	77fb      	strb	r3, [r7, #31]
 800084e:	7ffb      	ldrb	r3, [r7, #31]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d9e1      	bls.n	8000818 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	3e0f5c29 	.word	0x3e0f5c29
 8000864:	3e947ae1 	.word	0x3e947ae1
 8000868:	3edc28f6 	.word	0x3edc28f6
 800086c:	3f147ae1 	.word	0x3f147ae1

08000870 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f879 	bl	8000974 <LPS22HB_Init>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000898:	f000 fbbc 	bl	8001014 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	210f      	movs	r1, #15
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fbda 	bl	800105c <SENSOR_IO_Read>
 80008a8:	4603      	mov	r3, r0
 80008aa:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	74fb      	strb	r3, [r7, #19]
 80008ca:	e013      	b.n	80008f4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	3328      	adds	r3, #40	; 0x28
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	7cfc      	ldrb	r4, [r7, #19]
 80008d8:	4619      	mov	r1, r3
 80008da:	4610      	mov	r0, r2
 80008dc:	f000 fbbe 	bl	800105c <SENSOR_IO_Read>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	f104 0318 	add.w	r3, r4, #24
 80008e8:	443b      	add	r3, r7
 80008ea:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80008ee:	7cfb      	ldrb	r3, [r7, #19]
 80008f0:	3301      	adds	r3, #1
 80008f2:	74fb      	strb	r3, [r7, #19]
 80008f4:	7cfb      	ldrb	r3, [r7, #19]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d9e8      	bls.n	80008cc <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	74fb      	strb	r3, [r7, #19]
 80008fe:	e00f      	b.n	8000920 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8000900:	7cfb      	ldrb	r3, [r7, #19]
 8000902:	3318      	adds	r3, #24
 8000904:	443b      	add	r3, r7
 8000906:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800090a:	461a      	mov	r2, r3
 800090c:	7cfb      	ldrb	r3, [r7, #19]
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	4313      	orrs	r3, r2
 8000918:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800091a:	7cfb      	ldrb	r3, [r7, #19]
 800091c:	3301      	adds	r3, #1
 800091e:	74fb      	strb	r3, [r7, #19]
 8000920:	7cfb      	ldrb	r3, [r7, #19]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d9ec      	bls.n	8000900 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800092c:	2b00      	cmp	r3, #0
 800092e:	d003      	beq.n	8000938 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000936:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2264      	movs	r2, #100	; 0x64
 8000940:	fb02 f303 	mul.w	r3, r2, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	da01      	bge.n	800094c <LPS22HB_P_ReadPressure+0x94>
 8000948:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800094c:	131b      	asrs	r3, r3, #12
 800094e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	ee07 3a90 	vmov	s15, r3
 8000956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000970 <LPS22HB_P_ReadPressure+0xb8>
 800095e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000962:	eef0 7a66 	vmov.f32	s15, s13
}
 8000966:	eeb0 0a67 	vmov.f32	s0, s15
 800096a:	371c      	adds	r7, #28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	42c80000 	.word	0x42c80000

08000974 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	211a      	movs	r1, #26
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fb69 	bl	800105c <SENSOR_IO_Read>
 800098a:	4603      	mov	r3, r0
 800098c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	7bfa      	ldrb	r2, [r7, #15]
 80009a4:	211a      	movs	r1, #26
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fb3e 	bl	8001028 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2110      	movs	r1, #16
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fb52 	bl	800105c <SENSOR_IO_Read>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009c2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80009ca:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	f023 0302 	bic.w	r3, r3, #2
 80009d2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	2110      	movs	r1, #16
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fb1f 	bl	8001028 <SENSOR_IO_Write>
}  
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000a00:	2110      	movs	r1, #16
 8000a02:	20d4      	movs	r0, #212	; 0xd4
 8000a04:	f000 fb2a 	bl	800105c <SENSOR_IO_Read>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000a18:	7bba      	ldrb	r2, [r7, #14]
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	461a      	mov	r2, r3
 8000a24:	2110      	movs	r1, #16
 8000a26:	20d4      	movs	r0, #212	; 0xd4
 8000a28:	f000 fafe 	bl	8001028 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000a2c:	2112      	movs	r1, #18
 8000a2e:	20d4      	movs	r0, #212	; 0xd4
 8000a30:	f000 fb14 	bl	800105c <SENSOR_IO_Read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000a46:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000a48:	7bba      	ldrb	r2, [r7, #14]
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000a50:	7bbb      	ldrb	r3, [r7, #14]
 8000a52:	461a      	mov	r2, r3
 8000a54:	2112      	movs	r1, #18
 8000a56:	20d4      	movs	r0, #212	; 0xd4
 8000a58:	f000 fae6 	bl	8001028 <SENSOR_IO_Write>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000a6e:	2110      	movs	r1, #16
 8000a70:	20d4      	movs	r0, #212	; 0xd4
 8000a72:	f000 faf3 	bl	800105c <SENSOR_IO_Read>
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 030f 	and.w	r3, r3, #15
 8000a80:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	461a      	mov	r2, r3
 8000a86:	2110      	movs	r1, #16
 8000a88:	20d4      	movs	r0, #212	; 0xd4
 8000a8a:	f000 facd 	bl	8001028 <SENSOR_IO_Write>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000a9a:	f000 fabb 	bl	8001014 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	20d4      	movs	r0, #212	; 0xd4
 8000aa2:	f000 fadb 	bl	800105c <SENSOR_IO_Read>
 8000aa6:	4603      	mov	r3, r0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000aba:	2115      	movs	r1, #21
 8000abc:	20d4      	movs	r0, #212	; 0xd4
 8000abe:	f000 facd 	bl	800105c <SENSOR_IO_Read>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f023 0310 	bic.w	r3, r3, #16
 8000acc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2115      	movs	r1, #21
 8000ae2:	20d4      	movs	r0, #212	; 0xd4
 8000ae4:	f000 faa0 	bl	8001028 <SENSOR_IO_Write>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000b06:	2110      	movs	r1, #16
 8000b08:	20d4      	movs	r0, #212	; 0xd4
 8000b0a:	f000 faa7 	bl	800105c <SENSOR_IO_Read>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000b12:	f107 0208 	add.w	r2, r7, #8
 8000b16:	2306      	movs	r3, #6
 8000b18:	2128      	movs	r1, #40	; 0x28
 8000b1a:	20d4      	movs	r0, #212	; 0xd4
 8000b1c:	f000 fabc 	bl	8001098 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	77fb      	strb	r3, [r7, #31]
 8000b24:	e01c      	b.n	8000b60 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000b26:	7ffb      	ldrb	r3, [r7, #31]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	3320      	adds	r3, #32
 8000b2e:	443b      	add	r3, r7
 8000b30:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	3320      	adds	r3, #32
 8000b40:	443b      	add	r3, r7
 8000b42:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	7ffb      	ldrb	r3, [r7, #31]
 8000b4e:	b212      	sxth	r2, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	3320      	adds	r3, #32
 8000b54:	443b      	add	r3, r7
 8000b56:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000b5a:	7ffb      	ldrb	r3, [r7, #31]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	77fb      	strb	r3, [r7, #31]
 8000b60:	7ffb      	ldrb	r3, [r7, #31]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d9df      	bls.n	8000b26 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	f003 030c 	and.w	r3, r3, #12
 8000b6c:	2b0c      	cmp	r3, #12
 8000b6e:	d829      	bhi.n	8000bc4 <LSM6DSL_AccReadXYZ+0xd4>
 8000b70:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <LSM6DSL_AccReadXYZ+0x88>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000bad 	.word	0x08000bad
 8000b7c:	08000bc5 	.word	0x08000bc5
 8000b80:	08000bc5 	.word	0x08000bc5
 8000b84:	08000bc5 	.word	0x08000bc5
 8000b88:	08000bbf 	.word	0x08000bbf
 8000b8c:	08000bc5 	.word	0x08000bc5
 8000b90:	08000bc5 	.word	0x08000bc5
 8000b94:	08000bc5 	.word	0x08000bc5
 8000b98:	08000bb3 	.word	0x08000bb3
 8000b9c:	08000bc5 	.word	0x08000bc5
 8000ba0:	08000bc5 	.word	0x08000bc5
 8000ba4:	08000bc5 	.word	0x08000bc5
 8000ba8:	08000bb9 	.word	0x08000bb9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <LSM6DSL_AccReadXYZ+0x120>)
 8000bae:	61bb      	str	r3, [r7, #24]
    break;
 8000bb0:	e008      	b.n	8000bc4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <LSM6DSL_AccReadXYZ+0x124>)
 8000bb4:	61bb      	str	r3, [r7, #24]
    break;
 8000bb6:	e005      	b.n	8000bc4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <LSM6DSL_AccReadXYZ+0x128>)
 8000bba:	61bb      	str	r3, [r7, #24]
    break;
 8000bbc:	e002      	b.n	8000bc4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <LSM6DSL_AccReadXYZ+0x12c>)
 8000bc0:	61bb      	str	r3, [r7, #24]
    break;    
 8000bc2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	77fb      	strb	r3, [r7, #31]
 8000bc8:	e01a      	b.n	8000c00 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000bca:	7ffb      	ldrb	r3, [r7, #31]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	3320      	adds	r3, #32
 8000bd0:	443b      	add	r3, r7
 8000bd2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000bd6:	ee07 3a90 	vmov	s15, r3
 8000bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bde:	edd7 7a06 	vldr	s15, [r7, #24]
 8000be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf2:	ee17 2a90 	vmov	r2, s15
 8000bf6:	b212      	sxth	r2, r2
 8000bf8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000bfa:	7ffb      	ldrb	r3, [r7, #31]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	7ffb      	ldrb	r3, [r7, #31]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d9e1      	bls.n	8000bca <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	3d79db23 	.word	0x3d79db23
 8000c14:	3df9db23 	.word	0x3df9db23
 8000c18:	3e79db23 	.word	0x3e79db23
 8000c1c:	3ef9db23 	.word	0x3ef9db23

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 fcb4 	bl	8001592 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f822 	bl	8000c72 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 f8e3 	bl	8000df8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000c32:	f000 f871 	bl	8000d18 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000c36:	f000 f8af 	bl	8000d98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_HSENSOR_Init();
 8000c3a:	f000 faa1 	bl	8001180 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();
 8000c3e:	f000 fb11 	bl	8001264 <BSP_PSENSOR_Init>
  BSP_MAGNETO_Init();
 8000c42:	f000 facb 	bl	80011dc <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 8000c46:	f000 fa45 	bl	80010d4 <BSP_ACCELERO_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  humidity = BSP_HSENSOR_ReadHumidity();
 8000c4a:	f000 fab9 	bl	80011c0 <BSP_HSENSOR_ReadHumidity>
 8000c4e:	ed87 0a03 	vstr	s0, [r7, #12]
	  pressure = BSP_PSENSOR_ReadPressure();
 8000c52:	f000 fb27 	bl	80012a4 <BSP_PSENSOR_ReadPressure>
 8000c56:	ed87 0a02 	vstr	s0, [r7, #8]
	  BSP_MAGNETO_GetXYZ(&magneto);
 8000c5a:	1dbb      	adds	r3, r7, #6
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fae9 	bl	8001234 <BSP_MAGNETO_GetXYZ>
	  BSP_ACCELERO_AccGetXYZ(&accelero);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fa73 	bl	8001150 <BSP_ACCELERO_AccGetXYZ>
	  HAL_Delay(100);//100ms to sample at rate of 10Hz
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f000 fd06 	bl	800167c <HAL_Delay>
	  humidity = BSP_HSENSOR_ReadHumidity();
 8000c70:	e7eb      	b.n	8000c4a <main+0x2a>

08000c72 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b096      	sub	sp, #88	; 0x58
 8000c76:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2244      	movs	r2, #68	; 0x44
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 ff52 	bl	8004b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c98:	f001 ff1a 	bl	8002ad0 <HAL_PWREx_ControlVoltageScaling>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ca2:	f000 f8c1 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cc2:	2328      	movs	r3, #40	; 0x28
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 ff50 	bl	8002b7c <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ce2:	f000 f8a1 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cea:	2303      	movs	r3, #3
 8000cec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 fb18 	bl	8003334 <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d0a:	f000 f88d 	bl	8000e28 <Error_Handler>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3758      	adds	r7, #88	; 0x58
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_I2C2_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <MX_I2C2_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d54:	f001 f866 	bl	8001e24 <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f000 f863 	bl	8000e28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d66:	f001 fe0d 	bl	8002984 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 f85a 	bl	8000e28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d78:	f001 fe4f 	bl	8002a1a <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 f851 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000a8 	.word	0x200000a8
 8000d90:	40005800 	.word	0x40005800
 8000d94:	10909cec 	.word	0x10909cec

08000d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <MX_USART1_UART_Init+0x5c>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000ddc:	f003 f98a 	bl	80040f4 <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000de6:	f000 f81f 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000fc 	.word	0x200000fc
 8000df4:	40013800 	.word	0x40013800

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_GPIO_Init+0x2c>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <MX_GPIO_Init+0x2c>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_GPIO_Init+0x2c>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000e54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e58:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e5a:	2312      	movs	r3, #18
 8000e5c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000e66:	2304      	movs	r3, #4
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481b      	ldr	r0, [pc, #108]	; (8000ee0 <I2Cx_MspInit+0xac>)
 8000e72:	f000 fd39 	bl	80018e8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <I2Cx_MspInit+0xac>)
 8000e7e:	f000 fd33 	bl	80018e8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000e88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000ea0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <I2Cx_MspInit+0xa8>)
 8000eac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000eb0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	2021      	movs	r0, #33	; 0x21
 8000eb8:	f000 fcdf 	bl	800187a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000ebc:	2021      	movs	r0, #33	; 0x21
 8000ebe:	f000 fcf8 	bl	80018b2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	2022      	movs	r0, #34	; 0x22
 8000ec8:	f000 fcd7 	bl	800187a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000ecc:	2022      	movs	r0, #34	; 0x22
 8000ece:	f000 fcf0 	bl	80018b2 <HAL_NVIC_EnableIRQ>
}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <I2Cx_Init+0x54>)
 8000ef0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <I2Cx_Init+0x58>)
 8000ef6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff89 	bl	8000e34 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 ff7e 	bl	8001e24 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 fd2a 	bl	8002984 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40005800 	.word	0x40005800
 8000f3c:	00702681 	.word	0x00702681

08000f40 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af04      	add	r7, sp, #16
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	4608      	mov	r0, r1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	72fb      	strb	r3, [r7, #11]
 8000f52:	460b      	mov	r3, r1
 8000f54:	813b      	strh	r3, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f5e:	7afb      	ldrb	r3, [r7, #11]
 8000f60:	b299      	uxth	r1, r3
 8000f62:	88f8      	ldrh	r0, [r7, #6]
 8000f64:	893a      	ldrh	r2, [r7, #8]
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4603      	mov	r3, r0
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f001 f932 	bl	80021e0 <HAL_I2C_Mem_Read>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d004      	beq.n	8000f90 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f832 	bl	8000ff4 <I2Cx_Error>
  }
  return status;
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b08a      	sub	sp, #40	; 0x28
 8000f9e:	af04      	add	r7, sp, #16
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	72fb      	strb	r3, [r7, #11]
 8000fac:	460b      	mov	r3, r1
 8000fae:	813b      	strh	r3, [r7, #8]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fb8:	7afb      	ldrb	r3, [r7, #11]
 8000fba:	b299      	uxth	r1, r3
 8000fbc:	88f8      	ldrh	r0, [r7, #6]
 8000fbe:	893a      	ldrh	r2, [r7, #8]
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 fff1 	bl	8001fb8 <HAL_I2C_Mem_Write>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 f805 	bl	8000ff4 <I2Cx_Error>
  }
  return status;
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 ffaa 	bl	8001f5a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff6c 	bl	8000ee4 <I2Cx_Init>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <SENSOR_IO_Init+0x10>)
 800101a:	f7ff ff63 	bl	8000ee4 <I2Cx_Init>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000184 	.word	0x20000184

08001028 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	460b      	mov	r3, r1
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	b29a      	uxth	r2, r3
 800103e:	79f9      	ldrb	r1, [r7, #7]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	1d7b      	adds	r3, r7, #5
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <SENSOR_IO_Write+0x30>)
 800104c:	f7ff ffa5 	bl	8000f9a <I2Cx_WriteMultiple>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000184 	.word	0x20000184

0800105c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af02      	add	r7, sp, #8
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	b29a      	uxth	r2, r3
 8001074:	79f9      	ldrb	r1, [r7, #7]
 8001076:	2301      	movs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	f107 030f 	add.w	r3, r7, #15
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <SENSOR_IO_Read+0x38>)
 8001084:	f7ff ff5c 	bl	8000f40 <I2Cx_ReadMultiple>

  return read_value;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000184 	.word	0x20000184

08001098 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af02      	add	r7, sp, #8
 800109e:	603a      	str	r2, [r7, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	460b      	mov	r3, r1
 80010a8:	71bb      	strb	r3, [r7, #6]
 80010aa:	4613      	mov	r3, r2
 80010ac:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	79f9      	ldrb	r1, [r7, #7]
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <SENSOR_IO_ReadMultiple+0x38>)
 80010c0:	f7ff ff3e 	bl	8000f40 <I2Cx_ReadMultiple>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000184 	.word	0x20000184

080010d4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80010de:	2300      	movs	r3, #0
 80010e0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <BSP_ACCELERO_Init+0x74>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4798      	blx	r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b6a      	cmp	r3, #106	; 0x6a
 80010ec:	d002      	beq.n	80010f4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	e024      	b.n	800113e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <BSP_ACCELERO_Init+0x78>)
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <BSP_ACCELERO_Init+0x74>)
 80010f8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80010fa:	2330      	movs	r3, #48	; 0x30
 80010fc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001102:	2300      	movs	r3, #0
 8001104:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001112:	797a      	ldrb	r2, [r7, #5]
 8001114:	7abb      	ldrb	r3, [r7, #10]
 8001116:	4313      	orrs	r3, r2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800111c:	7a3b      	ldrb	r3, [r7, #8]
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	b2db      	uxtb	r3, r3
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	b21b      	sxth	r3, r3
 8001130:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <BSP_ACCELERO_Init+0x78>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	89ba      	ldrh	r2, [r7, #12]
 800113a:	4610      	mov	r0, r2
 800113c:	4798      	blx	r3
  }  

  return ret;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000004c 	.word	0x2000004c
 800114c:	200001d8 	.word	0x200001d8

08001150 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d009      	beq.n	8001174 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	2b00      	cmp	r3, #0
 8001168:	d004      	beq.n	8001174 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	4798      	blx	r3
    }
  }
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001d8 	.word	0x200001d8

08001180 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <BSP_HSENSOR_Init+0x38>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	20be      	movs	r0, #190	; 0xbe
 800118c:	4798      	blx	r3
 800118e:	4603      	mov	r3, r0
 8001190:	2bbc      	cmp	r3, #188	; 0xbc
 8001192:	d002      	beq.n	800119a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	e009      	b.n	80011ae <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <BSP_HSENSOR_Init+0x3c>)
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <BSP_HSENSOR_Init+0x38>)
 800119e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <BSP_HSENSOR_Init+0x3c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	20be      	movs	r0, #190	; 0xbe
 80011a8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200001dc 	.word	0x200001dc

080011c0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <BSP_HSENSOR_ReadHumidity+0x18>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	20be      	movs	r0, #190	; 0xbe
 80011cc:	4798      	blx	r3
 80011ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80011d2:	eeb0 0a67 	vmov.f32	s0, s15
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001dc 	.word	0x200001dc

080011dc <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <BSP_MAGNETO_Init+0x50>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4798      	blx	r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b3d      	cmp	r3, #61	; 0x3d
 80011f0:	d002      	beq.n	80011f8 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e013      	b.n	8001220 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <BSP_MAGNETO_Init+0x54>)
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <BSP_MAGNETO_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80011fe:	2358      	movs	r3, #88	; 0x58
 8001200:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001202:	2300      	movs	r3, #0
 8001204:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001206:	2300      	movs	r3, #0
 8001208:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800120a:	2308      	movs	r3, #8
 800120c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800120e:	2340      	movs	r3, #64	; 0x40
 8001210:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <BSP_MAGNETO_Init+0x54>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	463a      	mov	r2, r7
 800121a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121e:	4798      	blx	r3
  } 

  return ret;  
 8001220:	79fb      	ldrb	r3, [r7, #7]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000000c 	.word	0x2000000c
 8001230:	200001e0 	.word	0x200001e0

08001234 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <BSP_MAGNETO_GetXYZ+0x2c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d009      	beq.n	8001258 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	4798      	blx	r3
    }
  }
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200001e0 	.word	0x200001e0

08001264 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <BSP_PSENSOR_Init+0x38>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	20ba      	movs	r0, #186	; 0xba
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	2bb1      	cmp	r3, #177	; 0xb1
 8001276:	d002      	beq.n	800127e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	e009      	b.n	8001292 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <BSP_PSENSOR_Init+0x3c>)
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <BSP_PSENSOR_Init+0x38>)
 8001282:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <BSP_PSENSOR_Init+0x3c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	20ba      	movs	r0, #186	; 0xba
 800128c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001292:	687b      	ldr	r3, [r7, #4]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000040 	.word	0x20000040
 80012a0:	200001e4 	.word	0x200001e4

080012a4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <BSP_PSENSOR_ReadPressure+0x18>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	20ba      	movs	r0, #186	; 0xba
 80012b0:	4798      	blx	r3
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001e4 	.word	0x200001e4

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x44>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_MspInit+0x44>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6613      	str	r3, [r2, #96]	; 0x60
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x44>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x44>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x44>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x44>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ac      	sub	sp, #176	; 0xb0
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2288      	movs	r2, #136	; 0x88
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fbfe 	bl	8004b2a <memset>
  if(hi2c->Instance==I2C2)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <HAL_I2C_MspInit+0xb0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d13b      	bne.n	80013b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800133c:	2300      	movs	r3, #0
 800133e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fa19 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001350:	f7ff fd6a 	bl	8000e28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_I2C_MspInit+0xb4>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_I2C_MspInit+0xb4>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_I2C_MspInit+0xb4>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800136c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001374:	2312      	movs	r3, #18
 8001376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001386:	2304      	movs	r3, #4
 8001388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001390:	4619      	mov	r1, r3
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <HAL_I2C_MspInit+0xb8>)
 8001394:	f000 faa8 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_I2C_MspInit+0xb4>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_I2C_MspInit+0xb4>)
 800139e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a2:	6593      	str	r3, [r2, #88]	; 0x58
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_I2C_MspInit+0xb4>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	37b0      	adds	r7, #176	; 0xb0
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40005800 	.word	0x40005800
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000400 	.word	0x48000400

080013c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_I2C_MspDeInit+0x3c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10f      	bne.n	80013f6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_I2C_MspDeInit+0x40>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_I2C_MspDeInit+0x40>)
 80013dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80013e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e6:	4808      	ldr	r0, [pc, #32]	; (8001408 <HAL_I2C_MspDeInit+0x44>)
 80013e8:	f000 fc28 	bl	8001c3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80013ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_I2C_MspDeInit+0x44>)
 80013f2:	f000 fc23 	bl	8001c3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40005800 	.word	0x40005800
 8001404:	40021000 	.word	0x40021000
 8001408:	48000400 	.word	0x48000400

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0ac      	sub	sp, #176	; 0xb0
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2288      	movs	r2, #136	; 0x88
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fb7c 	bl	8004b2a <memset>
  if(huart->Instance==USART1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <HAL_UART_MspInit+0xb0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d13a      	bne.n	80014b2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001440:	2300      	movs	r3, #0
 8001442:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f997 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001454:	f7ff fce8 	bl	8000e28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_UART_MspInit+0xb4>)
 800145a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_UART_MspInit+0xb4>)
 800145e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001462:	6613      	str	r3, [r2, #96]	; 0x60
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_UART_MspInit+0xb4>)
 8001466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_UART_MspInit+0xb4>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_UART_MspInit+0xb4>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_UART_MspInit+0xb4>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001488:	23c0      	movs	r3, #192	; 0xc0
 800148a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a0:	2307      	movs	r3, #7
 80014a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HAL_UART_MspInit+0xb8>)
 80014ae:	f000 fa1b 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	37b0      	adds	r7, #176	; 0xb0
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40013800 	.word	0x40013800
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000400 	.word	0x48000400

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f892 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001544:	f7ff ffea 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <LoopForever+0x6>)
  ldr r1, =_edata
 800154a:	490d      	ldr	r1, [pc, #52]	; (8001580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <LoopForever+0xe>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001560:	4c0a      	ldr	r4, [pc, #40]	; (800158c <LoopForever+0x16>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156e:	f003 fae5 	bl	8004b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001572:	f7ff fb55 	bl	8000c20 <main>

08001576 <LoopForever>:

LoopForever:
    b LoopForever
 8001576:	e7fe      	b.n	8001576 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001578:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001584:	08004bf4 	.word	0x08004bf4
  ldr r2, =_sbss
 8001588:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800158c:	200001ec 	.word	0x200001ec

08001590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_2_IRQHandler>

08001592 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f961 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f80e 	bl	80015c4 <HAL_InitTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	e001      	b.n	80015b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b4:	f7ff fe84 	bl	80012c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_InitTick+0x6c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d023      	beq.n	8001620 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_InitTick+0x70>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_InitTick+0x6c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f96d 	bl	80018ce <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10f      	bne.n	800161a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d809      	bhi.n	8001614 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001608:	f000 f937 	bl	800187a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_InitTick+0x74>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e007      	b.n	8001624 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e004      	b.n	8001624 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e001      	b.n	8001624 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000088 	.word	0x20000088
 8001634:	20000080 	.word	0x20000080
 8001638:	20000084 	.word	0x20000084

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000088 	.word	0x20000088
 8001660:	200001e8 	.word	0x200001e8

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200001e8 	.word	0x200001e8

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000088 	.word	0x20000088

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e17f      	b.n	8001bf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8171 	beq.w	8001bf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_Init+0x40>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 0201 	and.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b03      	cmp	r3, #3
 8001994:	d118      	bne.n	80019c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d017      	beq.n	8001a04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d123      	bne.n	8001a58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	6939      	ldr	r1, [r7, #16]
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80ac 	beq.w	8001bf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	4a5e      	ldr	r2, [pc, #376]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab2:	4a5a      	ldr	r2, [pc, #360]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001adc:	d025      	beq.n	8001b2a <HAL_GPIO_Init+0x242>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4f      	ldr	r2, [pc, #316]	; (8001c20 <HAL_GPIO_Init+0x338>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01f      	beq.n	8001b26 <HAL_GPIO_Init+0x23e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4e      	ldr	r2, [pc, #312]	; (8001c24 <HAL_GPIO_Init+0x33c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <HAL_GPIO_Init+0x340>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x236>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <HAL_GPIO_Init+0x344>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4b      	ldr	r2, [pc, #300]	; (8001c30 <HAL_GPIO_Init+0x348>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4a      	ldr	r2, [pc, #296]	; (8001c34 <HAL_GPIO_Init+0x34c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x22a>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3c:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b6e:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f47f ae78 	bne.w	80018f8 <HAL_GPIO_Init+0x10>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	48001000 	.word	0x48001000
 8001c30:	48001400 	.word	0x48001400
 8001c34:	48001800 	.word	0x48001800
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001c4a:	e0cd      	b.n	8001de8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80c0 	beq.w	8001de2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c62:	4a68      	ldr	r2, [pc, #416]	; (8001e04 <HAL_GPIO_DeInit+0x1c8>)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c8a:	d025      	beq.n	8001cd8 <HAL_GPIO_DeInit+0x9c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a5e      	ldr	r2, [pc, #376]	; (8001e08 <HAL_GPIO_DeInit+0x1cc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d01f      	beq.n	8001cd4 <HAL_GPIO_DeInit+0x98>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a5d      	ldr	r2, [pc, #372]	; (8001e0c <HAL_GPIO_DeInit+0x1d0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d019      	beq.n	8001cd0 <HAL_GPIO_DeInit+0x94>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a5c      	ldr	r2, [pc, #368]	; (8001e10 <HAL_GPIO_DeInit+0x1d4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <HAL_GPIO_DeInit+0x90>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a5b      	ldr	r2, [pc, #364]	; (8001e14 <HAL_GPIO_DeInit+0x1d8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00d      	beq.n	8001cc8 <HAL_GPIO_DeInit+0x8c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a5a      	ldr	r2, [pc, #360]	; (8001e18 <HAL_GPIO_DeInit+0x1dc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d007      	beq.n	8001cc4 <HAL_GPIO_DeInit+0x88>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a59      	ldr	r2, [pc, #356]	; (8001e1c <HAL_GPIO_DeInit+0x1e0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_GPIO_DeInit+0x84>
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	e00c      	b.n	8001cda <HAL_GPIO_DeInit+0x9e>
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	e00a      	b.n	8001cda <HAL_GPIO_DeInit+0x9e>
 8001cc4:	2305      	movs	r3, #5
 8001cc6:	e008      	b.n	8001cda <HAL_GPIO_DeInit+0x9e>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_DeInit+0x9e>
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_DeInit+0x9e>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_DeInit+0x9e>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_DeInit+0x9e>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d132      	bne.n	8001d50 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_GPIO_DeInit+0x1e4>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	494b      	ldr	r1, [pc, #300]	; (8001e20 <HAL_GPIO_DeInit+0x1e4>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001cf8:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_GPIO_DeInit+0x1e4>)
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4947      	ldr	r1, [pc, #284]	; (8001e20 <HAL_GPIO_DeInit+0x1e4>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_GPIO_DeInit+0x1e4>)
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4944      	ldr	r1, [pc, #272]	; (8001e20 <HAL_GPIO_DeInit+0x1e4>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <HAL_GPIO_DeInit+0x1e4>)
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4940      	ldr	r1, [pc, #256]	; (8001e20 <HAL_GPIO_DeInit+0x1e4>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001d32:	4a34      	ldr	r2, [pc, #208]	; (8001e04 <HAL_GPIO_DeInit+0x1c8>)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43da      	mvns	r2, r3
 8001d42:	4830      	ldr	r0, [pc, #192]	; (8001e04 <HAL_GPIO_DeInit+0x1c8>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	400a      	ands	r2, r1
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2103      	movs	r1, #3
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	08d2      	lsrs	r2, r2, #3
 8001d84:	4019      	ands	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3208      	adds	r2, #8
 8001d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2103      	movs	r1, #3
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	401a      	ands	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	2101      	movs	r1, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	401a      	ands	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f af2b 	bne.w	8001c4c <HAL_GPIO_DeInit+0x10>
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40010000 	.word	0x40010000
 8001e08:	48000400 	.word	0x48000400
 8001e0c:	48000800 	.word	0x48000800
 8001e10:	48000c00 	.word	0x48000c00
 8001e14:	48001000 	.word	0x48001000
 8001e18:	48001400 	.word	0x48001400
 8001e1c:	48001800 	.word	0x48001800
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e08d      	b.n	8001f52 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fa5c 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	e006      	b.n	8001eac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d108      	bne.n	8001ec6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	e007      	b.n	8001ed6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69d9      	ldr	r1, [r3, #28]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e021      	b.n	8001fb0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fa1d 	bl	80013c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	817b      	strh	r3, [r7, #10]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	813b      	strh	r3, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	f040 80f9 	bne.w	80021d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_I2C_Mem_Write+0x34>
 8001fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0ed      	b.n	80021d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_I2C_Mem_Write+0x4e>
 8002002:	2302      	movs	r3, #2
 8002004:	e0e6      	b.n	80021d4 <HAL_I2C_Mem_Write+0x21c>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800200e:	f7ff fb29 	bl	8001664 <HAL_GetTick>
 8002012:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2319      	movs	r3, #25
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fac3 	bl	80025ac <I2C_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0d1      	b.n	80021d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2221      	movs	r2, #33	; 0x21
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a3a      	ldr	r2, [r7, #32]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002058:	88f8      	ldrh	r0, [r7, #6]
 800205a:	893a      	ldrh	r2, [r7, #8]
 800205c:	8979      	ldrh	r1, [r7, #10]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4603      	mov	r3, r0
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f9d3 	bl	8002414 <I2C_RequestMemoryWrite>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0a9      	b.n	80021d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d90e      	bls.n	80020a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	22ff      	movs	r2, #255	; 0xff
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	b2da      	uxtb	r2, r3
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	2300      	movs	r3, #0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fc3d 	bl	8002920 <I2C_TransferConfig>
 80020a6:	e00f      	b.n	80020c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	8979      	ldrh	r1, [r7, #10]
 80020ba:	2300      	movs	r3, #0
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fc2c 	bl	8002920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fabc 	bl	800264a <I2C_WaitOnTXISFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e07b      	b.n	80021d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d034      	beq.n	8002180 <HAL_I2C_Mem_Write+0x1c8>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	2b00      	cmp	r3, #0
 800211c:	d130      	bne.n	8002180 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	2200      	movs	r2, #0
 8002126:	2180      	movs	r1, #128	; 0x80
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fa3f 	bl	80025ac <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e04d      	b.n	80021d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	2bff      	cmp	r3, #255	; 0xff
 8002140:	d90e      	bls.n	8002160 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	22ff      	movs	r2, #255	; 0xff
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	b2da      	uxtb	r2, r3
 800214e:	8979      	ldrh	r1, [r7, #10]
 8002150:	2300      	movs	r3, #0
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fbe1 	bl	8002920 <I2C_TransferConfig>
 800215e:	e00f      	b.n	8002180 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	b2da      	uxtb	r2, r3
 8002170:	8979      	ldrh	r1, [r7, #10]
 8002172:	2300      	movs	r3, #0
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fbd0 	bl	8002920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d19e      	bne.n	80020c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 faa2 	bl	80026d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e01a      	b.n	80021d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2220      	movs	r2, #32
 80021a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_I2C_Mem_Write+0x224>)
 80021b2:	400b      	ands	r3, r1
 80021b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
  }
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fe00e800 	.word	0xfe00e800

080021e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	817b      	strh	r3, [r7, #10]
 80021f2:	460b      	mov	r3, r1
 80021f4:	813b      	strh	r3, [r7, #8]
 80021f6:	4613      	mov	r3, r2
 80021f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	f040 80fd 	bne.w	8002402 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_I2C_Mem_Read+0x34>
 800220e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0f1      	b.n	8002404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_I2C_Mem_Read+0x4e>
 800222a:	2302      	movs	r3, #2
 800222c:	e0ea      	b.n	8002404 <HAL_I2C_Mem_Read+0x224>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002236:	f7ff fa15 	bl	8001664 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2319      	movs	r3, #25
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f9af 	bl	80025ac <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0d5      	b.n	8002404 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2222      	movs	r2, #34	; 0x22
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a3a      	ldr	r2, [r7, #32]
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002280:	88f8      	ldrh	r0, [r7, #6]
 8002282:	893a      	ldrh	r2, [r7, #8]
 8002284:	8979      	ldrh	r1, [r7, #10]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	4603      	mov	r3, r0
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f913 	bl	80024bc <I2C_RequestMemoryRead>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0ad      	b.n	8002404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d90e      	bls.n	80022d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	22ff      	movs	r2, #255	; 0xff
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	8979      	ldrh	r1, [r7, #10]
 80022c0:	4b52      	ldr	r3, [pc, #328]	; (800240c <HAL_I2C_Mem_Read+0x22c>)
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 fb29 	bl	8002920 <I2C_TransferConfig>
 80022ce:	e00f      	b.n	80022f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	8979      	ldrh	r1, [r7, #10]
 80022e2:	4b4a      	ldr	r3, [pc, #296]	; (800240c <HAL_I2C_Mem_Read+0x22c>)
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fb18 	bl	8002920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	2200      	movs	r2, #0
 80022f8:	2104      	movs	r1, #4
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f956 	bl	80025ac <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e07c      	b.n	8002404 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d034      	beq.n	80023b0 <HAL_I2C_Mem_Read+0x1d0>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	2b00      	cmp	r3, #0
 800234c:	d130      	bne.n	80023b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f927 	bl	80025ac <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04d      	b.n	8002404 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d90e      	bls.n	8002390 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	b2da      	uxtb	r2, r3
 800237e:	8979      	ldrh	r1, [r7, #10]
 8002380:	2300      	movs	r3, #0
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fac9 	bl	8002920 <I2C_TransferConfig>
 800238e:	e00f      	b.n	80023b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	2300      	movs	r3, #0
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fab8 	bl	8002920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d19a      	bne.n	80022f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f98a 	bl	80026d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e01a      	b.n	8002404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2220      	movs	r2, #32
 80023d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_I2C_Mem_Read+0x230>)
 80023e2:	400b      	ands	r3, r1
 80023e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
  }
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	80002400 	.word	0x80002400
 8002410:	fe00e800 	.word	0xfe00e800

08002414 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	460b      	mov	r3, r1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <I2C_RequestMemoryWrite+0xa4>)
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fa6f 	bl	8002920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	69b9      	ldr	r1, [r7, #24]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f8ff 	bl	800264a <I2C_WaitOnTXISFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e02c      	b.n	80024b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800245c:	893b      	ldrh	r3, [r7, #8]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
 8002466:	e015      	b.n	8002494 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002468:	893b      	ldrh	r3, [r7, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b29b      	uxth	r3, r3
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f8e5 	bl	800264a <I2C_WaitOnTXISFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e012      	b.n	80024b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800248a:	893b      	ldrh	r3, [r7, #8]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2200      	movs	r2, #0
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f884 	bl	80025ac <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	80002000 	.word	0x80002000

080024bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	817b      	strh	r3, [r7, #10]
 80024ce:	460b      	mov	r3, r1
 80024d0:	813b      	strh	r3, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	8979      	ldrh	r1, [r7, #10]
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <I2C_RequestMemoryRead+0xa4>)
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2300      	movs	r3, #0
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fa1c 	bl	8002920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f8ac 	bl	800264a <I2C_WaitOnTXISFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e02c      	b.n	8002556 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002502:	893b      	ldrh	r3, [r7, #8]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
 800250c:	e015      	b.n	800253a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800250e:	893b      	ldrh	r3, [r7, #8]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	b29b      	uxth	r3, r3
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f892 	bl	800264a <I2C_WaitOnTXISFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e012      	b.n	8002556 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002530:	893b      	ldrh	r3, [r7, #8]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2200      	movs	r2, #0
 8002542:	2140      	movs	r1, #64	; 0x40
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f831 	bl	80025ac <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	80002000 	.word	0x80002000

08002564 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b02      	cmp	r3, #2
 8002578:	d103      	bne.n	8002582 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d007      	beq.n	80025a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	619a      	str	r2, [r3, #24]
  }
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025bc:	e031      	b.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c4:	d02d      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c6:	f7ff f84d 	bl	8001664 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d122      	bne.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d113      	bne.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f043 0220 	orr.w	r2, r3, #32
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00f      	b.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4013      	ands	r3, r2
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	429a      	cmp	r2, r3
 800263e:	d0be      	beq.n	80025be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002656:	e033      	b.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f87f 	bl	8002760 <I2C_IsErrorOccurred>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e031      	b.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002672:	d025      	beq.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002674:	f7fe fff6 	bl	8001664 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	429a      	cmp	r2, r3
 8002682:	d302      	bcc.n	800268a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11a      	bne.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b02      	cmp	r3, #2
 8002696:	d013      	beq.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d1c4      	bne.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e4:	e02f      	b.n	8002746 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f838 	bl	8002760 <I2C_IsErrorOccurred>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e02d      	b.n	8002756 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7fe ffb3 	bl	8001664 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11a      	bne.n	8002746 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b20      	cmp	r3, #32
 800271c:	d013      	beq.n	8002746 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e007      	b.n	8002756 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b20      	cmp	r3, #32
 8002752:	d1c8      	bne.n	80026e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d068      	beq.n	800285e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2210      	movs	r2, #16
 8002792:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002794:	e049      	b.n	800282a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279c:	d045      	beq.n	800282a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7fe ff61 	bl	8001664 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_IsErrorOccurred+0x54>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d13a      	bne.n	800282a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d6:	d121      	bne.n	800281c <I2C_IsErrorOccurred+0xbc>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027de:	d01d      	beq.n	800281c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d01a      	beq.n	800281c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027f6:	f7fe ff35 	bl	8001664 <HAL_GetTick>
 80027fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027fc:	e00e      	b.n	800281c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027fe:	f7fe ff31 	bl	8001664 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b19      	cmp	r3, #25
 800280a:	d907      	bls.n	800281c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f043 0320 	orr.w	r3, r3, #32
 8002812:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800281a:	e006      	b.n	800282a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b20      	cmp	r3, #32
 8002828:	d1e9      	bne.n	80027fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b20      	cmp	r3, #32
 8002836:	d003      	beq.n	8002840 <I2C_IsErrorOccurred+0xe0>
 8002838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0aa      	beq.n	8002796 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2220      	movs	r2, #32
 800284e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002880:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01c      	beq.n	800290e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff fe45 	bl	8002564 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <I2C_IsErrorOccurred+0x1bc>)
 80028e6:	400b      	ands	r3, r1
 80028e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800290e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002912:	4618      	mov	r0, r3
 8002914:	3728      	adds	r7, #40	; 0x28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	fe00e800 	.word	0xfe00e800

08002920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	4613      	mov	r3, r2
 8002930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002938:	7a7b      	ldrb	r3, [r7, #9]
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002940:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	4313      	orrs	r3, r2
 800294a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800294e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	0d5b      	lsrs	r3, r3, #21
 800295a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <I2C_TransferConfig+0x60>)
 8002960:	430b      	orrs	r3, r1
 8002962:	43db      	mvns	r3, r3
 8002964:	ea02 0103 	and.w	r1, r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	03ff63ff 	.word	0x03ff63ff

08002984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	d138      	bne.n	8002a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e032      	b.n	8002a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b085      	sub	sp, #20
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d139      	bne.n	8002aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e033      	b.n	8002aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2224      	movs	r2, #36	; 0x24
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40007000 	.word	0x40007000

08002ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ade:	d130      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aec:	d038      	beq.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2232      	movs	r2, #50	; 0x32
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9b      	lsrs	r3, r3, #18
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b14:	e002      	b.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d102      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f2      	bne.n	8002b16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3c:	d110      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e00f      	b.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d007      	beq.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b58:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000
 8002b74:	20000080 	.word	0x20000080
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e3ca      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8e:	4b97      	ldr	r3, [pc, #604]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b98:	4b94      	ldr	r3, [pc, #592]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80e4 	beq.w	8002d78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4a>
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	f040 808b 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 8087 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc6:	4b89      	ldr	r3, [pc, #548]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_RCC_OscConfig+0x62>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e3a2      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	4b82      	ldr	r3, [pc, #520]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x7c>
 8002bee:	4b7f      	ldr	r3, [pc, #508]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf6:	e005      	b.n	8002c04 <HAL_RCC_OscConfig+0x88>
 8002bf8:	4b7c      	ldr	r3, [pc, #496]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d223      	bcs.n	8002c50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fd55 	bl	80036bc <RCC_SetFlashLatencyFromMSIRange>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e383      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a72      	ldr	r2, [pc, #456]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c22:	f043 0308 	orr.w	r3, r3, #8
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b70      	ldr	r3, [pc, #448]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	496d      	ldr	r1, [pc, #436]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c3a:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	4968      	ldr	r1, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
 8002c4e:	e025      	b.n	8002c9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c50:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a65      	ldr	r2, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4960      	ldr	r1, [pc, #384]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	495b      	ldr	r1, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fd15 	bl	80036bc <RCC_SetFlashLatencyFromMSIRange>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e343      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9c:	f000 fc4a 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b52      	ldr	r3, [pc, #328]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	4950      	ldr	r1, [pc, #320]	; (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_RCC_OscConfig+0x278>)
 8002cba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cbc:	4b4e      	ldr	r3, [pc, #312]	; (8002df8 <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe fc7f 	bl	80015c4 <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d052      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	e327      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d032      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cdc:	4b43      	ldr	r3, [pc, #268]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a42      	ldr	r2, [pc, #264]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fcbc 	bl	8001664 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fcb8 	bl	8001664 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e310      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d02:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a36      	ldr	r2, [pc, #216]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d14:	f043 0308 	orr.w	r3, r3, #8
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4931      	ldr	r1, [pc, #196]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	492c      	ldr	r1, [pc, #176]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
 8002d40:	e01a      	b.n	8002d78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a29      	ldr	r2, [pc, #164]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fc89 	bl	8001664 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d56:	f7fe fc85 	bl	8001664 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e2dd      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x1da>
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d074      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x21a>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d10e      	bne.n	8002dae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d064      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d160      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e2ba      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x24a>
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e026      	b.n	8002e14 <HAL_RCC_OscConfig+0x298>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dce:	d115      	bne.n	8002dfc <HAL_RCC_OscConfig+0x280>
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a02      	ldr	r2, [pc, #8]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e014      	b.n	8002e14 <HAL_RCC_OscConfig+0x298>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08004b9c 	.word	0x08004b9c
 8002df4:	20000080 	.word	0x20000080
 8002df8:	20000084 	.word	0x20000084
 8002dfc:	4ba0      	ldr	r3, [pc, #640]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a9f      	ldr	r2, [pc, #636]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b9d      	ldr	r3, [pc, #628]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a9c      	ldr	r2, [pc, #624]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fc22 	bl	8001664 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe fc1e 	bl	8001664 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e276      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	4b92      	ldr	r3, [pc, #584]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2a8>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fc0e 	bl	8001664 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fc0a 	bl	8001664 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e262      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2d0>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d060      	beq.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_OscConfig+0x310>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d119      	bne.n	8002eba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d116      	bne.n	8002eba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8c:	4b7c      	ldr	r3, [pc, #496]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x328>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e23f      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	4973      	ldr	r1, [pc, #460]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	e040      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d023      	beq.n	8002f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec2:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6e      	ldr	r2, [pc, #440]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe fbc9 	bl	8001664 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fbc5 	bl	8001664 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e21d      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	4b65      	ldr	r3, [pc, #404]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b62      	ldr	r3, [pc, #392]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	495f      	ldr	r1, [pc, #380]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
 8002f08:	e018      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fe fba5 	bl	8001664 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fba1 	bl	8001664 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1f9      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f30:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d03c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe fb80 	bl	8001664 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe fb7c 	bl	8001664 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1d4      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ef      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3ec>
 8002f88:	e01b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8a:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	4a3b      	ldr	r2, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fb63 	bl	8001664 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fb5f 	bl	8001664 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1b7      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ef      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80a6 	beq.w	800311c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6593      	str	r3, [r2, #88]	; 0x58
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x508>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d118      	bne.n	800303a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <HAL_RCC_OscConfig+0x508>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_RCC_OscConfig+0x508>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003014:	f7fe fb26 	bl	8001664 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fe fb22 	bl	8001664 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e17a      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_RCC_OscConfig+0x508>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d108      	bne.n	8003054 <HAL_RCC_OscConfig+0x4d8>
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003052:	e029      	b.n	80030a8 <HAL_RCC_OscConfig+0x52c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d115      	bne.n	8003088 <HAL_RCC_OscConfig+0x50c>
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	4a07      	ldr	r2, [pc, #28]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a03      	ldr	r2, [pc, #12]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307c:	e014      	b.n	80030a8 <HAL_RCC_OscConfig+0x52c>
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	4b9c      	ldr	r3, [pc, #624]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	4a9b      	ldr	r2, [pc, #620]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003098:	4b98      	ldr	r3, [pc, #608]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a97      	ldr	r2, [pc, #604]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d016      	beq.n	80030de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe fad8 	bl	8001664 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fe fad4 	bl	8001664 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e12a      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ce:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ed      	beq.n	80030b8 <HAL_RCC_OscConfig+0x53c>
 80030dc:	e015      	b.n	800310a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fe fac1 	bl	8001664 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe fabd 	bl	8001664 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e113      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ed      	bne.n	80030e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310a:	7ffb      	ldrb	r3, [r7, #31]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b7a      	ldr	r3, [pc, #488]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	4a79      	ldr	r2, [pc, #484]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80fe 	beq.w	8003322 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	2b02      	cmp	r3, #2
 800312c:	f040 80d0 	bne.w	80032d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003130:	4b72      	ldr	r3, [pc, #456]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	429a      	cmp	r2, r3
 8003142:	d130      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	3b01      	subs	r3, #1
 8003150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d127      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d11f      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003170:	2a07      	cmp	r2, #7
 8003172:	bf14      	ite	ne
 8003174:	2201      	movne	r2, #1
 8003176:	2200      	moveq	r2, #0
 8003178:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800317a:	4293      	cmp	r3, r2
 800317c:	d113      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	3b01      	subs	r3, #1
 80031a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d06e      	beq.n	8003284 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d069      	beq.n	8003280 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0ad      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d4:	f7fe fa46 	bl	8001664 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fa42 	bl	8001664 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e09a      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fa:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x784>)
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800320a:	3a01      	subs	r2, #1
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003214:	0212      	lsls	r2, r2, #8
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800321c:	0852      	lsrs	r2, r2, #1
 800321e:	3a01      	subs	r2, #1
 8003220:	0552      	lsls	r2, r2, #21
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003228:	0852      	lsrs	r2, r2, #1
 800322a:	3a01      	subs	r2, #1
 800322c:	0652      	lsls	r2, r2, #25
 800322e:	4311      	orrs	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003234:	0912      	lsrs	r2, r2, #4
 8003236:	0452      	lsls	r2, r2, #17
 8003238:	430a      	orrs	r2, r1
 800323a:	4930      	ldr	r1, [pc, #192]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800323c:	4313      	orrs	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003240:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003256:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003258:	f7fe fa04 	bl	8001664 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe fa00 	bl	8001664 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e058      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800327e:	e050      	b.n	8003322 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e04f      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d148      	bne.n	8003322 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80032a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032a8:	f7fe f9dc 	bl	8001664 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe f9d8 	bl	8001664 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e030      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x734>
 80032ce:	e028      	b.n	8003322 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d023      	beq.n	800331e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80032dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe f9bf 	bl	8001664 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	e00c      	b.n	8003304 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fe f9bb 	bl	8001664 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d905      	bls.n	8003304 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e013      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
 80032fc:	40021000 	.word	0x40021000
 8003300:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_OscConfig+0x7b0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ec      	bne.n	80032ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_OscConfig+0x7b0>)
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4905      	ldr	r1, [pc, #20]	; (800332c <HAL_RCC_OscConfig+0x7b0>)
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_OscConfig+0x7b4>)
 8003318:	4013      	ands	r3, r2
 800331a:	60cb      	str	r3, [r1, #12]
 800331c:	e001      	b.n	8003322 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	feeefffc 	.word	0xfeeefffc

08003334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0e7      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003348:	4b75      	ldr	r3, [pc, #468]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d910      	bls.n	8003378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b72      	ldr	r3, [pc, #456]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 0207 	bic.w	r2, r3, #7
 800335e:	4970      	ldr	r1, [pc, #448]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b6e      	ldr	r3, [pc, #440]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0cf      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	429a      	cmp	r2, r3
 8003392:	d908      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b63      	ldr	r3, [pc, #396]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4960      	ldr	r1, [pc, #384]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d04c      	beq.n	800344c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d121      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0a6      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	4b54      	ldr	r3, [pc, #336]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d115      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e09a      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ea:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e08e      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e086      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4943      	ldr	r1, [pc, #268]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fe f922 	bl	8001664 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe f91e 	bl	8001664 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e06e      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d010      	beq.n	800347a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4b31      	ldr	r3, [pc, #196]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003464:	429a      	cmp	r2, r3
 8003466:	d208      	bcs.n	800347a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	492b      	ldr	r1, [pc, #172]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d210      	bcs.n	80034aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 0207 	bic.w	r2, r3, #7
 8003490:	4923      	ldr	r1, [pc, #140]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e036      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4918      	ldr	r1, [pc, #96]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4910      	ldr	r1, [pc, #64]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034e8:	f000 f824 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	490b      	ldr	r1, [pc, #44]	; (8003528 <HAL_RCC_ClockConfig+0x1f4>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_RCC_ClockConfig+0x1f8>)
 8003506:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1fc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe f859 	bl	80015c4 <HAL_InitTick>
 8003512:	4603      	mov	r3, r0
 8003514:	72fb      	strb	r3, [r7, #11]

  return status;
 8003516:	7afb      	ldrb	r3, [r7, #11]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40022000 	.word	0x40022000
 8003524:	40021000 	.word	0x40021000
 8003528:	08004b9c 	.word	0x08004b9c
 800352c:	20000080 	.word	0x20000080
 8003530:	20000084 	.word	0x20000084

08003534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x34>
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d121      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d11e      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003568:	4b34      	ldr	r3, [pc, #208]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e005      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003584:	4b2d      	ldr	r3, [pc, #180]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003590:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d102      	bne.n	80035b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e004      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_GetSysClockFreq+0x114>)
 80035ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d134      	bne.n	800362c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d003      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0xa6>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d003      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0xac>
 80035d8:	e005      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCC_GetSysClockFreq+0x110>)
 80035dc:	617b      	str	r3, [r7, #20]
      break;
 80035de:	e005      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_GetSysClockFreq+0x114>)
 80035e2:	617b      	str	r3, [r7, #20]
      break;
 80035e4:	e002      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	617b      	str	r3, [r7, #20]
      break;
 80035ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	3301      	adds	r3, #1
 80035f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	fb03 f202 	mul.w	r2, r3, r2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	0e5b      	lsrs	r3, r3, #25
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	3301      	adds	r3, #1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800362c:	69bb      	ldr	r3, [r7, #24]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3724      	adds	r7, #36	; 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	08004bb4 	.word	0x08004bb4
 8003644:	00f42400 	.word	0x00f42400
 8003648:	007a1200 	.word	0x007a1200

0800364c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_GetHCLKFreq+0x14>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000080 	.word	0x20000080

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003668:	f7ff fff0 	bl	800364c <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4904      	ldr	r1, [pc, #16]	; (800368c <HAL_RCC_GetPCLK1Freq+0x28>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	08004bac 	.word	0x08004bac

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003694:	f7ff ffda 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0adb      	lsrs	r3, r3, #11
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4904      	ldr	r1, [pc, #16]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08004bac 	.word	0x08004bac

080036bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036d4:	f7ff f9ee 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 80036d8:	6178      	str	r0, [r7, #20]
 80036da:	e014      	b.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036f4:	f7ff f9de 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 80036f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003704:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370c:	d10b      	bne.n	8003726 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d919      	bls.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2ba0      	cmp	r3, #160	; 0xa0
 8003718:	d902      	bls.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800371a:	2302      	movs	r3, #2
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	e013      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003720:	2301      	movs	r3, #1
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	e010      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d902      	bls.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800372c:	2303      	movs	r3, #3
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	e00a      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d102      	bne.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003738:	2302      	movs	r3, #2
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	e004      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b70      	cmp	r3, #112	; 0x70
 8003742:	d101      	bne.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003744:	2301      	movs	r3, #1
 8003746:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 0207 	bic.w	r2, r3, #7
 8003750:	4909      	ldr	r1, [pc, #36]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	40022000 	.word	0x40022000

0800377c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003784:	2300      	movs	r3, #0
 8003786:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003788:	2300      	movs	r3, #0
 800378a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003794:	2b00      	cmp	r3, #0
 8003796:	d041      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037a0:	d02a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037a6:	d824      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b2:	d81e      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d010      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037be:	e018      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037c0:	4b86      	ldr	r3, [pc, #536]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a85      	ldr	r2, [pc, #532]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037cc:	e015      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fabb 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037de:	e00c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3320      	adds	r3, #32
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fba6 	bl	8003f38 <RCCEx_PLLSAI2_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	74fb      	strb	r3, [r7, #19]
      break;
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10b      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003800:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380e:	4973      	ldr	r1, [pc, #460]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003816:	e001      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d041      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003830:	d02a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003832:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003836:	d824      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800383c:	d008      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800383e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003842:	d81e      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800384c:	d010      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800384e:	e018      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003850:	4b62      	ldr	r3, [pc, #392]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a61      	ldr	r2, [pc, #388]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800385c:	e015      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fa73 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800386e:	e00c      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3320      	adds	r3, #32
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fb5e 	bl	8003f38 <RCCEx_PLLSAI2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003880:	e003      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	74fb      	strb	r3, [r7, #19]
      break;
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003890:	4b52      	ldr	r3, [pc, #328]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800389e:	494f      	ldr	r1, [pc, #316]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038a6:	e001      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a0 	beq.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d4:	4b41      	ldr	r3, [pc, #260]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	4a40      	ldr	r2, [pc, #256]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	6593      	str	r3, [r2, #88]	; 0x58
 80038e0:	4b3e      	ldr	r3, [pc, #248]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ec:	2301      	movs	r3, #1
 80038ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f0:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a3a      	ldr	r2, [pc, #232]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038fc:	f7fd feb2 	bl	8001664 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003902:	e009      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003904:	f7fd feae 	bl	8001664 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d902      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	74fb      	strb	r3, [r7, #19]
        break;
 8003916:	e005      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ef      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d15c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800392a:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003934:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01f      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	429a      	cmp	r2, r3
 8003946:	d019      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003948:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003952:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	4a20      	ldr	r2, [pc, #128]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd fe6d 	bl	8001664 <HAL_GetTick>
 800398a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398c:	e00b      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fd fe69 	bl	8001664 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d902      	bls.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	74fb      	strb	r3, [r7, #19]
            break;
 80039a4:	e006      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ec      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ca:	4904      	ldr	r1, [pc, #16]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039d2:	e009      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
 80039d8:	e006      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e8:	7c7b      	ldrb	r3, [r7, #17]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ee:	4b9e      	ldr	r3, [pc, #632]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	4a9d      	ldr	r2, [pc, #628]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a06:	4b98      	ldr	r3, [pc, #608]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f023 0203 	bic.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	4994      	ldr	r1, [pc, #592]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a28:	4b8f      	ldr	r3, [pc, #572]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 020c 	bic.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	498c      	ldr	r1, [pc, #560]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a4a:	4b87      	ldr	r3, [pc, #540]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	4983      	ldr	r1, [pc, #524]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a6c:	4b7e      	ldr	r3, [pc, #504]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	497b      	ldr	r1, [pc, #492]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9c:	4972      	ldr	r1, [pc, #456]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ab0:	4b6d      	ldr	r3, [pc, #436]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	496a      	ldr	r1, [pc, #424]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad2:	4b65      	ldr	r3, [pc, #404]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	4961      	ldr	r1, [pc, #388]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003af4:	4b5c      	ldr	r3, [pc, #368]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b02:	4959      	ldr	r1, [pc, #356]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b16:	4b54      	ldr	r3, [pc, #336]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	4950      	ldr	r1, [pc, #320]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b38:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	4948      	ldr	r1, [pc, #288]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b5a:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	493f      	ldr	r1, [pc, #252]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d028      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b7c:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8a:	4937      	ldr	r1, [pc, #220]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9a:	d106      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9c:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a31      	ldr	r2, [pc, #196]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba6:	60d3      	str	r3, [r2, #12]
 8003ba8:	e011      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f8c8 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d028      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bda:	4b23      	ldr	r3, [pc, #140]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	491f      	ldr	r1, [pc, #124]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c04:	60d3      	str	r3, [r2, #12]
 8003c06:	e011      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f899 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d02b      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	4908      	ldr	r1, [pc, #32]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c56:	d109      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c62:	60d3      	str	r3, [r2, #12]
 8003c64:	e014      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 f867 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d02f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c9c:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003caa:	4928      	ldr	r1, [pc, #160]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cba:	d10d      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f844 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d014      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	74bb      	strb	r3, [r7, #18]
 8003cd6:	e011      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3320      	adds	r3, #32
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f925 	bl	8003f38 <RCCEx_PLLSAI2_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d16:	490d      	ldr	r1, [pc, #52]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	4904      	ldr	r1, [pc, #16]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d42:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000

08003d50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d5e:	4b75      	ldr	r3, [pc, #468]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d6a:	4b72      	ldr	r3, [pc, #456]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0203 	and.w	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d10d      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d82:	4b6c      	ldr	r3, [pc, #432]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
       ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d047      	beq.n	8003e26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	e044      	b.n	8003e26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d018      	beq.n	8003dd6 <RCCEx_PLLSAI1_Config+0x86>
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d825      	bhi.n	8003df4 <RCCEx_PLLSAI1_Config+0xa4>
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d002      	beq.n	8003db2 <RCCEx_PLLSAI1_Config+0x62>
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d009      	beq.n	8003dc4 <RCCEx_PLLSAI1_Config+0x74>
 8003db0:	e020      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003db2:	4b60      	ldr	r3, [pc, #384]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11d      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc2:	e01a      	b.n	8003dfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dc4:	4b5b      	ldr	r3, [pc, #364]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d116      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd4:	e013      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dd6:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003de2:	4b54      	ldr	r3, [pc, #336]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003df2:	e006      	b.n	8003e02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e004      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10d      	bne.n	8003e26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	4944      	ldr	r1, [pc, #272]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d17d      	bne.n	8003f28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e2c:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e38:	f7fd fc14 	bl	8001664 <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e3e:	e009      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e40:	f7fd fc10 	bl	8001664 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d902      	bls.n	8003e54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	73fb      	strb	r3, [r7, #15]
        break;
 8003e52:	e005      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e54:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ef      	bne.n	8003e40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d160      	bne.n	8003f28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d111      	bne.n	8003e90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6892      	ldr	r2, [r2, #8]
 8003e7c:	0211      	lsls	r1, r2, #8
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68d2      	ldr	r2, [r2, #12]
 8003e82:	0912      	lsrs	r2, r2, #4
 8003e84:	0452      	lsls	r2, r2, #17
 8003e86:	430a      	orrs	r2, r1
 8003e88:	492a      	ldr	r1, [pc, #168]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	610b      	str	r3, [r1, #16]
 8003e8e:	e027      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d112      	bne.n	8003ebc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6892      	ldr	r2, [r2, #8]
 8003ea6:	0211      	lsls	r1, r2, #8
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6912      	ldr	r2, [r2, #16]
 8003eac:	0852      	lsrs	r2, r2, #1
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	0552      	lsls	r2, r2, #21
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	491f      	ldr	r1, [pc, #124]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]
 8003eba:	e011      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6892      	ldr	r2, [r2, #8]
 8003ecc:	0211      	lsls	r1, r2, #8
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6952      	ldr	r2, [r2, #20]
 8003ed2:	0852      	lsrs	r2, r2, #1
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0652      	lsls	r2, r2, #25
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	4916      	ldr	r1, [pc, #88]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd fbba 	bl	8001664 <HAL_GetTick>
 8003ef0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ef2:	e009      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ef4:	f7fd fbb6 	bl	8001664 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d902      	bls.n	8003f08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	73fb      	strb	r3, [r7, #15]
          break;
 8003f06:	e005      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ef      	beq.n	8003ef4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	4904      	ldr	r1, [pc, #16]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000

08003f38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f46:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d018      	beq.n	8003f84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f52:	4b67      	ldr	r3, [pc, #412]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0203 	and.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d10d      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
       ||
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f6a:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
       ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d047      	beq.n	800400e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	e044      	b.n	800400e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d018      	beq.n	8003fbe <RCCEx_PLLSAI2_Config+0x86>
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d825      	bhi.n	8003fdc <RCCEx_PLLSAI2_Config+0xa4>
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d002      	beq.n	8003f9a <RCCEx_PLLSAI2_Config+0x62>
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d009      	beq.n	8003fac <RCCEx_PLLSAI2_Config+0x74>
 8003f98:	e020      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9a:	4b55      	ldr	r3, [pc, #340]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11d      	bne.n	8003fe2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003faa:	e01a      	b.n	8003fe2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fac:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d116      	bne.n	8003fe6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fbc:	e013      	b.n	8003fe6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fbe:	4b4c      	ldr	r3, [pc, #304]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fca:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fda:	e006      	b.n	8003fea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe0:	e004      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	430b      	orrs	r3, r1
 8004008:	4939      	ldr	r1, [pc, #228]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d167      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004014:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a35      	ldr	r2, [pc, #212]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800401a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fd fb20 	bl	8001664 <HAL_GetTick>
 8004024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004026:	e009      	b.n	800403c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004028:	f7fd fb1c 	bl	8001664 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d902      	bls.n	800403c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	73fb      	strb	r3, [r7, #15]
        break;
 800403a:	e005      	b.n	8004048 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ef      	bne.n	8004028 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d14a      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d111      	bne.n	8004078 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004054:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800405c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6892      	ldr	r2, [r2, #8]
 8004064:	0211      	lsls	r1, r2, #8
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68d2      	ldr	r2, [r2, #12]
 800406a:	0912      	lsrs	r2, r2, #4
 800406c:	0452      	lsls	r2, r2, #17
 800406e:	430a      	orrs	r2, r1
 8004070:	491f      	ldr	r1, [pc, #124]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004072:	4313      	orrs	r3, r2
 8004074:	614b      	str	r3, [r1, #20]
 8004076:	e011      	b.n	800409c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6892      	ldr	r2, [r2, #8]
 8004088:	0211      	lsls	r1, r2, #8
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6912      	ldr	r2, [r2, #16]
 800408e:	0852      	lsrs	r2, r2, #1
 8004090:	3a01      	subs	r2, #1
 8004092:	0652      	lsls	r2, r2, #25
 8004094:	430a      	orrs	r2, r1
 8004096:	4916      	ldr	r1, [pc, #88]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004098:	4313      	orrs	r3, r2
 800409a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fd fadc 	bl	8001664 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040ae:	e009      	b.n	80040c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040b0:	f7fd fad8 	bl	8001664 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d902      	bls.n	80040c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	73fb      	strb	r3, [r7, #15]
          break;
 80040c2:	e005      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ef      	beq.n	80040b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	4904      	ldr	r1, [pc, #16]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000

080040f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e040      	b.n	8004188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd f978 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	; 0x24
 8004120:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fae0 	bl	8004700 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f825 	bl	8004190 <UART_SetConfig>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e01b      	b.n	8004188 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800416e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fb5f 	bl	8004844 <UART_CheckIdleState>
 8004186:	4603      	mov	r3, r0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b08a      	sub	sp, #40	; 0x28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4ba4      	ldr	r3, [pc, #656]	; (8004450 <UART_SetConfig+0x2c0>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a99      	ldr	r2, [pc, #612]	; (8004454 <UART_SetConfig+0x2c4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	4313      	orrs	r3, r2
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a90      	ldr	r2, [pc, #576]	; (8004458 <UART_SetConfig+0x2c8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d126      	bne.n	8004268 <UART_SetConfig+0xd8>
 800421a:	4b90      	ldr	r3, [pc, #576]	; (800445c <UART_SetConfig+0x2cc>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	2b03      	cmp	r3, #3
 8004226:	d81b      	bhi.n	8004260 <UART_SetConfig+0xd0>
 8004228:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <UART_SetConfig+0xa0>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004241 	.word	0x08004241
 8004234:	08004251 	.word	0x08004251
 8004238:	08004249 	.word	0x08004249
 800423c:	08004259 	.word	0x08004259
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e116      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004248:	2302      	movs	r3, #2
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e112      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004250:	2304      	movs	r3, #4
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e10e      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004258:	2308      	movs	r3, #8
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e10a      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004260:	2310      	movs	r3, #16
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e106      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a7c      	ldr	r2, [pc, #496]	; (8004460 <UART_SetConfig+0x2d0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d138      	bne.n	80042e4 <UART_SetConfig+0x154>
 8004272:	4b7a      	ldr	r3, [pc, #488]	; (800445c <UART_SetConfig+0x2cc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d82d      	bhi.n	80042dc <UART_SetConfig+0x14c>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0xf8>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080042dd 	.word	0x080042dd
 8004294:	080042dd 	.word	0x080042dd
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080042dd 	.word	0x080042dd
 80042a0:	080042dd 	.word	0x080042dd
 80042a4:	080042dd 	.word	0x080042dd
 80042a8:	080042c5 	.word	0x080042c5
 80042ac:	080042dd 	.word	0x080042dd
 80042b0:	080042dd 	.word	0x080042dd
 80042b4:	080042dd 	.word	0x080042dd
 80042b8:	080042d5 	.word	0x080042d5
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e0d8      	b.n	8004476 <UART_SetConfig+0x2e6>
 80042c4:	2302      	movs	r3, #2
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e0d4      	b.n	8004476 <UART_SetConfig+0x2e6>
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e0d0      	b.n	8004476 <UART_SetConfig+0x2e6>
 80042d4:	2308      	movs	r3, #8
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042da:	e0cc      	b.n	8004476 <UART_SetConfig+0x2e6>
 80042dc:	2310      	movs	r3, #16
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e2:	e0c8      	b.n	8004476 <UART_SetConfig+0x2e6>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a5e      	ldr	r2, [pc, #376]	; (8004464 <UART_SetConfig+0x2d4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d125      	bne.n	800433a <UART_SetConfig+0x1aa>
 80042ee:	4b5b      	ldr	r3, [pc, #364]	; (800445c <UART_SetConfig+0x2cc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042f8:	2b30      	cmp	r3, #48	; 0x30
 80042fa:	d016      	beq.n	800432a <UART_SetConfig+0x19a>
 80042fc:	2b30      	cmp	r3, #48	; 0x30
 80042fe:	d818      	bhi.n	8004332 <UART_SetConfig+0x1a2>
 8004300:	2b20      	cmp	r3, #32
 8004302:	d00a      	beq.n	800431a <UART_SetConfig+0x18a>
 8004304:	2b20      	cmp	r3, #32
 8004306:	d814      	bhi.n	8004332 <UART_SetConfig+0x1a2>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <UART_SetConfig+0x182>
 800430c:	2b10      	cmp	r3, #16
 800430e:	d008      	beq.n	8004322 <UART_SetConfig+0x192>
 8004310:	e00f      	b.n	8004332 <UART_SetConfig+0x1a2>
 8004312:	2300      	movs	r3, #0
 8004314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004318:	e0ad      	b.n	8004476 <UART_SetConfig+0x2e6>
 800431a:	2302      	movs	r3, #2
 800431c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004320:	e0a9      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004322:	2304      	movs	r3, #4
 8004324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004328:	e0a5      	b.n	8004476 <UART_SetConfig+0x2e6>
 800432a:	2308      	movs	r3, #8
 800432c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004330:	e0a1      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004332:	2310      	movs	r3, #16
 8004334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004338:	e09d      	b.n	8004476 <UART_SetConfig+0x2e6>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a4a      	ldr	r2, [pc, #296]	; (8004468 <UART_SetConfig+0x2d8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d125      	bne.n	8004390 <UART_SetConfig+0x200>
 8004344:	4b45      	ldr	r3, [pc, #276]	; (800445c <UART_SetConfig+0x2cc>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800434e:	2bc0      	cmp	r3, #192	; 0xc0
 8004350:	d016      	beq.n	8004380 <UART_SetConfig+0x1f0>
 8004352:	2bc0      	cmp	r3, #192	; 0xc0
 8004354:	d818      	bhi.n	8004388 <UART_SetConfig+0x1f8>
 8004356:	2b80      	cmp	r3, #128	; 0x80
 8004358:	d00a      	beq.n	8004370 <UART_SetConfig+0x1e0>
 800435a:	2b80      	cmp	r3, #128	; 0x80
 800435c:	d814      	bhi.n	8004388 <UART_SetConfig+0x1f8>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <UART_SetConfig+0x1d8>
 8004362:	2b40      	cmp	r3, #64	; 0x40
 8004364:	d008      	beq.n	8004378 <UART_SetConfig+0x1e8>
 8004366:	e00f      	b.n	8004388 <UART_SetConfig+0x1f8>
 8004368:	2300      	movs	r3, #0
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e082      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004370:	2302      	movs	r3, #2
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	e07e      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004378:	2304      	movs	r3, #4
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e07a      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004380:	2308      	movs	r3, #8
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e076      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004388:	2310      	movs	r3, #16
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e072      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a35      	ldr	r2, [pc, #212]	; (800446c <UART_SetConfig+0x2dc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d12a      	bne.n	80043f0 <UART_SetConfig+0x260>
 800439a:	4b30      	ldr	r3, [pc, #192]	; (800445c <UART_SetConfig+0x2cc>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a8:	d01a      	beq.n	80043e0 <UART_SetConfig+0x250>
 80043aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ae:	d81b      	bhi.n	80043e8 <UART_SetConfig+0x258>
 80043b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b4:	d00c      	beq.n	80043d0 <UART_SetConfig+0x240>
 80043b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ba:	d815      	bhi.n	80043e8 <UART_SetConfig+0x258>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <UART_SetConfig+0x238>
 80043c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c4:	d008      	beq.n	80043d8 <UART_SetConfig+0x248>
 80043c6:	e00f      	b.n	80043e8 <UART_SetConfig+0x258>
 80043c8:	2300      	movs	r3, #0
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ce:	e052      	b.n	8004476 <UART_SetConfig+0x2e6>
 80043d0:	2302      	movs	r3, #2
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d6:	e04e      	b.n	8004476 <UART_SetConfig+0x2e6>
 80043d8:	2304      	movs	r3, #4
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043de:	e04a      	b.n	8004476 <UART_SetConfig+0x2e6>
 80043e0:	2308      	movs	r3, #8
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e046      	b.n	8004476 <UART_SetConfig+0x2e6>
 80043e8:	2310      	movs	r3, #16
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ee:	e042      	b.n	8004476 <UART_SetConfig+0x2e6>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <UART_SetConfig+0x2c4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d13a      	bne.n	8004470 <UART_SetConfig+0x2e0>
 80043fa:	4b18      	ldr	r3, [pc, #96]	; (800445c <UART_SetConfig+0x2cc>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004404:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004408:	d01a      	beq.n	8004440 <UART_SetConfig+0x2b0>
 800440a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800440e:	d81b      	bhi.n	8004448 <UART_SetConfig+0x2b8>
 8004410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004414:	d00c      	beq.n	8004430 <UART_SetConfig+0x2a0>
 8004416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441a:	d815      	bhi.n	8004448 <UART_SetConfig+0x2b8>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <UART_SetConfig+0x298>
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004424:	d008      	beq.n	8004438 <UART_SetConfig+0x2a8>
 8004426:	e00f      	b.n	8004448 <UART_SetConfig+0x2b8>
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e022      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004430:	2302      	movs	r3, #2
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e01e      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004438:	2304      	movs	r3, #4
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e01a      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004440:	2308      	movs	r3, #8
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e016      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004448:	2310      	movs	r3, #16
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e012      	b.n	8004476 <UART_SetConfig+0x2e6>
 8004450:	efff69f3 	.word	0xefff69f3
 8004454:	40008000 	.word	0x40008000
 8004458:	40013800 	.word	0x40013800
 800445c:	40021000 	.word	0x40021000
 8004460:	40004400 	.word	0x40004400
 8004464:	40004800 	.word	0x40004800
 8004468:	40004c00 	.word	0x40004c00
 800446c:	40005000 	.word	0x40005000
 8004470:	2310      	movs	r3, #16
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a9f      	ldr	r2, [pc, #636]	; (80046f8 <UART_SetConfig+0x568>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d17a      	bne.n	8004576 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004484:	2b08      	cmp	r3, #8
 8004486:	d824      	bhi.n	80044d2 <UART_SetConfig+0x342>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x300>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044d3 	.word	0x080044d3
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044c3 	.word	0x080044c3
 80044a4:	080044d3 	.word	0x080044d3
 80044a8:	080044d3 	.word	0x080044d3
 80044ac:	080044d3 	.word	0x080044d3
 80044b0:	080044cb 	.word	0x080044cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b4:	f7ff f8d6 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 80044b8:	61f8      	str	r0, [r7, #28]
        break;
 80044ba:	e010      	b.n	80044de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044bc:	4b8f      	ldr	r3, [pc, #572]	; (80046fc <UART_SetConfig+0x56c>)
 80044be:	61fb      	str	r3, [r7, #28]
        break;
 80044c0:	e00d      	b.n	80044de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c2:	f7ff f837 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80044c6:	61f8      	str	r0, [r7, #28]
        break;
 80044c8:	e009      	b.n	80044de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ce:	61fb      	str	r3, [r7, #28]
        break;
 80044d0:	e005      	b.n	80044de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80fb 	beq.w	80046dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d305      	bcc.n	8004502 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d903      	bls.n	800450a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004508:	e0e8      	b.n	80046dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2200      	movs	r2, #0
 800450e:	461c      	mov	r4, r3
 8004510:	4615      	mov	r5, r2
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	022b      	lsls	r3, r5, #8
 800451c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004520:	0222      	lsls	r2, r4, #8
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	6849      	ldr	r1, [r1, #4]
 8004526:	0849      	lsrs	r1, r1, #1
 8004528:	2000      	movs	r0, #0
 800452a:	4688      	mov	r8, r1
 800452c:	4681      	mov	r9, r0
 800452e:	eb12 0a08 	adds.w	sl, r2, r8
 8004532:	eb43 0b09 	adc.w	fp, r3, r9
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004544:	4650      	mov	r0, sl
 8004546:	4659      	mov	r1, fp
 8004548:	f7fb fe3e 	bl	80001c8 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4613      	mov	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800455a:	d308      	bcc.n	800456e <UART_SetConfig+0x3de>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004562:	d204      	bcs.n	800456e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	e0b6      	b.n	80046dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004574:	e0b2      	b.n	80046dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457e:	d15e      	bne.n	800463e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004584:	2b08      	cmp	r3, #8
 8004586:	d828      	bhi.n	80045da <UART_SetConfig+0x44a>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x400>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	080045db 	.word	0x080045db
 80045a0:	080045cb 	.word	0x080045cb
 80045a4:	080045db 	.word	0x080045db
 80045a8:	080045db 	.word	0x080045db
 80045ac:	080045db 	.word	0x080045db
 80045b0:	080045d3 	.word	0x080045d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7ff f856 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61f8      	str	r0, [r7, #28]
        break;
 80045ba:	e014      	b.n	80045e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7ff f868 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80045c0:	61f8      	str	r0, [r7, #28]
        break;
 80045c2:	e010      	b.n	80045e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c4:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <UART_SetConfig+0x56c>)
 80045c6:	61fb      	str	r3, [r7, #28]
        break;
 80045c8:	e00d      	b.n	80045e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ca:	f7fe ffb3 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80045ce:	61f8      	str	r0, [r7, #28]
        break;
 80045d0:	e009      	b.n	80045e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d6:	61fb      	str	r3, [r7, #28]
        break;
 80045d8:	e005      	b.n	80045e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d077      	beq.n	80046dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005a      	lsls	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b0f      	cmp	r3, #15
 8004606:	d916      	bls.n	8004636 <UART_SetConfig+0x4a6>
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460e:	d212      	bcs.n	8004636 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f023 030f 	bic.w	r3, r3, #15
 8004618:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	b29b      	uxth	r3, r3
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	b29a      	uxth	r2, r3
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	4313      	orrs	r3, r2
 800462a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	8afa      	ldrh	r2, [r7, #22]
 8004632:	60da      	str	r2, [r3, #12]
 8004634:	e052      	b.n	80046dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800463c:	e04e      	b.n	80046dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800463e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004642:	2b08      	cmp	r3, #8
 8004644:	d827      	bhi.n	8004696 <UART_SetConfig+0x506>
 8004646:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0x4bc>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	08004671 	.word	0x08004671
 8004650:	08004679 	.word	0x08004679
 8004654:	08004681 	.word	0x08004681
 8004658:	08004697 	.word	0x08004697
 800465c:	08004687 	.word	0x08004687
 8004660:	08004697 	.word	0x08004697
 8004664:	08004697 	.word	0x08004697
 8004668:	08004697 	.word	0x08004697
 800466c:	0800468f 	.word	0x0800468f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004670:	f7fe fff8 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004674:	61f8      	str	r0, [r7, #28]
        break;
 8004676:	e014      	b.n	80046a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004678:	f7ff f80a 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 800467c:	61f8      	str	r0, [r7, #28]
        break;
 800467e:	e010      	b.n	80046a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004680:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <UART_SetConfig+0x56c>)
 8004682:	61fb      	str	r3, [r7, #28]
        break;
 8004684:	e00d      	b.n	80046a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004686:	f7fe ff55 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 800468a:	61f8      	str	r0, [r7, #28]
        break;
 800468c:	e009      	b.n	80046a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004692:	61fb      	str	r3, [r7, #28]
        break;
 8004694:	e005      	b.n	80046a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046a0:	bf00      	nop
    }

    if (pclk != 0U)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d019      	beq.n	80046dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	085a      	lsrs	r2, r3, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	441a      	add	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b0f      	cmp	r3, #15
 80046c0:	d909      	bls.n	80046d6 <UART_SetConfig+0x546>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	d205      	bcs.n	80046d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60da      	str	r2, [r3, #12]
 80046d4:	e002      	b.n	80046dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	; 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f6:	bf00      	nop
 80046f8:	40008000 	.word	0x40008000
 80046fc:	00f42400 	.word	0x00f42400

08004700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01a      	beq.n	8004816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fe:	d10a      	bne.n	8004816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]
  }
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b098      	sub	sp, #96	; 0x60
 8004848:	af02      	add	r7, sp, #8
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004854:	f7fc ff06 	bl	8001664 <HAL_GetTick>
 8004858:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d12e      	bne.n	80048c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f88c 	bl	8004994 <UART_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d021      	beq.n	80048c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004896:	653b      	str	r3, [r7, #80]	; 0x50
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
 80048a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e6      	bne.n	8004882 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e062      	b.n	800498c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d149      	bne.n	8004968 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048dc:	2200      	movs	r2, #0
 80048de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f856 	bl	8004994 <UART_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d03c      	beq.n	8004968 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	623b      	str	r3, [r7, #32]
   return(result);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490c:	633b      	str	r3, [r7, #48]	; 0x30
 800490e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	64bb      	str	r3, [r7, #72]	; 0x48
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004940:	61fa      	str	r2, [r7, #28]
 8004942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	69b9      	ldr	r1, [r7, #24]
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	617b      	str	r3, [r7, #20]
   return(result);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e011      	b.n	800498c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3758      	adds	r7, #88	; 0x58
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a4:	e049      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ac:	d045      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fc fe59 	bl	8001664 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e048      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d031      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d110      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2208      	movs	r2, #8
 80049ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f838 	bl	8004a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2208      	movs	r2, #8
 80049f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e029      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a14:	d111      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f81e 	bl	8004a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e00f      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	bf0c      	ite	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	2300      	movne	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d0a6      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b095      	sub	sp, #84	; 0x54
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
 8004a8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e6      	bne.n	8004a6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004abc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e5      	bne.n	8004a9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d118      	bne.n	8004b0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f023 0310 	bic.w	r3, r3, #16
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6979      	ldr	r1, [r7, #20]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	613b      	str	r3, [r7, #16]
   return(result);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e6      	bne.n	8004ad8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b1e:	bf00      	nop
 8004b20:	3754      	adds	r7, #84	; 0x54
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <memset>:
 8004b2a:	4402      	add	r2, r0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d100      	bne.n	8004b34 <memset+0xa>
 8004b32:	4770      	bx	lr
 8004b34:	f803 1b01 	strb.w	r1, [r3], #1
 8004b38:	e7f9      	b.n	8004b2e <memset+0x4>
	...

08004b3c <__libc_init_array>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4d0d      	ldr	r5, [pc, #52]	; (8004b74 <__libc_init_array+0x38>)
 8004b40:	4c0d      	ldr	r4, [pc, #52]	; (8004b78 <__libc_init_array+0x3c>)
 8004b42:	1b64      	subs	r4, r4, r5
 8004b44:	10a4      	asrs	r4, r4, #2
 8004b46:	2600      	movs	r6, #0
 8004b48:	42a6      	cmp	r6, r4
 8004b4a:	d109      	bne.n	8004b60 <__libc_init_array+0x24>
 8004b4c:	4d0b      	ldr	r5, [pc, #44]	; (8004b7c <__libc_init_array+0x40>)
 8004b4e:	4c0c      	ldr	r4, [pc, #48]	; (8004b80 <__libc_init_array+0x44>)
 8004b50:	f000 f818 	bl	8004b84 <_init>
 8004b54:	1b64      	subs	r4, r4, r5
 8004b56:	10a4      	asrs	r4, r4, #2
 8004b58:	2600      	movs	r6, #0
 8004b5a:	42a6      	cmp	r6, r4
 8004b5c:	d105      	bne.n	8004b6a <__libc_init_array+0x2e>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b64:	4798      	blx	r3
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7ee      	b.n	8004b48 <__libc_init_array+0xc>
 8004b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6e:	4798      	blx	r3
 8004b70:	3601      	adds	r6, #1
 8004b72:	e7f2      	b.n	8004b5a <__libc_init_array+0x1e>
 8004b74:	08004bec 	.word	0x08004bec
 8004b78:	08004bec 	.word	0x08004bec
 8004b7c:	08004bec 	.word	0x08004bec
 8004b80:	08004bf0 	.word	0x08004bf0

08004b84 <_init>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr

08004b90 <_fini>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr
